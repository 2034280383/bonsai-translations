# SPDX-License-Identifier: GPL-2.0-or-later


# ##### BEGIN AUTOGENERATED I18N SECTION #####


# NOTE: You can safely move around this auto-generated block (with the begin/end markers!),
#       and edit the translations by hand.
#       Just carefully respect the format of the tuple!

# Tuple of tuples:
# ((msgctxt, msgid), (sources, gen_comments), (lang, translation, (is_fuzzy, comments)), ...)
translations_tuple = (
    (("*", ""),
     ((), ()),
     ("de_DE", "Project-Id-Version: blenderbim (0)\nReport-Msgid-Bugs-To: \nPOT-Creation-Date: 2024-01-16 17:37:32.345295\nPO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\nLast-Translator: FULL NAME <EMAIL@ADDRESS>\nLanguage-Team: LANGUAGE <LL@li.org>\nLanguage: __POT__\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit",
               (False,
                ("Blender's translation file (po format).",
                 "Copyright (C) 2024 The Blender Authors.",
                 "This file is distributed under the same license as the Blender package.",
                 "FIRST AUTHOR <EMAIL@ADDRESS>, YEAR."))),
    ),
    (("Operator", "Bake Keyframes"),
     (('bpy.types.ACTION_OT_bake_keys',
       'bpy.types.GRAPH_OT_bake_keys'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add keyframes on every frame between the selected keyframes"),
     (('bpy.types.ACTION_OT_bake_keys',
       'bpy.types.GRAPH_OT_bake_keys'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Keyframes"),
     (('bpy.types.ACTION_OT_clean',
       'bpy.types.GRAPH_OT_clean'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify F-Curves by removing closely spaced keyframes"),
     (('bpy.types.ACTION_OT_clean',
       'bpy.types.GRAPH_OT_clean'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Keyframes"),
     (('bpy.types.ACTION_OT_copy',
       'bpy.types.GRAPH_OT_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected keyframes to the internal clipboard"),
     (('bpy.types.ACTION_OT_copy',
       'bpy.types.GRAPH_OT_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Keyframes"),
     (('bpy.types.ACTION_OT_duplicate',
       'bpy.types.GRAPH_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of all selected keyframes"),
     (('bpy.types.ACTION_OT_duplicate',
       'bpy.types.ACTION_OT_duplicate_move.ACTION_OT_duplicate',
       'bpy.types.GRAPH_OT_duplicate',
       'bpy.types.GRAPH_OT_duplicate_move.GRAPH_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of all selected keyframes and move them"),
     (('bpy.types.ACTION_OT_duplicate_move',
       'bpy.types.GRAPH_OT_duplicate_move'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Keyframes"),
     (('bpy.types.ACTION_OT_duplicate_move.ACTION_OT_duplicate',
       'bpy.types.GRAPH_OT_duplicate_move.GRAPH_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Keyframe Easing Type"),
     (('bpy.types.ACTION_OT_easing_type',
       'bpy.types.GRAPH_OT_easing_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set easing type for the F-Curve segments starting from the selected keyframes"),
     (('bpy.types.ACTION_OT_easing_type',
       'bpy.types.GRAPH_OT_easing_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set F-Curve Extrapolation"),
     (('bpy.types.ACTION_OT_extrapolation_type',
       'bpy.types.GRAPH_OT_extrapolation_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set extrapolation mode for selected F-Curves"),
     (('bpy.types.ACTION_OT_extrapolation_type',
       'bpy.types.GRAPH_OT_extrapolation_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Constant Extrapolation"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'CONSTANT'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'CONSTANT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Values on endpoint keyframes are held"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'CONSTANT'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'CONSTANT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Linear Extrapolation"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'LINEAR'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'LINEAR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Straight-line slope of end segments are extended past the endpoint keyframes"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'LINEAR'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'LINEAR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make Cyclic (F-Modifier)"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'MAKE_CYCLIC'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'MAKE_CYCLIC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Cycles F-Modifier if one doesn't exist already"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'MAKE_CYCLIC'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'MAKE_CYCLIC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Cyclic (F-Modifier)"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'CLEAR_CYCLIC'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'CLEAR_CYCLIC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Cycles F-Modifier if not needed anymore"),
     (("bpy.types.ACTION_OT_extrapolation_type.type:'CLEAR_CYCLIC'",
       "bpy.types.GRAPH_OT_extrapolation_type.type:'CLEAR_CYCLIC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Jump to Keyframes"),
     (('bpy.types.ACTION_OT_frame_jump',
       'bpy.types.GRAPH_OT_frame_jump'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the current frame to the average frame value of selected keyframes"),
     (('bpy.types.ACTION_OT_frame_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Keyframe Handle Type"),
     (('bpy.types.ACTION_OT_handle_type',
       'bpy.types.GRAPH_OT_handle_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set type of handle for selected keyframes"),
     (('bpy.types.ACTION_OT_handle_type',
       'bpy.types.GRAPH_OT_handle_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Keyframe Interpolation"),
     (('bpy.types.ACTION_OT_interpolation_type',
       'bpy.types.GRAPH_OT_interpolation_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set interpolation mode for the F-Curve segments starting from the selected keyframes"),
     (('bpy.types.ACTION_OT_interpolation_type',
       'bpy.types.GRAPH_OT_interpolation_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Keyframes"),
     (('bpy.types.ACTION_OT_keyframe_insert',
       'bpy.types.GRAPH_OT_keyframe_insert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert keyframes for the specified channels"),
     (('bpy.types.ACTION_OT_keyframe_insert',
       'bpy.types.GRAPH_OT_keyframe_insert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Channels"),
     (("bpy.types.ACTION_OT_keyframe_insert.type:'ALL'",
       "bpy.types.GRAPH_OT_keyframe_insert.type:'ALL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Selected Channels"),
     (("bpy.types.ACTION_OT_keyframe_insert.type:'SEL'",
       "bpy.types.GRAPH_OT_keyframe_insert.type:'SEL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "In Active Group"),
     (("bpy.types.ACTION_OT_keyframe_insert.type:'GROUP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Keyframe Type"),
     (('bpy.types.ACTION_OT_keyframe_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set type of keyframe for the selected keyframes"),
     (('bpy.types.ACTION_OT_keyframe_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Next Layer"),
     (('bpy.types.ACTION_OT_layer_next',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch to editing action in animation layer above the current action in the NLA Stack"),
     (('bpy.types.ACTION_OT_layer_next',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Previous Layer"),
     (('bpy.types.ACTION_OT_layer_prev',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch to editing action in animation layer below the current action in the NLA Stack"),
     (('bpy.types.ACTION_OT_layer_prev',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Markers Local"),
     (('bpy.types.ACTION_OT_markers_make_local',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected scene markers to the active Action as local 'pose' markers"),
     (('bpy.types.ACTION_OT_markers_make_local',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mirror Keys"),
     (('bpy.types.ACTION_OT_mirror',
       'bpy.types.GRAPH_OT_mirror'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip selected keyframes over the selected mirror line"),
     (('bpy.types.ACTION_OT_mirror',
       'bpy.types.GRAPH_OT_mirror'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Times Over Current Frame"),
     (("bpy.types.ACTION_OT_mirror.type:'CFRA'",
       "bpy.types.GRAPH_OT_mirror.type:'CFRA'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip times of selected keyframes using the current frame as the mirror line"),
     (("bpy.types.ACTION_OT_mirror.type:'CFRA'",
       "bpy.types.GRAPH_OT_mirror.type:'CFRA'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Values Over Zero Value"),
     (("bpy.types.ACTION_OT_mirror.type:'XAXIS'",
       "bpy.types.GRAPH_OT_mirror.type:'XAXIS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip values of selected keyframes (i.e. negative values become positive, and vice versa)"),
     (("bpy.types.ACTION_OT_mirror.type:'XAXIS'",
       "bpy.types.GRAPH_OT_mirror.type:'XAXIS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Times Over First Selected Marker"),
     (("bpy.types.ACTION_OT_mirror.type:'MARKER'",
       "bpy.types.GRAPH_OT_mirror.type:'MARKER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip times of selected keyframes using the first selected marker as the reference point"),
     (("bpy.types.ACTION_OT_mirror.type:'MARKER'",
       "bpy.types.GRAPH_OT_mirror.type:'MARKER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Action"),
     (('bpy.types.ACTION_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new action"),
     (('bpy.types.ACTION_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Preview Range to Selected"),
     (('bpy.types.ACTION_OT_previewrange_set',
       'bpy.types.GRAPH_OT_previewrange_set',
       'bpy.types.NLA_OT_previewrange_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Preview Range based on extents of selected Keyframes"),
     (('bpy.types.ACTION_OT_previewrange_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Push Down Action"),
     (('bpy.types.ACTION_OT_push_down',
       'bpy.types.NLA_OT_action_pushdown'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Push action down on to the NLA stack as a new strip"),
     (('bpy.types.ACTION_OT_push_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select keyframe points using circle selection"),
     (('bpy.types.ACTION_OT_select_circle',
       'bpy.types.GRAPH_OT_select_circle'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Less"),
     (('bpy.types.ACTION_OT_select_less',
       'bpy.types.ARMATURE_OT_select_less',
       'bpy.types.CURVES_OT_select_less',
       'bpy.types.CURVE_OT_select_less',
       'bpy.types.GPENCIL_OT_select_less',
       'bpy.types.GRAPH_OT_select_less',
       'bpy.types.GREASE_PENCIL_OT_select_less',
       'bpy.types.LATTICE_OT_select_less',
       'bpy.types.MASK_OT_select_less',
       'bpy.types.MESH_OT_select_less',
       'bpy.types.OBJECT_OT_select_less',
       'bpy.types.PAINT_OT_face_select_less',
       'bpy.types.PAINT_OT_vert_select_less',
       'bpy.types.PARTICLE_OT_select_less',
       'bpy.types.SEQUENCER_OT_select_less',
       'bpy.types.UV_OT_select_less'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect keyframes on ends of selection islands"),
     (('bpy.types.ACTION_OT_select_less',
       'bpy.types.GRAPH_OT_select_less'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select keyframes occurring in the same F-Curves as selected ones"),
     (('bpy.types.ACTION_OT_select_linked',
       'bpy.types.GRAPH_OT_select_linked'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select More"),
     (('bpy.types.ACTION_OT_select_more',
       'bpy.types.ARMATURE_OT_select_more',
       'bpy.types.CURVES_OT_select_more',
       'bpy.types.CURVE_OT_select_more',
       'bpy.types.GPENCIL_OT_select_more',
       'bpy.types.GRAPH_OT_select_more',
       'bpy.types.GREASE_PENCIL_OT_select_more',
       'bpy.types.LATTICE_OT_select_more',
       'bpy.types.MASK_OT_select_more',
       'bpy.types.MESH_OT_select_more',
       'bpy.types.OBJECT_OT_select_more',
       'bpy.types.PAINT_OT_face_select_more',
       'bpy.types.PAINT_OT_vert_select_more',
       'bpy.types.PARTICLE_OT_select_more',
       'bpy.types.SEQUENCER_OT_select_more',
       'bpy.types.UV_OT_select_more'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select keyframes beside already selected ones"),
     (('bpy.types.ACTION_OT_select_more',
       'bpy.types.GRAPH_OT_select_more'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Keys"),
     (('bpy.types.ACTION_OT_snap',
       'bpy.types.GRAPH_OT_snap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the times specified"),
     (('bpy.types.ACTION_OT_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection to Current Frame"),
     (("bpy.types.ACTION_OT_snap.type:'CFRA'",
       "bpy.types.GRAPH_OT_snap.type:'CFRA'",
       "bpy.types.NLA_OT_snap.type:'CFRA'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the current frame"),
     (("bpy.types.ACTION_OT_snap.type:'CFRA'",
       "bpy.types.GRAPH_OT_snap.type:'CFRA'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection to Nearest Frame"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_FRAME'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_FRAME'",
       "bpy.types.NLA_OT_snap.type:'NEAREST_FRAME'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the nearest (whole) frame (use to fix accidental subframe offsets)"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_FRAME'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_FRAME'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection to Nearest Second"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_SECOND'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_SECOND'",
       "bpy.types.NLA_OT_snap.type:'NEAREST_SECOND'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the nearest second"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_SECOND'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_SECOND'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection to Nearest Marker"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_MARKER'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_MARKER'",
       "bpy.types.NLA_OT_snap.type:'NEAREST_MARKER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the nearest marker"),
     (("bpy.types.ACTION_OT_snap.type:'NEAREST_MARKER'",
       "bpy.types.GRAPH_OT_snap.type:'NEAREST_MARKER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Stash Action"),
     (('bpy.types.ACTION_OT_stash',
       'bpy.types.ACTION_OT_stash_and_create'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store this action in the NLA stack as a non-contributing strip for later use"),
     (('bpy.types.ACTION_OT_stash',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create New Action"),
     (('bpy.types.ACTION_OT_stash.create_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new action once the existing one has been safely stored"),
     (('bpy.types.ACTION_OT_stash.create_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store this action in the NLA stack as a non-contributing strip for later use, and create a new action"),
     (('bpy.types.ACTION_OT_stash_and_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlink Action"),
     (('bpy.types.ACTION_OT_unlink',
       'bpy.types.NLA_OT_action_unlink'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink this action from the active action slot (and/or exit Tweak Mode)"),
     (('bpy.types.ACTION_OT_unlink',
       'bpy.types.NLA_OT_action_unlink'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force Delete"),
     (('bpy.types.ACTION_OT_unlink.force_delete',
       'bpy.types.NLA_OT_action_unlink.force_delete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Fake User and remove copy stashed in this data-block's NLA stack"),
     (('bpy.types.ACTION_OT_unlink.force_delete',
       'bpy.types.NLA_OT_action_unlink.force_delete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show full keyframe range"),
     (('bpy.types.ACTION_OT_view_all',
       'bpy.types.CLIP_OT_dopesheet_view_all',
       'bpy.types.GRAPH_OT_view_all'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Go to Current Frame"),
     (('bpy.types.ACTION_OT_view_frame',
       'bpy.types.GRAPH_OT_view_frame',
       'bpy.types.NLA_OT_view_frame',
       'bpy.types.SEQUENCER_OT_view_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the view to the current frame"),
     (('bpy.types.ACTION_OT_view_frame',
       'bpy.types.GRAPH_OT_view_frame',
       'bpy.types.NLA_OT_view_frame',
       'bpy.types.SEQUENCER_OT_view_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show selected keyframes range"),
     (('bpy.types.ACTION_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Frame"),
     (('bpy.types.ANIM_OT_change_frame',
       'bpy.types.CLIP_OT_change_frame',
       'bpy.types.IMAGE_OT_change_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively change the current frame number"),
     (('bpy.types.ANIM_OT_change_frame',
       'bpy.types.CLIP_OT_change_frame',
       'bpy.types.IMAGE_OT_change_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Frame Channel Under Cursor"),
     (('bpy.types.ANIM_OT_channel_view_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show the channel under the cursor"),
     (('bpy.types.ANIM_OT_channel_view_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include handles of keyframes when calculating extents"),
     (('bpy.types.ANIM_OT_channel_view_pick.include_handles',
       'bpy.types.ANIM_OT_channels_view_selected.include_handles',
       'bpy.types.GRAPH_OT_view_all.include_handles',
       'bpy.types.GRAPH_OT_view_selected.include_handles'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ignore frames outside of the preview range"),
     (('bpy.types.ANIM_OT_channel_view_pick.use_preview_range',
       'bpy.types.ANIM_OT_channels_view_selected.use_preview_range'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Empty Animation Data"),
     (('bpy.types.ANIM_OT_channels_clean_empty',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all empty animation data containers from visible data-blocks"),
     (('bpy.types.ANIM_OT_channels_clean_empty',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Channels"),
     (('bpy.types.ANIM_OT_channels_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all selected animation channels"),
     (('bpy.types.ANIM_OT_channels_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Channel Editability"),
     (('bpy.types.ANIM_OT_channels_editable_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle editability of selected channels"),
     (('bpy.types.ANIM_OT_channels_editable_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Revive Disabled F-Curves"),
     (('bpy.types.ANIM_OT_channels_fcurves_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear 'disabled' tag from all F-Curves to get broken F-Curves working again"),
     (('bpy.types.ANIM_OT_channels_fcurves_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Group Channels"),
     (('bpy.types.ANIM_OT_channels_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected F-Curves to a new group"),
     (('bpy.types.ANIM_OT_channels_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of newly created group"),
     (('bpy.types.ANIM_OT_channels_group.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rename Channel"),
     (('bpy.types.ANIM_OT_channels_rename',
       'bpy.types.SEQUENCER_OT_rename_channel'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rename animation channel under mouse"),
     (('bpy.types.ANIM_OT_channels_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter Channels"),
     (('bpy.types.ANIM_OT_channels_select_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start entering text which filters the set of channels shown to only include those with matching names"),
     (('bpy.types.ANIM_OT_channels_select_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable Channel Setting"),
     (('bpy.types.ANIM_OT_channels_setting_disable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disable specified setting on all selected animation channels"),
     (('bpy.types.ANIM_OT_channels_setting_disable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Enable Channel Setting"),
     (('bpy.types.ANIM_OT_channels_setting_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable specified setting on all selected animation channels"),
     (('bpy.types.ANIM_OT_channels_setting_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Channel Setting"),
     (('bpy.types.ANIM_OT_channels_setting_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle specified setting on all selected animation channels"),
     (('bpy.types.ANIM_OT_channels_setting_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Ungroup Channels"),
     (('bpy.types.ANIM_OT_channels_ungroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected F-Curves from their current groups"),
     (('bpy.types.ANIM_OT_channels_ungroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Frame Selected Channels"),
     (('bpy.types.ANIM_OT_channels_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show the selected channels"),
     (('bpy.types.ANIM_OT_channels_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Useless Actions"),
     (('bpy.types.ANIM_OT_clear_useless_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark actions with no F-Curves for deletion after save and reload of file preserving \\"action libraries\\""),
     (('bpy.types.ANIM_OT_clear_useless_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Unused"),
     (('bpy.types.ANIM_OT_clear_useless_actions.only_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only unused (Fake User only) actions get considered"),
     (('bpy.types.ANIM_OT_clear_useless_actions.only_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Driver"),
     (('bpy.types.ANIM_OT_copy_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the driver for the highlighted button"),
     (('bpy.types.ANIM_OT_copy_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Driver"),
     (('bpy.types.ANIM_OT_driver_button_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add driver for the property under the cursor"),
     (('bpy.types.ANIM_OT_driver_button_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Driver"),
     (('bpy.types.ANIM_OT_driver_button_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit the drivers for the connected property represented by the highlighted button"),
     (('bpy.types.ANIM_OT_driver_button_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Driver"),
     (('bpy.types.ANIM_OT_driver_button_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the driver(s) for the connected property(s) represented by the highlighted button"),
     (('bpy.types.ANIM_OT_driver_button_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete drivers for all elements of the array"),
     (('bpy.types.ANIM_OT_driver_button_remove.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set End Frame"),
     (('bpy.types.ANIM_OT_end_frame_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the current frame as the preview or scene end frame"),
     (('bpy.types.ANIM_OT_end_frame_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Animation"),
     (('bpy.types.ANIM_OT_keyframe_clear_v3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all keyframe animation for selected objects"),
     (('bpy.types.ANIM_OT_keyframe_clear_v3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Keying-Set Keyframe"),
     (('bpy.types.ANIM_OT_keyframe_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete keyframes on the current frame for all properties in the specified Keying Set"),
     (('bpy.types.ANIM_OT_keyframe_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The Keying Set to use"),
     (('bpy.types.ANIM_OT_keyframe_delete.type',
       'bpy.types.ANIM_OT_keyframe_delete_by_name.type',
       'bpy.types.ANIM_OT_keyframe_insert.type',
       'bpy.types.ANIM_OT_keyframe_insert_by_name.type',
       'bpy.types.ANIM_OT_keyframe_insert_menu.type',
       'bpy.types.ANIM_OT_keying_set_active_set.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Keying-Set Keyframe (by name)"),
     (('bpy.types.ANIM_OT_keyframe_delete_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alternate access to 'Delete Keyframe' for keymaps to use"),
     (('bpy.types.ANIM_OT_keyframe_delete_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Keyframe"),
     (('bpy.types.ANIM_OT_keyframe_delete_v3d',
       'bpy.types.CLIP_OT_keyframe_delete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove keyframes on current frame for selected objects and bones"),
     (('bpy.types.ANIM_OT_keyframe_delete_v3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Keyframe"),
     (('bpy.types.ANIM_OT_keyframe_insert',
       'bpy.types.CLIP_OT_keyframe_insert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert keyframes on the current frame for all properties in the specified Keying Set"),
     (('bpy.types.ANIM_OT_keyframe_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Keyframe (by name)"),
     (('bpy.types.ANIM_OT_keyframe_insert_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alternate access to 'Insert Keyframe' for keymaps to use"),
     (('bpy.types.ANIM_OT_keyframe_insert_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Keyframe Menu"),
     (('bpy.types.ANIM_OT_keyframe_insert_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert Keyframes for specified Keying Set, with menu of available Keying Sets if undefined"),
     (('bpy.types.ANIM_OT_keyframe_insert_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always Show Menu"),
     (('bpy.types.ANIM_OT_keyframe_insert_menu.always_prompt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Keying Set"),
     (('bpy.types.ANIM_OT_keying_set_active_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set a new active keying set"),
     (('bpy.types.ANIM_OT_keying_set_active_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Empty Keying Set"),
     (('bpy.types.ANIM_OT_keying_set_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new (empty) keying set to the active Scene"),
     (('bpy.types.ANIM_OT_keying_set_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export Keying Set..."),
     (('bpy.types.ANIM_OT_keying_set_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Keying Set to a Python script"),
     (('bpy.types.ANIM_OT_keying_set_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter text"),
     (('bpy.types.ANIM_OT_keying_set_export.filter_text',
       'bpy.types.PREFERENCES_OT_keyconfig_export.filter_text',
       'bpy.types.PREFERENCES_OT_keyconfig_import.filter_text'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Empty Keying Set Path"),
     (('bpy.types.ANIM_OT_keying_set_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add empty path to active keying set"),
     (('bpy.types.ANIM_OT_keying_set_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Active Keying Set Path"),
     (('bpy.types.ANIM_OT_keying_set_path_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove active Path from active keying set"),
     (('bpy.types.ANIM_OT_keying_set_path_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Active Keying Set"),
     (('bpy.types.ANIM_OT_keying_set_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active keying set"),
     (('bpy.types.ANIM_OT_keying_set_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add to Keying Set"),
     (('bpy.types.ANIM_OT_keyingset_button_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add current UI-active property to current keying set"),
     (('bpy.types.ANIM_OT_keyingset_button_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add all elements of the array to a Keying Set"),
     (('bpy.types.ANIM_OT_keyingset_button_add.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove from Keying Set"),
     (('bpy.types.ANIM_OT_keyingset_button_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove current UI-active property from current keying set"),
     (('bpy.types.ANIM_OT_keyingset_button_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Driver"),
     (('bpy.types.ANIM_OT_paste_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste the driver in the internal clipboard to the highlighted button"),
     (('bpy.types.ANIM_OT_paste_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Preview Range"),
     (('bpy.types.ANIM_OT_previewrange_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear preview range"),
     (('bpy.types.ANIM_OT_previewrange_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Preview Range"),
     (('bpy.types.ANIM_OT_previewrange_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively define frame range used for playback"),
     (('bpy.types.ANIM_OT_previewrange_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Start Frame"),
     (('bpy.types.ANIM_OT_start_frame_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the current frame as the preview or scene start frame"),
     (('bpy.types.ANIM_OT_start_frame_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Animated Transform Constraints"),
     (('bpy.types.ANIM_OT_update_animated_transform_constraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update f-curves/drivers affecting Transform constraints (use it with files from 2.70 and earlier)"),
     (('bpy.types.ANIM_OT_update_animated_transform_constraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert to Radians"),
     (('bpy.types.ANIM_OT_update_animated_transform_constraints.use_convert_to_radians',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert f-curves/drivers affecting rotations to radians.\nWarning: Use this only once"),
     (('bpy.types.ANIM_OT_update_animated_transform_constraints.use_convert_to_radians',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Align Bones"),
     (('bpy.types.ARMATURE_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align selected bones to the active bone (or to their parent)"),
     (('bpy.types.ARMATURE_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign to Collection"),
     (('bpy.types.ARMATURE_OT_assign_to_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign bones to a collection"),
     (('bpy.types.ARMATURE_OT_assign_to_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The bone collection to move the selected bones to"),
     (('bpy.types.ARMATURE_OT_assign_to_collection.collection',
       'bpy.types.ARMATURE_OT_move_to_collection.collection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the newly added bone collection"),
     (('bpy.types.ARMATURE_OT_assign_to_collection.new_collection_name',
       'bpy.types.ARMATURE_OT_move_to_collection.new_collection_name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Auto-Name by Axis"),
     (('bpy.types.ARMATURE_OT_autoside_names',
       'bpy.types.POSE_OT_autoside_names'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically renames the selected bones according to which side of the target axis they fall on"),
     (('bpy.types.ARMATURE_OT_autoside_names',
       'bpy.types.POSE_OT_autoside_names'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis to tag names with"),
     (('bpy.types.ARMATURE_OT_autoside_names.type',
       'bpy.types.POSE_OT_autoside_names.axis'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Left/Right"),
     (("bpy.types.ARMATURE_OT_autoside_names.type:'XAXIS'",
       "bpy.types.POSE_OT_autoside_names.axis:'XAXIS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Front/Back"),
     (("bpy.types.ARMATURE_OT_autoside_names.type:'YAXIS'",
       "bpy.types.POSE_OT_autoside_names.axis:'YAXIS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Top/Bottom"),
     (("bpy.types.ARMATURE_OT_autoside_names.type:'ZAXIS'",
       "bpy.types.POSE_OT_autoside_names.axis:'ZAXIS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Bone"),
     (('bpy.types.ARMATURE_OT_bone_primitive_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new bone located at the 3D cursor"),
     (('bpy.types.ARMATURE_OT_bone_primitive_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the newly created bone"),
     (('bpy.types.ARMATURE_OT_bone_primitive_add.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recalculate Roll"),
     (('bpy.types.ARMATURE_OT_calculate_roll',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically fix alignment of select bones' axes"),
     (('bpy.types.ARMATURE_OT_calculate_roll',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negate the alignment axis"),
     (('bpy.types.ARMATURE_OT_calculate_roll.axis_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shortest Rotation"),
     (('bpy.types.ARMATURE_OT_calculate_roll.axis_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ignore the axis direction, use the shortest rotation to align"),
     (('bpy.types.ARMATURE_OT_calculate_roll.axis_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Local +X Tangent"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'POS_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Local +Z Tangent"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'POS_Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global +X Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_POS_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global +Y Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_POS_Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global +Z Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_POS_Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Local -X Tangent"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'NEG_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Local -Z Tangent"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'NEG_Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global -X Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_NEG_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global -Y Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_NEG_Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global -Z Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'GLOBAL_NEG_Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View Axis"),
     (("bpy.types.ARMATURE_OT_calculate_roll.type:'VIEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new bone going from the last selected joint to the mouse position"),
     (('bpy.types.ARMATURE_OT_click_extrude',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new bone collection"),
     (('bpy.types.ARMATURE_OT_collection_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Selected Bones to Collection"),
     (('bpy.types.ARMATURE_OT_collection_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected bones to the chosen bone collection"),
     (('bpy.types.ARMATURE_OT_collection_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_assign.name',
       'bpy.types.ARMATURE_OT_collection_solo_visibility.name',
       'bpy.types.ARMATURE_OT_collection_unassign.name',
       'bpy.types.ARMATURE_OT_collection_unassign_named.name',
       "bpy.types.ARMATURE_OT_select_similar.type:'BONE_COLLECTION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the bone collection to assign this bone to; empty to assign to the active bone collection"),
     (('bpy.types.ARMATURE_OT_collection_assign.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deselect Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect bones of active Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change position of active Bone Collection in list of Bone collections"),
     (('bpy.types.ARMATURE_OT_collection_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the active Bone Collection towards"),
     (('bpy.types.ARMATURE_OT_collection_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active bone collection"),
     (('bpy.types.ARMATURE_OT_collection_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Bones of Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select bones in active Bone Collection"),
     (('bpy.types.ARMATURE_OT_collection_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show All"),
     (('bpy.types.ARMATURE_OT_collection_show_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show all bone collections"),
     (('bpy.types.ARMATURE_OT_collection_show_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Solo Visibility"),
     (('bpy.types.ARMATURE_OT_collection_solo_visibility',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide all other bone collections and show the active one"),
     (('bpy.types.ARMATURE_OT_collection_solo_visibility',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Selected from Bone collections"),
     (('bpy.types.ARMATURE_OT_collection_unassign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected bones from the active bone collection"),
     (('bpy.types.ARMATURE_OT_collection_unassign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the bone collection to unassign this bone from; empty to unassign from the active bone collection"),
     (('bpy.types.ARMATURE_OT_collection_unassign.name',
       'bpy.types.ARMATURE_OT_collection_unassign_named.name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Bone from Bone collections"),
     (('bpy.types.ARMATURE_OT_collection_unassign_named',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unassign the bone from this bone collection"),
     (('bpy.types.ARMATURE_OT_collection_unassign_named',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the bone to unassign from the collection; empty to use the active bone"),
     (('bpy.types.ARMATURE_OT_collection_unassign_named.bone_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Colors to Selected"),
     (('bpy.types.ARMATURE_OT_copy_bone_color_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the bone color of the active bone to all selected bones"),
     (('bpy.types.ARMATURE_OT_copy_bone_color_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Bone colors from the active bone to all selected bones"),
     (("bpy.types.ARMATURE_OT_copy_bone_color_to_selected.bone_type:'EDIT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Pose Bone colors from the active pose bone to all selected pose bones"),
     (("bpy.types.ARMATURE_OT_copy_bone_color_to_selected.bone_type:'POSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Selected Bone(s)"),
     (('bpy.types.ARMATURE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected bones from the armature"),
     (('bpy.types.ARMATURE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve Selected Bone(s)"),
     (('bpy.types.ARMATURE_OT_dissolve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve selected bones from the armature"),
     (('bpy.types.ARMATURE_OT_dissolve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Selected Bone(s)"),
     (('bpy.types.ARMATURE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make copies of the selected bones within the same armature"),
     (('bpy.types.ARMATURE_OT_duplicate',
       'bpy.types.ARMATURE_OT_duplicate_move.ARMATURE_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip Names"),
     (('bpy.types.ARMATURE_OT_duplicate.do_flip_names',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to flip names of the bones, if possible, instead of adding a number extension"),
     (('bpy.types.ARMATURE_OT_duplicate.do_flip_names',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make copies of the selected bones within the same armature and move them"),
     (('bpy.types.ARMATURE_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Selected Bone(s)"),
     (('bpy.types.ARMATURE_OT_duplicate_move.ARMATURE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Forked"),
     (('bpy.types.ARMATURE_OT_extrude.forked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Forked"),
     (('bpy.types.ARMATURE_OT_extrude_forked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fill Between Joints"),
     (('bpy.types.ARMATURE_OT_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add bone between selected joint(s) and/or 3D cursor"),
     (('bpy.types.ARMATURE_OT_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Names"),
     (('bpy.types.ARMATURE_OT_flip_names',
       'bpy.types.POSE_OT_flip_names'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flips (and corrects) the axis suffixes of the names of selected bones"),
     (('bpy.types.ARMATURE_OT_flip_names',
       'bpy.types.POSE_OT_flip_names'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Strip Numbers"),
     (('bpy.types.ARMATURE_OT_flip_names.do_strip_numbers',
       'bpy.types.POSE_OT_flip_names.do_strip_numbers'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to remove right-most dot-number from flipped names.\nWarning: May result in incoherent naming in some cases"),
     (('bpy.types.ARMATURE_OT_flip_names.do_strip_numbers',
       'bpy.types.POSE_OT_flip_names.do_strip_numbers'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move to Collection"),
     (('bpy.types.ARMATURE_OT_move_to_collection',
       'bpy.types.OBJECT_OT_move_to_collection',
       'bpy.types.OUTLINER_OT_collection_drop'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move bones to a collection"),
     (('bpy.types.ARMATURE_OT_move_to_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Parent"),
     (('bpy.types.ARMATURE_OT_parent_clear',
       'bpy.types.MASK_OT_parent_clear',
       'bpy.types.OBJECT_OT_parent_clear'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the parent-child relationship between selected bones and their parents"),
     (('bpy.types.ARMATURE_OT_parent_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Type"),
     (('bpy.types.ARMATURE_OT_parent_clear.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "What way to clear parenting"),
     (('bpy.types.ARMATURE_OT_parent_clear.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Parent"),
     (("bpy.types.ARMATURE_OT_parent_clear.type:'CLEAR'",
       "bpy.types.OBJECT_OT_parent_clear.type:'CLEAR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disconnect Bone"),
     (("bpy.types.ARMATURE_OT_parent_clear.type:'DISCONNECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Parent"),
     (('bpy.types.ARMATURE_OT_parent_set',
       'bpy.types.MASK_OT_parent_set',
       'bpy.types.NODE_OT_parent_set',
       'bpy.types.OBJECT_OT_parent_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the active bone as the parent of the selected bones"),
     (('bpy.types.ARMATURE_OT_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of parenting"),
     (('bpy.types.ARMATURE_OT_parent_set.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reveal Hidden"),
     (('bpy.types.ARMATURE_OT_reveal',
       'bpy.types.CURVE_OT_reveal',
       'bpy.types.MBALL_OT_reveal_metaelems',
       'bpy.types.MESH_OT_reveal',
       'bpy.types.UV_OT_reveal'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all bones hidden in Edit Mode"),
     (('bpy.types.ARMATURE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Roll"),
     (('bpy.types.ARMATURE_OT_roll_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear roll for selected bones"),
     (('bpy.types.ARMATURE_OT_roll_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect those bones at the boundary of each selection region"),
     (('bpy.types.ARMATURE_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Linked All"),
     (('bpy.types.ARMATURE_OT_select_linked',
       'bpy.types.CURVE_OT_select_linked',
       'bpy.types.MASK_OT_select_linked',
       'bpy.types.MESH_OT_select_linked',
       'bpy.types.PARTICLE_OT_select_linked'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all bones linked by parent/child connections to the current selection"),
     (('bpy.types.ARMATURE_OT_select_linked',
       'bpy.types.POSE_OT_select_linked'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select those bones connected to the initial selection"),
     (('bpy.types.ARMATURE_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Similar"),
     (('bpy.types.ARMATURE_OT_select_similar',
       'bpy.types.CURVE_OT_select_similar',
       'bpy.types.MBALL_OT_select_similar',
       'bpy.types.MESH_OT_select_similar',
       'bpy.types.UV_OT_select_similar'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar bones by property types"),
     (('bpy.types.ARMATURE_OT_select_similar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Immediate Children"),
     (("bpy.types.ARMATURE_OT_select_similar.type:'CHILDREN_IMMEDIATE'",
       "bpy.types.OBJECT_OT_select_grouped.type:'CHILDREN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Siblings"),
     (("bpy.types.ARMATURE_OT_select_similar.type:'SIBLINGS'",
       "bpy.types.OBJECT_OT_select_grouped.type:'SIBLINGS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction (Y Axis)"),
     (("bpy.types.ARMATURE_OT_select_similar.type:'DIRECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Separate Bones"),
     (('bpy.types.ARMATURE_OT_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Isolate selected bones into a separate armature"),
     (('bpy.types.ARMATURE_OT_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select shortest path between two bones"),
     (('bpy.types.ARMATURE_OT_shortest_path_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split"),
     (('bpy.types.ARMATURE_OT_split',
       'bpy.types.CURVE_OT_split',
       'bpy.types.MESH_OT_split'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split off selected bones from connected unselected bones"),
     (('bpy.types.ARMATURE_OT_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Subdivide"),
     (('bpy.types.ARMATURE_OT_subdivide',
       'bpy.types.CURVE_OT_subdivide',
       'bpy.types.MESH_OT_subdivide',
       'bpy.types.PARTICLE_OT_subdivide'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Break selected bones into chains of smaller bones"),
     (('bpy.types.ARMATURE_OT_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of Cuts"),
     (('bpy.types.ARMATURE_OT_subdivide.number_cuts',
       'bpy.types.CURVE_OT_subdivide.number_cuts',
       'bpy.types.GPENCIL_OT_stroke_subdivide.number_cuts',
       'bpy.types.MESH_OT_bridge_edge_loops.number_cuts',
       'bpy.types.MESH_OT_loopcut.number_cuts',
       'bpy.types.MESH_OT_subdivide.number_cuts',
       'bpy.types.MESH_OT_subdivide_edgering.number_cuts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Switch Direction"),
     (('bpy.types.ARMATURE_OT_switch_direction',
       'bpy.types.CURVE_OT_switch_direction',
       'bpy.types.MASK_OT_switch_direction'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the direction that a chain of bones points in (head and tail swap)"),
     (('bpy.types.ARMATURE_OT_switch_direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Symmetrize"),
     (('bpy.types.ARMATURE_OT_symmetrize',
       'bpy.types.MESH_OT_symmetrize',
       'bpy.types.SCULPT_OT_symmetrize'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enforce symmetry, make copies of the selection or use existing"),
     (('bpy.types.ARMATURE_OT_symmetrize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which sides to copy from and to (when both are selected)"),
     (('bpy.types.ARMATURE_OT_symmetrize.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign Action"),
     (('bpy.types.ASSET_OT_assign_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set this pose Action as active Action on the active Object"),
     (('bpy.types.ASSET_OT_assign_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy to Asset Library"),
     (('bpy.types.ASSET_OT_bundle_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the current .blend file into an Asset Library. Only works on standalone .blend files (i.e. when no other files are referenced)"),
     (('bpy.types.ASSET_OT_bundle_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Asset Catalog"),
     (('bpy.types.ASSET_OT_catalog_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove an asset catalog from the asset library (contained assets will not be affected and show up as unassigned)"),
     (('bpy.types.ASSET_OT_catalog_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Catalog ID"),
     (('bpy.types.ASSET_OT_catalog_delete.catalog_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ID of the catalog to delete"),
     (('bpy.types.ASSET_OT_catalog_delete.catalog_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Asset Catalog"),
     (('bpy.types.ASSET_OT_catalog_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new catalog to put assets in"),
     (('bpy.types.ASSET_OT_catalog_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Parent Path"),
     (('bpy.types.ASSET_OT_catalog_new.parent_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Optional path defining the location to put the new catalog under"),
     (('bpy.types.ASSET_OT_catalog_new.parent_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Redo Catalog Edits"),
     (('bpy.types.ASSET_OT_catalog_redo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Redo the last undone edit to the asset catalogs"),
     (('bpy.types.ASSET_OT_catalog_redo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Undo Catalog Edits"),
     (('bpy.types.ASSET_OT_catalog_undo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo the last edit to the asset catalogs"),
     (('bpy.types.ASSET_OT_catalog_undo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Store undo snapshot for asset catalog edits"),
     (('bpy.types.ASSET_OT_catalog_undo_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store the current state of the asset catalogs in the undo buffer"),
     (('bpy.types.ASSET_OT_catalog_undo_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Asset Catalogs"),
     (('bpy.types.ASSET_OT_catalogs_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make any edits to any catalogs permanent by writing the current set up to the asset library"),
     (('bpy.types.ASSET_OT_catalogs_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Asset"),
     (('bpy.types.ASSET_OT_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all asset metadata and turn the selected asset data-blocks back into normal data-blocks"),
     (('bpy.types.ASSET_OT_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Fake User"),
     (('bpy.types.ASSET_OT_clear.set_fake_user',
       'bpy.types.ASSET_OT_clear_single.set_fake_user'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ensure the data-block is saved, even when it is no longer marked as asset"),
     (('bpy.types.ASSET_OT_clear.set_fake_user',
       'bpy.types.ASSET_OT_clear_single.set_fake_user'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Single Asset"),
     (('bpy.types.ASSET_OT_clear_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all asset metadata and turn the asset data-block back into a normal data-block"),
     (('bpy.types.ASSET_OT_clear_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh Asset Library"),
     (('bpy.types.ASSET_OT_library_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reread assets and asset catalogs from the asset library on disk"),
     (('bpy.types.ASSET_OT_library_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark as Asset"),
     (('bpy.types.ASSET_OT_mark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable easier reuse of selected data-blocks through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)"),
     (('bpy.types.ASSET_OT_mark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark as Single Asset"),
     (('bpy.types.ASSET_OT_mark_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable easier reuse of a data-block through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)"),
     (('bpy.types.ASSET_OT_mark_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Blend File"),
     (('bpy.types.ASSET_OT_open_containing_blend_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the blend file that contains the active asset"),
     (('bpy.types.ASSET_OT_open_containing_blend_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Asset Tag"),
     (('bpy.types.ASSET_OT_tag_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new keyword tag to the active asset"),
     (('bpy.types.ASSET_OT_tag_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Asset Tag"),
     (('bpy.types.ASSET_OT_tag_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove an existing keyword tag from the active asset"),
     (('bpy.types.ASSET_OT_tag_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Boid Rule"),
     (('bpy.types.BOID_OT_rule_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a boid rule to the current boid state"),
     (('bpy.types.BOID_OT_rule_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Boid Rule"),
     (('bpy.types.BOID_OT_rule_del',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete current boid rule"),
     (('bpy.types.BOID_OT_rule_del',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Boid Rule"),
     (('bpy.types.BOID_OT_rule_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move boid rule down in the list"),
     (('bpy.types.BOID_OT_rule_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Boid Rule"),
     (('bpy.types.BOID_OT_rule_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move boid rule up in the list"),
     (('bpy.types.BOID_OT_rule_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Boid State"),
     (('bpy.types.BOID_OT_state_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a boid state to the particle system"),
     (('bpy.types.BOID_OT_state_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Boid State"),
     (('bpy.types.BOID_OT_state_del',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete current boid state"),
     (('bpy.types.BOID_OT_state_del',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Boid State"),
     (('bpy.types.BOID_OT_state_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move boid state down in the list"),
     (('bpy.types.BOID_OT_state_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Boid State"),
     (('bpy.types.BOID_OT_state_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move boid state up in the list"),
     (('bpy.types.BOID_OT_state_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Brush"),
     (('bpy.types.BRUSH_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add brush by mode type"),
     (('bpy.types.BRUSH_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Drawing Brush"),
     (('bpy.types.BRUSH_OT_add_gpencil',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add brush for Grease Pencil"),
     (('bpy.types.BRUSH_OT_add_gpencil',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Preset"),
     (('bpy.types.BRUSH_OT_curve_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set brush shape"),
     (('bpy.types.BRUSH_OT_curve_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Curve", "Mode"),
     (('bpy.types.BRUSH_OT_curve_preset.shape',
       'bpy.types.BRUSH_OT_sculpt_curves_falloff_preset.shape',
       'bpy.types.RENDER_OT_shutter_curve_preset.shape'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Curve", "Max"),
     (("bpy.types.BRUSH_OT_curve_preset.shape:'MAX'",
       "bpy.types.BRUSH_OT_sculpt_curves_falloff_preset.shape:'MAX'",
       "bpy.types.RENDER_OT_shutter_curve_preset.shape:'MAX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Curve", "Line"),
     (("bpy.types.BRUSH_OT_curve_preset.shape:'LINE'",
       "bpy.types.BRUSH_OT_sculpt_curves_falloff_preset.shape:'LINE'",
       "bpy.types.RENDER_OT_shutter_curve_preset.shape:'LINE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Curve", "Round"),
     (("bpy.types.BRUSH_OT_curve_preset.shape:'ROUND'",
       "bpy.types.BRUSH_OT_sculpt_curves_falloff_preset.shape:'ROUND'",
       "bpy.types.RENDER_OT_shutter_curve_preset.shape:'ROUND'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Brush"),
     (('bpy.types.BRUSH_OT_reset',
       'bpy.types.GPENCIL_OT_brush_reset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Return brush to defaults based on current tool"),
     (('bpy.types.BRUSH_OT_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Curve Falloff Preset"),
     (('bpy.types.BRUSH_OT_sculpt_curves_falloff_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Curve Falloff Preset"),
     (('bpy.types.BRUSH_OT_sculpt_curves_falloff_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Image Aspect"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When using an image texture, adjust the stencil size to fit the image aspect ratio"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify Mask Stencil"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.mask',
       'bpy.types.BRUSH_OT_stencil_reset_transform.mask'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify either the primary or mask stencil"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.mask',
       'bpy.types.BRUSH_OT_stencil_reset_transform.mask'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Repeat"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.use_repeat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use repeat mapping values"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.use_repeat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Scale"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.use_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use texture scale values"),
     (('bpy.types.BRUSH_OT_stencil_fit_image_aspect.use_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Transform"),
     (('bpy.types.BRUSH_OT_stencil_reset_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the stencil transformation to the default"),
     (('bpy.types.BRUSH_OT_stencil_reset_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Filter"),
     (('bpy.types.BUTTONS_OT_clear_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the search filter"),
     (('bpy.types.BUTTONS_OT_clear_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Menu"),
     (('bpy.types.BUTTONS_OT_context_menu',
       'bpy.types.OUTLINER_OT_operation'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display properties editor context_menu"),
     (('bpy.types.BUTTONS_OT_context_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Accept"),
     (('bpy.types.BUTTONS_OT_directory_browse',
       'bpy.types.BUTTONS_OT_file_browse'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a directory browser, hold Shift to open the file, Alt to browse containing directory"),
     (('bpy.types.BUTTONS_OT_directory_browse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Directory of the file"),
     (('bpy.types.BUTTONS_OT_directory_browse.directory',
       'bpy.types.CLIP_OT_open.directory',
       'bpy.types.FILE_OT_find_missing_files.directory',
       'bpy.types.IMAGE_OT_open.directory',
       'bpy.types.OBJECT_OT_volume_import.directory',
       'bpy.types.PREFERENCES_OT_asset_library_add.directory',
       'bpy.types.PREFERENCES_OT_extension_repo_add.directory',
       'bpy.types.SEQUENCER_OT_change_path.directory',
       'bpy.types.SEQUENCER_OT_image_strip_add.directory',
       'bpy.types.SEQUENCER_OT_movie_strip_add.directory',
       'bpy.types.SEQUENCER_OT_sound_strip_add.directory',
       'bpy.types.WM_OT_append.directory',
       'bpy.types.WM_OT_gpencil_import_svg.directory',
       'bpy.types.WM_OT_lib_reload.directory',
       'bpy.types.WM_OT_lib_relocate.directory',
       'bpy.types.WM_OT_link.directory',
       'bpy.types.WM_OT_obj_import.directory',
       'bpy.types.WM_OT_ply_import.directory',
       'bpy.types.WM_OT_stl_import.directory'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the file relative to the blend file"),
     (('bpy.types.BUTTONS_OT_directory_browse.relative_path',
       'bpy.types.BUTTONS_OT_file_browse.relative_path',
       'bpy.types.CACHEFILE_OT_layer_add.relative_path',
       'bpy.types.CACHEFILE_OT_open.relative_path',
       'bpy.types.CLIP_OT_open.relative_path',
       'bpy.types.FONT_OT_open.relative_path',
       'bpy.types.IMAGE_OT_file_browse.relative_path',
       'bpy.types.IMAGE_OT_open.relative_path',
       'bpy.types.IMAGE_OT_replace.relative_path',
       'bpy.types.IMAGE_OT_save_as.relative_path',
       'bpy.types.NODE_OT_add_file.relative_path',
       'bpy.types.OBJECT_OT_drop_named_image.relative_path',
       'bpy.types.OBJECT_OT_multires_external_save.relative_path',
       'bpy.types.OBJECT_OT_volume_import.relative_path',
       'bpy.types.SEQUENCER_OT_change_path.relative_path',
       'bpy.types.SEQUENCER_OT_image_strip_add.relative_path',
       'bpy.types.SEQUENCER_OT_movie_strip_add.relative_path',
       'bpy.types.SEQUENCER_OT_sound_strip_add.relative_path',
       'bpy.types.SOUND_OT_mixdown.relative_path',
       'bpy.types.SOUND_OT_open.relative_path',
       'bpy.types.SOUND_OT_open_mono.relative_path',
       'bpy.types.VIEW3D_OT_background_image_add.relative_path',
       'bpy.types.WM_OT_alembic_import.relative_path',
       'bpy.types.WM_OT_gpencil_import_svg.relative_path',
       'bpy.types.WM_OT_lib_reload.relative_path',
       'bpy.types.WM_OT_lib_relocate.relative_path',
       'bpy.types.WM_OT_link.relative_path',
       'bpy.types.WM_OT_usd_import.relative_path'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a file browser, hold Shift to open the file, Alt to browse containing directory"),
     (('bpy.types.BUTTONS_OT_file_browse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter"),
     (('bpy.types.BUTTONS_OT_start_filter',
       'bpy.types.FILE_OT_start_filter'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start entering filter text"),
     (('bpy.types.BUTTONS_OT_start_filter',
       'bpy.types.FILE_OT_start_filter'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Pin ID"),
     (('bpy.types.BUTTONS_OT_toggle_pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep the current data-block displayed"),
     (('bpy.types.BUTTONS_OT_toggle_pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add layer"),
     (('bpy.types.CACHEFILE_OT_layer_add',
       'bpy.types.CACHEFILE_OT_layer_remove'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an override layer to the archive"),
     (('bpy.types.CACHEFILE_OT_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move layer"),
     (('bpy.types.CACHEFILE_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move layer in the list, layers further down the list will overwrite data from the layers higher up"),
     (('bpy.types.CACHEFILE_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the active vertex group towards"),
     (('bpy.types.CACHEFILE_OT_layer_move.direction',
       'bpy.types.OBJECT_OT_vertex_group_move.direction'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove an override layer from the archive"),
     (('bpy.types.CACHEFILE_OT_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Cache File"),
     (('bpy.types.CACHEFILE_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a cache file"),
     (('bpy.types.CACHEFILE_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh Archive"),
     (('bpy.types.CACHEFILE_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update objects paths list with new data from the archive"),
     (('bpy.types.CACHEFILE_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Camera Preset"),
     (('bpy.types.CAMERA_OT_preset_add',
       'bpy.types.CLIP_OT_camera_preset_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Camera Preset"),
     (('bpy.types.CAMERA_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the preset, used to make the path name"),
     (('bpy.types.CAMERA_OT_preset_add.name',
       'bpy.types.CAMERA_OT_safe_areas_preset_add.name',
       'bpy.types.CLIP_OT_camera_preset_add.name',
       'bpy.types.CLIP_OT_track_color_preset_add.name',
       'bpy.types.CLIP_OT_tracking_settings_preset_add.name',
       'bpy.types.CLOTH_OT_preset_add.name',
       'bpy.types.FLUID_OT_preset_add.name',
       'bpy.types.NODE_OT_node_color_preset_add.name',
       'bpy.types.PARTICLE_OT_hair_dynamics_preset_add.name',
       'bpy.types.RENDER_OT_cycles_integrator_preset_add.name',
       'bpy.types.RENDER_OT_cycles_performance_preset_add.name',
       'bpy.types.RENDER_OT_cycles_sampling_preset_add.name',
       'bpy.types.RENDER_OT_cycles_viewport_sampling_preset_add.name',
       'bpy.types.RENDER_OT_preset_add.name',
       'bpy.types.SCENE_OT_gpencil_brush_preset_add.name',
       'bpy.types.SCENE_OT_gpencil_material_preset_add.name',
       'bpy.types.TEXT_EDITOR_OT_preset_add.name',
       'bpy.types.WM_OT_interface_theme_preset_add.name',
       'bpy.types.WM_OT_keyconfig_preset_add.name',
       'bpy.types.WM_OT_operator_preset_add.name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Focal Length"),
     (('bpy.types.CAMERA_OT_preset_add.use_focal_length',
       'bpy.types.CLIP_OT_camera_preset_add.use_focal_length'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include focal length into the preset"),
     (('bpy.types.CAMERA_OT_preset_add.use_focal_length',
       'bpy.types.CLIP_OT_camera_preset_add.use_focal_length'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Safe Area Preset"),
     (('bpy.types.CAMERA_OT_safe_areas_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Safe Areas Preset"),
     (('bpy.types.CAMERA_OT_safe_areas_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Marker"),
     (('bpy.types.CLIP_OT_add_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place new marker at specified location"),
     (('bpy.types.CLIP_OT_add_marker',
       'bpy.types.CLIP_OT_add_marker_move.CLIP_OT_add_marker',
       'bpy.types.CLIP_OT_add_marker_slide.CLIP_OT_add_marker'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Location of marker on frame"),
     (('bpy.types.CLIP_OT_add_marker.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Marker at Click"),
     (('bpy.types.CLIP_OT_add_marker_at_click',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place new marker at the desired (clicked) position"),
     (('bpy.types.CLIP_OT_add_marker_at_click',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Marker and Move"),
     (('bpy.types.CLIP_OT_add_marker_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new marker and move it on movie"),
     (('bpy.types.CLIP_OT_add_marker_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Marker"),
     (('bpy.types.CLIP_OT_add_marker_move.CLIP_OT_add_marker',
       'bpy.types.CLIP_OT_add_marker_slide.CLIP_OT_add_marker'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Marker and Slide"),
     (('bpy.types.CLIP_OT_add_marker_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new marker and slide it with mouse until mouse button release"),
     (('bpy.types.CLIP_OT_add_marker_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Solution Scale"),
     (('bpy.types.CLIP_OT_apply_solution_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply scale on solution itself to make distance between selected tracks equals to desired"),
     (('bpy.types.CLIP_OT_apply_solution_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Distance between selected tracks"),
     (('bpy.types.CLIP_OT_apply_solution_scale.distance',
       'bpy.types.CLIP_OT_set_scale.distance',
       'bpy.types.CLIP_OT_set_solution_scale.distance'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Average Tracks"),
     (('bpy.types.CLIP_OT_average_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Average selected tracks into active"),
     (('bpy.types.CLIP_OT_average_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("MovieClip", "Keep Original"),
     (('bpy.types.CLIP_OT_average_tracks.keep_original',
       'bpy.types.GPENCIL_OT_reproject.keep_original'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original tracks"),
     (('bpy.types.CLIP_OT_average_tracks.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "3D Markers to Mesh"),
     (('bpy.types.CLIP_OT_bundles_to_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create vertex cloud using coordinates of reconstructed tracks"),
     (('bpy.types.CLIP_OT_bundles_to_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Tracking Camera Intrinsics Preset"),
     (('bpy.types.CLIP_OT_camera_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Tracks"),
     (('bpy.types.CLIP_OT_clean_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clean tracks with high error values or few frames"),
     (('bpy.types.CLIP_OT_clean_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Affect tracks which have a larger reprojection error"),
     (('bpy.types.CLIP_OT_clean_tracks.error',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Affect tracks which are tracked less than the specified number of frames"),
     (('bpy.types.CLIP_OT_clean_tracks.frames',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Solution"),
     (('bpy.types.CLIP_OT_clear_solution',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all calculated data"),
     (('bpy.types.CLIP_OT_clear_solution',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Constraint to F-Curve"),
     (('bpy.types.CLIP_OT_constraint_to_fcurve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create F-Curves for object which will copy object's movement caused by this constraint"),
     (('bpy.types.CLIP_OT_constraint_to_fcurve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Tracks"),
     (('bpy.types.CLIP_OT_copy_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected tracks to the internal clipboard"),
     (('bpy.types.CLIP_OT_copy_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Plane Track"),
     (('bpy.types.CLIP_OT_create_plane_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new plane track out of selected point tracks"),
     (('bpy.types.CLIP_OT_create_plane_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set 2D Cursor"),
     (('bpy.types.CLIP_OT_cursor_set',
       'bpy.types.SEQUENCER_OT_cursor_set',
       'bpy.types.UV_OT_cursor_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set 2D cursor location"),
     (('bpy.types.CLIP_OT_cursor_set',
       'bpy.types.SEQUENCER_OT_cursor_set',
       'bpy.types.UV_OT_cursor_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor location in normalized clip coordinates"),
     (('bpy.types.CLIP_OT_cursor_set.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Marker"),
     (('bpy.types.CLIP_OT_delete_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete marker for current frame from selected tracks"),
     (('bpy.types.CLIP_OT_delete_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Proxy"),
     (('bpy.types.CLIP_OT_delete_proxy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete movie clip proxy files from the hard drive"),
     (('bpy.types.CLIP_OT_delete_proxy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Track"),
     (('bpy.types.CLIP_OT_delete_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected tracks"),
     (('bpy.types.CLIP_OT_delete_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Detect Features"),
     (('bpy.types.CLIP_OT_detect_features',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically detect features and place markers to track"),
     (('bpy.types.CLIP_OT_detect_features',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only features further than margin pixels from the image edges are considered"),
     (('bpy.types.CLIP_OT_detect_features.margin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimal distance accepted between two features"),
     (('bpy.types.CLIP_OT_detect_features.min_distance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Placement"),
     (('bpy.types.CLIP_OT_detect_features.placement',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Placement for detected features"),
     (('bpy.types.CLIP_OT_detect_features.placement',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Whole Frame"),
     (("bpy.types.CLIP_OT_detect_features.placement:'FRAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place markers across the whole frame"),
     (("bpy.types.CLIP_OT_detect_features.placement:'FRAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Inside Annotated Area"),
     (("bpy.types.CLIP_OT_detect_features.placement:'INSIDE_GPENCIL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place markers only inside areas outlined with the Annotation tool"),
     (("bpy.types.CLIP_OT_detect_features.placement:'INSIDE_GPENCIL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Outside Annotated Area"),
     (("bpy.types.CLIP_OT_detect_features.placement:'OUTSIDE_GPENCIL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place markers only outside areas outlined with the Annotation tool"),
     (("bpy.types.CLIP_OT_detect_features.placement:'OUTSIDE_GPENCIL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Threshold level to consider feature good enough for tracking"),
     (('bpy.types.CLIP_OT_detect_features.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter Tracks"),
     (('bpy.types.CLIP_OT_filter_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter tracks which has weirdly looking spikes in motion curves"),
     (('bpy.types.CLIP_OT_filter_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Track Threshold"),
     (('bpy.types.CLIP_OT_filter_tracks.track_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter Threshold to select problematic tracks"),
     (('bpy.types.CLIP_OT_filter_tracks.track_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Center Current Frame"),
     (('bpy.types.CLIP_OT_graph_center_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scroll view so current frame would be centered"),
     (('bpy.types.CLIP_OT_graph_center_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Curve"),
     (('bpy.types.CLIP_OT_graph_delete_curve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete track corresponding to the selected curve"),
     (('bpy.types.CLIP_OT_graph_delete_curve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Knot"),
     (('bpy.types.CLIP_OT_graph_delete_knot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete curve knots"),
     (('bpy.types.CLIP_OT_graph_delete_knot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select curve points using box selection"),
     (('bpy.types.CLIP_OT_graph_select_box',
       'bpy.types.MASK_OT_select_box'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View all curves in editor"),
     (('bpy.types.CLIP_OT_graph_view_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hide Tracks Clear"),
     (('bpy.types.CLIP_OT_hide_tracks_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear hide selected tracks"),
     (('bpy.types.CLIP_OT_hide_tracks_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join Tracks"),
     (('bpy.types.CLIP_OT_join_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join selected tracks"),
     (('bpy.types.CLIP_OT_join_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete a keyframe from selected tracks at current frame"),
     (('bpy.types.CLIP_OT_keyframe_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe to selected tracks at current frame"),
     (('bpy.types.CLIP_OT_keyframe_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Lock Selection"),
     (('bpy.types.CLIP_OT_lock_selection_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Lock Selection option of the current clip editor"),
     (('bpy.types.CLIP_OT_lock_selection_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Clip Mode"),
     (('bpy.types.CLIP_OT_mode_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the clip interaction mode"),
     (('bpy.types.CLIP_OT_mode_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Image from Plane Marker"),
     (('bpy.types.CLIP_OT_new_image_from_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new image from the content of the plane marker"),
     (('bpy.types.CLIP_OT_new_image_from_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Clip"),
     (('bpy.types.CLIP_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a sequence of frames or a movie file"),
     (('bpy.types.CLIP_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable Multi-View"),
     (('bpy.types.CLIP_OT_open.show_multiview',
       'bpy.types.ED_OT_lib_id_load_custom_preview.show_multiview',
       'bpy.types.GRAPH_OT_sound_to_samples.show_multiview',
       'bpy.types.IMAGE_OT_file_browse.show_multiview',
       'bpy.types.IMAGE_OT_open.show_multiview',
       'bpy.types.IMAGE_OT_replace.show_multiview',
       'bpy.types.IMAGE_OT_save_as.show_multiview',
       'bpy.types.NODE_OT_add_file.show_multiview',
       'bpy.types.SCREEN_OT_screenshot.show_multiview',
       'bpy.types.SCREEN_OT_screenshot_area.show_multiview',
       'bpy.types.SEQUENCER_OT_image_strip_add.show_multiview',
       'bpy.types.SEQUENCER_OT_movie_strip_add.show_multiview',
       'bpy.types.SOUND_OT_open.show_multiview',
       'bpy.types.SOUND_OT_open_mono.show_multiview',
       'bpy.types.VIEW3D_OT_background_image_add.show_multiview'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Tracks"),
     (('bpy.types.CLIP_OT_paste_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste tracks from the internal clipboard"),
     (('bpy.types.CLIP_OT_paste_tracks',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Prefetch Frames"),
     (('bpy.types.CLIP_OT_prefetch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prefetch frames from disk for faster playback/tracking"),
     (('bpy.types.CLIP_OT_prefetch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rebuild Proxy and Timecode Indices"),
     (('bpy.types.CLIP_OT_rebuild_proxy',
       'bpy.types.SEQUENCER_OT_rebuild_proxy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuild all selected proxies and timecode indices in the background"),
     (('bpy.types.CLIP_OT_rebuild_proxy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refine Markers"),
     (('bpy.types.CLIP_OT_refine_markers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refine selected markers positions by running the tracker from track's reference to current frame"),
     (('bpy.types.CLIP_OT_refine_markers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Clip"),
     (('bpy.types.CLIP_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload clip"),
     (('bpy.types.CLIP_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select markers using box selection"),
     (('bpy.types.CLIP_OT_select_box',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select markers using circle selection"),
     (('bpy.types.CLIP_OT_select_circle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all tracks from specified group"),
     (('bpy.types.CLIP_OT_select_grouped',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keyframed Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'KEYFRAMED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all keyframed tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'KEYFRAMED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Estimated Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'ESTIMATED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all estimated tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'ESTIMATED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tracked Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'TRACKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all tracked tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'TRACKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Locked Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'LOCKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all locked tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'LOCKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disabled Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'DISABLED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all disabled tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'DISABLED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tracks with Same Color"),
     (("bpy.types.CLIP_OT_select_grouped.group:'COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all tracks with same color as active track"),
     (("bpy.types.CLIP_OT_select_grouped.group:'COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Failed Tracks"),
     (("bpy.types.CLIP_OT_select_grouped.group:'FAILED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all tracks which failed to be reconstructed"),
     (("bpy.types.CLIP_OT_select_grouped.group:'FAILED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Clip"),
     (('bpy.types.CLIP_OT_set_active_clip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Axis"),
     (('bpy.types.CLIP_OT_set_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the direction of a scene axis by rotating the camera (or its parent if present). This assumes that the selected track lies on a real axis connecting it to the origin"),
     (('bpy.types.CLIP_OT_set_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis to use to align bundle along"),
     (('bpy.types.CLIP_OT_set_axis.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align bundle align X axis"),
     (("bpy.types.CLIP_OT_set_axis.axis:'X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align bundle align Y axis"),
     (("bpy.types.CLIP_OT_set_axis.axis:'Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Origin"),
     (('bpy.types.CLIP_OT_set_origin',
       'bpy.types.OBJECT_OT_origin_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set active marker as origin by moving camera (or its parent if present) in 3D space"),
     (('bpy.types.CLIP_OT_set_origin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Median"),
     (('bpy.types.CLIP_OT_set_origin.use_median',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set origin to median point of selected bundles"),
     (('bpy.types.CLIP_OT_set_origin.use_median',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Plane"),
     (('bpy.types.CLIP_OT_set_plane',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set plane based on 3 selected bundles by moving camera (or its parent if present) in 3D space"),
     (('bpy.types.CLIP_OT_set_plane',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Plane to be used for orientation"),
     (('bpy.types.CLIP_OT_set_plane.plane',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set floor plane"),
     (("bpy.types.CLIP_OT_set_plane.plane:'FLOOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Wall"),
     (("bpy.types.CLIP_OT_set_plane.plane:'WALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set wall plane"),
     (("bpy.types.CLIP_OT_set_plane.plane:'WALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Scale"),
     (('bpy.types.CLIP_OT_set_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set scale of scene by scaling camera (or its parent if present)"),
     (('bpy.types.CLIP_OT_set_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Scene Frames"),
     (('bpy.types.CLIP_OT_set_scene_frames',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set scene's start and end frame to match clip's start frame and length"),
     (('bpy.types.CLIP_OT_set_scene_frames',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Solution Scale"),
     (('bpy.types.CLIP_OT_set_solution_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set object solution scale using distance between two selected tracks"),
     (('bpy.types.CLIP_OT_set_solution_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Solver Keyframe"),
     (('bpy.types.CLIP_OT_set_solver_keyframe',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set keyframe used by solver"),
     (('bpy.types.CLIP_OT_set_solver_keyframe',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keyframe to set"),
     (('bpy.types.CLIP_OT_set_solver_keyframe.keyframe',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set as Background"),
     (('bpy.types.CLIP_OT_set_viewport_background',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set current movie clip as a camera background in 3D Viewport (works only when a 3D Viewport is visible)"),
     (('bpy.types.CLIP_OT_set_viewport_background',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Setup Tracking Scene"),
     (('bpy.types.CLIP_OT_setup_tracking_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prepare scene for compositing 3D objects into this footage"),
     (('bpy.types.CLIP_OT_setup_tracking_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Slide Marker"),
     (('bpy.types.CLIP_OT_slide_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide marker areas"),
     (('bpy.types.CLIP_OT_slide_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset in floating-point units, 1.0 is the width and height of the image"),
     (('bpy.types.CLIP_OT_slide_marker.offset',
       'bpy.types.CLIP_OT_view_pan.offset',
       'bpy.types.IMAGE_OT_view_pan.offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Slide Plane Marker"),
     (('bpy.types.CLIP_OT_slide_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide plane marker areas"),
     (('bpy.types.CLIP_OT_slide_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Solve Camera"),
     (('bpy.types.CLIP_OT_solve_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Solve camera motion from tracks"),
     (('bpy.types.CLIP_OT_solve_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Stabilization Tracks"),
     (('bpy.types.CLIP_OT_stabilize_2d_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected tracks to 2D translation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Stabilization Track"),
     (('bpy.types.CLIP_OT_stabilize_2d_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected track from translation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Stabilization Rotation Tracks"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected tracks to 2D rotation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Stabilization Rotation Track"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected track from rotation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Stabilization Rotation Tracks"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select tracks which are used for rotation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_rotation_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Stabilization Tracks"),
     (('bpy.types.CLIP_OT_stabilize_2d_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select tracks which are used for translation stabilization"),
     (('bpy.types.CLIP_OT_stabilize_2d_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Track Color Preset"),
     (('bpy.types.CLIP_OT_track_color_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Clip Track Color Preset"),
     (('bpy.types.CLIP_OT_track_color_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Color"),
     (('bpy.types.CLIP_OT_track_copy_color',
       'bpy.types.NODE_OT_node_copy_color'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy color to all selected tracks"),
     (('bpy.types.CLIP_OT_track_copy_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Track Settings as Default"),
     (('bpy.types.CLIP_OT_track_settings_as_default',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy tracking settings from active track to default settings"),
     (('bpy.types.CLIP_OT_track_settings_as_default',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Track Settings"),
     (('bpy.types.CLIP_OT_track_settings_to_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy tracking settings from active track to selected tracks"),
     (('bpy.types.CLIP_OT_track_settings_to_track',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Empty to Track"),
     (('bpy.types.CLIP_OT_track_to_empty',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an Empty object which will be copying movement of active track"),
     (('bpy.types.CLIP_OT_track_to_empty',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Tracking Object"),
     (('bpy.types.CLIP_OT_tracking_object_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new object for tracking"),
     (('bpy.types.CLIP_OT_tracking_object_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Tracking Object"),
     (('bpy.types.CLIP_OT_tracking_object_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove object for tracking"),
     (('bpy.types.CLIP_OT_tracking_object_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Tracking Settings Preset"),
     (('bpy.types.CLIP_OT_tracking_settings_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a motion tracking settings preset"),
     (('bpy.types.CLIP_OT_tracking_settings_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Image from Plane Marker"),
     (('bpy.types.CLIP_OT_update_image_from_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update current image used by plane marker from the content of the plane marker"),
     (('bpy.types.CLIP_OT_update_image_from_plane_marker',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Center View to Cursor"),
     (('bpy.types.CLIP_OT_view_center_cursor',
       'bpy.types.IMAGE_OT_view_center_cursor',
       'bpy.types.VIEW3D_OT_view_center_cursor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Center the view so that the cursor is in the middle of the view"),
     (('bpy.types.CLIP_OT_view_center_cursor',
       'bpy.types.IMAGE_OT_view_center_cursor',
       'bpy.types.VIEW3D_OT_view_center_cursor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "NDOF Pan/Zoom"),
     (('bpy.types.CLIP_OT_view_ndof',
       'bpy.types.IMAGE_OT_view_ndof',
       'bpy.types.VIEW2D_OT_ndof'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use a 3D mouse device to pan/zoom the view"),
     (('bpy.types.CLIP_OT_view_ndof',
       'bpy.types.IMAGE_OT_view_ndof',
       'bpy.types.VIEW2D_OT_ndof'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pan View"),
     (('bpy.types.CLIP_OT_view_pan',
       'bpy.types.IMAGE_OT_view_pan',
       'bpy.types.VIEW2D_OT_pan',
       'bpy.types.VIEW3D_OT_move'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pan the view"),
     (('bpy.types.CLIP_OT_view_pan',
       'bpy.types.IMAGE_OT_view_pan',
       'bpy.types.VIEW2D_OT_pan'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View all selected elements"),
     (('bpy.types.CLIP_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Zoom"),
     (('bpy.types.CLIP_OT_view_zoom',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in/out the view"),
     (('bpy.types.CLIP_OT_view_zoom',
       'bpy.types.VIEW2D_OT_zoom'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom factor, values higher than 1.0 zoom in, lower values zoom out"),
     (('bpy.types.CLIP_OT_view_zoom.factor',
       'bpy.types.IMAGE_OT_view_zoom.factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Zoom In"),
     (('bpy.types.CLIP_OT_view_zoom_in',
       'bpy.types.IMAGE_OT_view_zoom_in',
       'bpy.types.VIEW2D_OT_zoom_in'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in the view"),
     (('bpy.types.CLIP_OT_view_zoom_in',
       'bpy.types.VIEW2D_OT_zoom_in'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor location in screen coordinates"),
     (('bpy.types.CLIP_OT_view_zoom_in.location',
       'bpy.types.IMAGE_OT_view_zoom_in.location',
       'bpy.types.IMAGE_OT_view_zoom_out.location'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Zoom Out"),
     (('bpy.types.CLIP_OT_view_zoom_out',
       'bpy.types.IMAGE_OT_view_zoom_out',
       'bpy.types.VIEW2D_OT_zoom_out'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom out the view"),
     (('bpy.types.CLIP_OT_view_zoom_out',
       'bpy.types.VIEW2D_OT_zoom_out'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor location in normalized (0.0 to 1.0) coordinates"),
     (('bpy.types.CLIP_OT_view_zoom_out.location',
       'bpy.types.UV_OT_cursor_set.location'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Cloth Preset"),
     (('bpy.types.CLOTH_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Cloth Preset"),
     (('bpy.types.CLOTH_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create New Collection"),
     (('bpy.types.COLLECTION_OT_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an object collection from selected objects"),
     (('bpy.types.COLLECTION_OT_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the new collection"),
     (('bpy.types.COLLECTION_OT_create.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Selected to Active Collection"),
     (('bpy.types.COLLECTION_OT_objects_add_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add the object to an object collection that contains the active object"),
     (('bpy.types.COLLECTION_OT_objects_add_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The collection to add other selected objects to"),
     (('bpy.types.COLLECTION_OT_objects_add_active.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove from Collection"),
     (('bpy.types.COLLECTION_OT_objects_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected objects from a collection"),
     (('bpy.types.COLLECTION_OT_objects_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The collection to remove this object from"),
     (('bpy.types.COLLECTION_OT_objects_remove.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Selected from Active Collection"),
     (('bpy.types.COLLECTION_OT_objects_remove_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the object from an object collection that contains the active object"),
     (('bpy.types.COLLECTION_OT_objects_remove_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The collection to remove other selected objects from"),
     (('bpy.types.COLLECTION_OT_objects_remove_active.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove from All Collections"),
     (('bpy.types.COLLECTION_OT_objects_remove_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected objects from all collections"),
     (('bpy.types.COLLECTION_OT_objects_remove_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Console Autocomplete"),
     (('bpy.types.CONSOLE_OT_autocomplete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Evaluate the namespace up until the cursor and give a list of options or complete the name if there is only one"),
     (('bpy.types.CONSOLE_OT_autocomplete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Console Banner"),
     (('bpy.types.CONSOLE_OT_banner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Print a message when the terminal initializes"),
     (('bpy.types.CONSOLE_OT_banner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear All"),
     (('bpy.types.CONSOLE_OT_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear text by type"),
     (('bpy.types.CONSOLE_OT_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the command history"),
     (('bpy.types.CONSOLE_OT_clear.history',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the scrollback history"),
     (('bpy.types.CONSOLE_OT_clear.scrollback',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Line"),
     (('bpy.types.CONSOLE_OT_clear_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the line and store in history"),
     (('bpy.types.CONSOLE_OT_clear_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy to Clipboard (as Script)"),
     (('bpy.types.CONSOLE_OT_copy_as_script',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the console contents for use in a script"),
     (('bpy.types.CONSOLE_OT_copy_as_script',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "History Append"),
     (('bpy.types.CONSOLE_OT_history_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append history at cursor position"),
     (('bpy.types.CONSOLE_OT_history_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The index of the cursor"),
     (('bpy.types.CONSOLE_OT_history_append.current_character',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Duplicates"),
     (('bpy.types.CONSOLE_OT_history_append.remove_duplicates',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove duplicate items in the history"),
     (('bpy.types.CONSOLE_OT_history_append.remove_duplicates',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Indent"),
     (('bpy.types.CONSOLE_OT_indent',
       'bpy.types.TEXT_OT_indent'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add 4 spaces at line beginning"),
     (('bpy.types.CONSOLE_OT_indent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Indent or Autocomplete"),
     (('bpy.types.CONSOLE_OT_indent_or_autocomplete',
       'bpy.types.TEXT_OT_indent_or_autocomplete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Indent selected text or autocomplete"),
     (('bpy.types.CONSOLE_OT_indent_or_autocomplete',
       'bpy.types.TEXT_OT_indent_or_autocomplete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Console Language"),
     (('bpy.types.CONSOLE_OT_language',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the current language for this console"),
     (('bpy.types.CONSOLE_OT_language',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste from Clipboard"),
     (('bpy.types.CONSOLE_OT_paste',
       'bpy.types.NODE_OT_clipboard_paste'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste text from clipboard"),
     (('bpy.types.CONSOLE_OT_paste',
       'bpy.types.FONT_OT_text_paste',
       'bpy.types.TEXT_OT_paste'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste text selected elsewhere rather than copied (X11/Wayland only)"),
     (('bpy.types.CONSOLE_OT_paste.selection',
       'bpy.types.FONT_OT_text_paste.selection',
       'bpy.types.TEXT_OT_paste.selection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scrollback Append"),
     (('bpy.types.CONSOLE_OT_scrollback_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append scrollback text by type"),
     (('bpy.types.CONSOLE_OT_scrollback_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Console output type"),
     (('bpy.types.CONSOLE_OT_scrollback_append.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Information"),
     (("bpy.types.CONSOLE_OT_scrollback_append.type:'INFO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all the text"),
     (('bpy.types.CONSOLE_OT_select_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Selection"),
     (('bpy.types.CONSOLE_OT_select_set',
       'bpy.types.FONT_OT_selection_set',
       'bpy.types.TEXT_OT_selection_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the console selection"),
     (('bpy.types.CONSOLE_OT_select_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Word"),
     (('bpy.types.CONSOLE_OT_select_word',
       'bpy.types.FONT_OT_select_word',
       'bpy.types.TEXT_OT_select_word'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select word at cursor position"),
     (('bpy.types.CONSOLE_OT_select_word',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unindent"),
     (('bpy.types.CONSOLE_OT_unindent',
       'bpy.types.TEXT_OT_unindent'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete 4 spaces from line beginning"),
     (('bpy.types.CONSOLE_OT_unindent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Target"),
     (('bpy.types.CONSTRAINT_OT_add_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a target to the constraint"),
     (('bpy.types.CONSTRAINT_OT_add_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Inverse"),
     (('bpy.types.CONSTRAINT_OT_childof_clear_inverse',
       'bpy.types.CONSTRAINT_OT_objectsolver_clear_inverse'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear inverse correction for Child Of constraint"),
     (('bpy.types.CONSTRAINT_OT_childof_clear_inverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Inverse"),
     (('bpy.types.CONSTRAINT_OT_childof_set_inverse',
       'bpy.types.CONSTRAINT_OT_objectsolver_set_inverse'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set inverse correction for Child Of constraint"),
     (('bpy.types.CONSTRAINT_OT_childof_set_inverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Constraint"),
     (('bpy.types.CONSTRAINT_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate constraint at the same position in the stack"),
     (('bpy.types.CONSTRAINT_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Constraint To Selected"),
     (('bpy.types.CONSTRAINT_OT_copy_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy constraint to other selected objects/bones"),
     (('bpy.types.CONSTRAINT_OT_copy_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable and Keep Transform"),
     (('bpy.types.CONSTRAINT_OT_disable_keep_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the influence of this constraint to zero while trying to maintain the object's transformation. Other active constraints can still influence the final transformation"),
     (('bpy.types.CONSTRAINT_OT_disable_keep_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Auto Animate Path"),
     (('bpy.types.CONSTRAINT_OT_followpath_path_animate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add default animation for path used by constraint if it isn't animated already"),
     (('bpy.types.CONSTRAINT_OT_followpath_path_animate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "First frame of path animation"),
     (('bpy.types.CONSTRAINT_OT_followpath_path_animate.frame_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of frames that path animation should take"),
     (('bpy.types.CONSTRAINT_OT_followpath_path_animate.length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Distance"),
     (('bpy.types.CONSTRAINT_OT_limitdistance_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset limiting distance for Limit Distance Constraint"),
     (('bpy.types.CONSTRAINT_OT_limitdistance_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Constraint Down"),
     (('bpy.types.CONSTRAINT_OT_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move constraint down in constraint stack"),
     (('bpy.types.CONSTRAINT_OT_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Constraint to Index"),
     (('bpy.types.CONSTRAINT_OT_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the constraint's position in the list so it evaluates after the set number of others"),
     (('bpy.types.CONSTRAINT_OT_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The index to move the constraint to"),
     (('bpy.types.CONSTRAINT_OT_move_to_index.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Constraint Up"),
     (('bpy.types.CONSTRAINT_OT_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move constraint up in constraint stack"),
     (('bpy.types.CONSTRAINT_OT_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize Weights"),
     (('bpy.types.CONSTRAINT_OT_normalize_target_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize weights of all target bones"),
     (('bpy.types.CONSTRAINT_OT_normalize_target_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear inverse correction for Object Solver constraint"),
     (('bpy.types.CONSTRAINT_OT_objectsolver_clear_inverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set inverse correction for Object Solver constraint"),
     (('bpy.types.CONSTRAINT_OT_objectsolver_set_inverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Target"),
     (('bpy.types.CONSTRAINT_OT_remove_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the target from the constraint"),
     (('bpy.types.CONSTRAINT_OT_remove_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Original Length"),
     (('bpy.types.CONSTRAINT_OT_stretchto_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset original length of bone for Stretch To Constraint"),
     (('bpy.types.CONSTRAINT_OT_stretchto_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Particle System to Curves"),
     (('bpy.types.CURVES_OT_convert_from_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new curves object based on the current state of the particle system"),
     (('bpy.types.CURVES_OT_convert_from_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Curves to Particle System"),
     (('bpy.types.CURVES_OT_convert_to_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new or update an existing hair particle system on the surface object"),
     (('bpy.types.CURVES_OT_convert_to_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected control points or curves"),
     (('bpy.types.CURVES_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Curve Sculpt Mode Toggle"),
     (('bpy.types.CURVES_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit sculpt mode for curves"),
     (('bpy.types.CURVES_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Ends"),
     (('bpy.types.CURVES_OT_select_ends',
       'bpy.types.GREASE_PENCIL_OT_select_ends'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select end points of curves"),
     (('bpy.types.CURVES_OT_select_ends',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount Back"),
     (('bpy.types.CURVES_OT_select_ends.amount_end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of points to select from the back"),
     (('bpy.types.CURVES_OT_select_ends.amount_end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount Front"),
     (('bpy.types.CURVES_OT_select_ends.amount_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of points to select from the front"),
     (('bpy.types.CURVES_OT_select_ends.amount_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shrink the selection by one point"),
     (('bpy.types.CURVES_OT_select_less',
       'bpy.types.GREASE_PENCIL_OT_select_less'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all points in curves with any point selection"),
     (('bpy.types.CURVES_OT_select_linked',
       'bpy.types.GREASE_PENCIL_OT_select_linked'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grow the selection by one point"),
     (('bpy.types.CURVES_OT_select_more',
       'bpy.types.GREASE_PENCIL_OT_select_more'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Random"),
     (('bpy.types.CURVES_OT_select_random',
       'bpy.types.CURVE_OT_select_random',
       'bpy.types.GREASE_PENCIL_OT_select_random',
       'bpy.types.LATTICE_OT_select_random',
       'bpy.types.MBALL_OT_select_random_metaelems',
       'bpy.types.MESH_OT_select_random',
       'bpy.types.OBJECT_OT_select_random',
       'bpy.types.PARTICLE_OT_select_random',
       'bpy.types.SCULPT_CURVES_OT_select_random'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomizes existing selection or create new random selection"),
     (('bpy.types.CURVES_OT_select_random',
       'bpy.types.SCULPT_CURVES_OT_select_random'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Probability"),
     (('bpy.types.CURVES_OT_select_random.probability',
       'bpy.types.SCULPT_CURVES_OT_select_random.probability'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Chance of every point or curve being included in the selection"),
     (('bpy.types.CURVES_OT_select_random.probability',
       'bpy.types.SCULPT_CURVES_OT_select_random.probability'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Source of randomness"),
     (('bpy.types.CURVES_OT_select_random.seed',
       'bpy.types.SCULPT_CURVES_OT_select_random.seed'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Curves to Surface"),
     (('bpy.types.CURVES_OT_snap_curves_to_surface',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move curves so that the first point is exactly on the surface mesh"),
     (('bpy.types.CURVES_OT_snap_curves_to_surface',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attach Mode"),
     (('bpy.types.CURVES_OT_snap_curves_to_surface.attach_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to find the point on the surface to attach to"),
     (('bpy.types.CURVES_OT_snap_curves_to_surface.attach_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find the closest point on the surface for the root point of every curve and move the root there"),
     (("bpy.types.CURVES_OT_snap_curves_to_surface.attach_mode:'NEAREST'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Re-attach curves to a deformed surface using the existing attachment information. This only works when the topology of the surface mesh has not changed"),
     (("bpy.types.CURVES_OT_snap_curves_to_surface.attach_mode:'DEFORM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Curves Surface Object"),
     (('bpy.types.CURVES_OT_surface_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the active object as surface for selected curves objects and set it as the parent"),
     (('bpy.types.CURVES_OT_surface_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Cyclic"),
     (('bpy.types.CURVE_OT_cyclic_toggle',
       'bpy.types.MASK_OT_cyclic_toggle'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make active spline closed/opened loop"),
     (('bpy.types.CURVE_OT_cyclic_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to make surface cyclic in"),
     (('bpy.types.CURVE_OT_cyclic_toggle.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "(De)select First"),
     (('bpy.types.CURVE_OT_de_select_first',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(De)select first of visible part of each NURBS"),
     (('bpy.types.CURVE_OT_de_select_first',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "(De)select Last"),
     (('bpy.types.CURVE_OT_de_select_last',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(De)select last of visible part of each NURBS"),
     (('bpy.types.CURVE_OT_de_select_last',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Decimate Curve"),
     (('bpy.types.CURVE_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify selected curves"),
     (('bpy.types.CURVE_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected control points or segments"),
     (('bpy.types.CURVE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which elements to delete"),
     (('bpy.types.CURVE_OT_delete.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve Vertices"),
     (('bpy.types.CURVE_OT_dissolve_verts',
       'bpy.types.MESH_OT_dissolve_verts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected control points, correcting surrounding handles"),
     (('bpy.types.CURVE_OT_dissolve_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Curve"),
     (('bpy.types.CURVE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected control points"),
     (('bpy.types.CURVE_OT_duplicate',
       'bpy.types.CURVE_OT_duplicate_move.CURVE_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate curve and move"),
     (('bpy.types.CURVE_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Handle Type"),
     (('bpy.types.CURVE_OT_handle_type_set',
       'bpy.types.MASK_OT_handle_type_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set type of handles for selected control points"),
     (('bpy.types.CURVE_OT_handle_type_set',
       'bpy.types.MASK_OT_handle_type_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Spline type"),
     (('bpy.types.CURVE_OT_handle_type_set.type',
       'bpy.types.CURVE_OT_spline_type_set.type',
       'bpy.types.GPENCIL_OT_stroke_editcurve_set_handle_type.type',
       'bpy.types.MASK_OT_handle_type_set.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Free/Align"),
     (("bpy.types.CURVE_OT_handle_type_set.type:'TOGGLE_FREE_ALIGN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Segment"),
     (('bpy.types.CURVE_OT_make_segment',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join two curves by their selected ends"),
     (('bpy.types.CURVE_OT_make_segment',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Match Texture Space"),
     (('bpy.types.CURVE_OT_match_texture_space',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match texture space to object's bounding box"),
     (('bpy.types.CURVE_OT_match_texture_space',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recalculate Handles"),
     (('bpy.types.CURVE_OT_normals_make_consistent',
       'bpy.types.MASK_OT_normals_make_consistent'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate the direction of selected handles"),
     (('bpy.types.CURVE_OT_normals_make_consistent',
       'bpy.types.MASK_OT_normals_make_consistent'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate handle length"),
     (('bpy.types.CURVE_OT_normals_make_consistent.calc_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Bezier Circle"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Bezier Circle"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The alignment of the new object"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add.align',
       'bpy.types.CURVE_OT_primitive_bezier_curve_add.align',
       'bpy.types.CURVE_OT_primitive_nurbs_circle_add.align',
       'bpy.types.CURVE_OT_primitive_nurbs_curve_add.align',
       'bpy.types.CURVE_OT_primitive_nurbs_path_add.align',
       'bpy.types.MESH_OT_primitive_circle_add.align',
       'bpy.types.MESH_OT_primitive_cone_add.align',
       'bpy.types.MESH_OT_primitive_cube_add.align',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.align',
       'bpy.types.MESH_OT_primitive_cylinder_add.align',
       'bpy.types.MESH_OT_primitive_grid_add.align',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.align',
       'bpy.types.MESH_OT_primitive_monkey_add.align',
       'bpy.types.MESH_OT_primitive_plane_add.align',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.align',
       'bpy.types.OBJECT_OT_add.align',
       'bpy.types.OBJECT_OT_armature_add.align',
       'bpy.types.OBJECT_OT_camera_add.align',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.align',
       'bpy.types.OBJECT_OT_collection_instance_add.align',
       'bpy.types.OBJECT_OT_curves_empty_hair_add.align',
       'bpy.types.OBJECT_OT_curves_random_add.align',
       'bpy.types.OBJECT_OT_data_instance_add.align',
       'bpy.types.OBJECT_OT_drop_named_image.align',
       'bpy.types.OBJECT_OT_effector_add.align',
       'bpy.types.OBJECT_OT_empty_add.align',
       'bpy.types.OBJECT_OT_gpencil_add.align',
       'bpy.types.OBJECT_OT_grease_pencil_add.align',
       'bpy.types.OBJECT_OT_light_add.align',
       'bpy.types.OBJECT_OT_lightprobe_add.align',
       'bpy.types.OBJECT_OT_metaball_add.align',
       'bpy.types.OBJECT_OT_pointcloud_add.align',
       'bpy.types.OBJECT_OT_speaker_add.align',
       'bpy.types.OBJECT_OT_text_add.align',
       'bpy.types.OBJECT_OT_volume_add.align',
       'bpy.types.OBJECT_OT_volume_import.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.align',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.align'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align the new object to the world"),
     (("bpy.types.CURVE_OT_primitive_bezier_circle_add.align:'WORLD'",
       "bpy.types.CURVE_OT_primitive_bezier_curve_add.align:'WORLD'",
       "bpy.types.CURVE_OT_primitive_nurbs_circle_add.align:'WORLD'",
       "bpy.types.CURVE_OT_primitive_nurbs_curve_add.align:'WORLD'",
       "bpy.types.CURVE_OT_primitive_nurbs_path_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_circle_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_cone_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_cube_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_cube_add_gizmo.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_cylinder_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_grid_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_ico_sphere_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_monkey_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_plane_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_torus_add.align:'WORLD'",
       "bpy.types.MESH_OT_primitive_uv_sphere_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_armature_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_camera_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_collection_external_asset_drop.align:'WORLD'",
       "bpy.types.OBJECT_OT_collection_instance_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_curves_empty_hair_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_curves_random_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_data_instance_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_drop_named_image.align:'WORLD'",
       "bpy.types.OBJECT_OT_effector_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_empty_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_gpencil_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_grease_pencil_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_light_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_lightprobe_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_metaball_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_pointcloud_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_speaker_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_text_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_volume_add.align:'WORLD'",
       "bpy.types.OBJECT_OT_volume_import.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.align:'WORLD'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.align:'WORLD'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align the new object to the view"),
     (("bpy.types.CURVE_OT_primitive_bezier_circle_add.align:'VIEW'",
       "bpy.types.CURVE_OT_primitive_bezier_curve_add.align:'VIEW'",
       "bpy.types.CURVE_OT_primitive_nurbs_circle_add.align:'VIEW'",
       "bpy.types.CURVE_OT_primitive_nurbs_curve_add.align:'VIEW'",
       "bpy.types.CURVE_OT_primitive_nurbs_path_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_circle_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_cone_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_cube_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_cube_add_gizmo.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_cylinder_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_grid_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_ico_sphere_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_monkey_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_plane_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_torus_add.align:'VIEW'",
       "bpy.types.MESH_OT_primitive_uv_sphere_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_armature_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_camera_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_collection_external_asset_drop.align:'VIEW'",
       "bpy.types.OBJECT_OT_collection_instance_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_curves_empty_hair_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_curves_random_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_data_instance_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_drop_named_image.align:'VIEW'",
       "bpy.types.OBJECT_OT_effector_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_empty_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_gpencil_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_grease_pencil_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_light_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_lightprobe_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_metaball_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_pointcloud_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_speaker_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_text_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_volume_add.align:'VIEW'",
       "bpy.types.OBJECT_OT_volume_import.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.align:'VIEW'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.align:'VIEW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the 3D cursor orientation for the new object"),
     (("bpy.types.CURVE_OT_primitive_bezier_circle_add.align:'CURSOR'",
       "bpy.types.CURVE_OT_primitive_bezier_curve_add.align:'CURSOR'",
       "bpy.types.CURVE_OT_primitive_nurbs_circle_add.align:'CURSOR'",
       "bpy.types.CURVE_OT_primitive_nurbs_curve_add.align:'CURSOR'",
       "bpy.types.CURVE_OT_primitive_nurbs_path_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_circle_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_cone_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_cube_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_cube_add_gizmo.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_cylinder_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_grid_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_ico_sphere_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_monkey_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_plane_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_torus_add.align:'CURSOR'",
       "bpy.types.MESH_OT_primitive_uv_sphere_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_armature_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_camera_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_collection_external_asset_drop.align:'CURSOR'",
       "bpy.types.OBJECT_OT_collection_instance_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_curves_empty_hair_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_curves_random_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_data_instance_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_drop_named_image.align:'CURSOR'",
       "bpy.types.OBJECT_OT_effector_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_empty_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_gpencil_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_grease_pencil_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_light_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_lightprobe_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_metaball_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_pointcloud_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_speaker_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_text_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_volume_add.align:'CURSOR'",
       "bpy.types.OBJECT_OT_volume_import.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.align:'CURSOR'",
       "bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.align:'CURSOR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter edit mode when adding this object"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add.enter_editmode',
       'bpy.types.CURVE_OT_primitive_bezier_curve_add.enter_editmode',
       'bpy.types.CURVE_OT_primitive_nurbs_circle_add.enter_editmode',
       'bpy.types.CURVE_OT_primitive_nurbs_curve_add.enter_editmode',
       'bpy.types.CURVE_OT_primitive_nurbs_path_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_circle_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_cone_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_cube_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.enter_editmode',
       'bpy.types.MESH_OT_primitive_cylinder_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_grid_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_monkey_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_plane_add.enter_editmode',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.enter_editmode',
       'bpy.types.OBJECT_OT_add.enter_editmode',
       'bpy.types.OBJECT_OT_armature_add.enter_editmode',
       'bpy.types.OBJECT_OT_camera_add.enter_editmode',
       'bpy.types.OBJECT_OT_effector_add.enter_editmode',
       'bpy.types.OBJECT_OT_lightprobe_add.enter_editmode',
       'bpy.types.OBJECT_OT_metaball_add.enter_editmode',
       'bpy.types.OBJECT_OT_speaker_add.enter_editmode',
       'bpy.types.OBJECT_OT_text_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.enter_editmode',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.enter_editmode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Location for the newly added object"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add.location',
       'bpy.types.CURVE_OT_primitive_bezier_curve_add.location',
       'bpy.types.CURVE_OT_primitive_nurbs_circle_add.location',
       'bpy.types.CURVE_OT_primitive_nurbs_curve_add.location',
       'bpy.types.CURVE_OT_primitive_nurbs_path_add.location',
       'bpy.types.MESH_OT_primitive_circle_add.location',
       'bpy.types.MESH_OT_primitive_cone_add.location',
       'bpy.types.MESH_OT_primitive_cube_add.location',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.location',
       'bpy.types.MESH_OT_primitive_cylinder_add.location',
       'bpy.types.MESH_OT_primitive_grid_add.location',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.location',
       'bpy.types.MESH_OT_primitive_monkey_add.location',
       'bpy.types.MESH_OT_primitive_plane_add.location',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.location',
       'bpy.types.OBJECT_OT_add.location',
       'bpy.types.OBJECT_OT_armature_add.location',
       'bpy.types.OBJECT_OT_camera_add.location',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.location',
       'bpy.types.OBJECT_OT_collection_instance_add.location',
       'bpy.types.OBJECT_OT_curves_empty_hair_add.location',
       'bpy.types.OBJECT_OT_curves_random_add.location',
       'bpy.types.OBJECT_OT_data_instance_add.location',
       'bpy.types.OBJECT_OT_drop_named_image.location',
       'bpy.types.OBJECT_OT_effector_add.location',
       'bpy.types.OBJECT_OT_empty_add.location',
       'bpy.types.OBJECT_OT_gpencil_add.location',
       'bpy.types.OBJECT_OT_grease_pencil_add.location',
       'bpy.types.OBJECT_OT_light_add.location',
       'bpy.types.OBJECT_OT_lightprobe_add.location',
       'bpy.types.OBJECT_OT_metaball_add.location',
       'bpy.types.OBJECT_OT_pointcloud_add.location',
       'bpy.types.OBJECT_OT_speaker_add.location',
       'bpy.types.OBJECT_OT_text_add.location',
       'bpy.types.OBJECT_OT_volume_add.location',
       'bpy.types.OBJECT_OT_volume_import.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.location',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.location'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotation for the newly added object"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add.rotation',
       'bpy.types.CURVE_OT_primitive_bezier_curve_add.rotation',
       'bpy.types.CURVE_OT_primitive_nurbs_circle_add.rotation',
       'bpy.types.CURVE_OT_primitive_nurbs_curve_add.rotation',
       'bpy.types.CURVE_OT_primitive_nurbs_path_add.rotation',
       'bpy.types.MESH_OT_primitive_circle_add.rotation',
       'bpy.types.MESH_OT_primitive_cone_add.rotation',
       'bpy.types.MESH_OT_primitive_cube_add.rotation',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.rotation',
       'bpy.types.MESH_OT_primitive_cylinder_add.rotation',
       'bpy.types.MESH_OT_primitive_grid_add.rotation',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.rotation',
       'bpy.types.MESH_OT_primitive_monkey_add.rotation',
       'bpy.types.MESH_OT_primitive_plane_add.rotation',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.rotation',
       'bpy.types.OBJECT_OT_add.rotation',
       'bpy.types.OBJECT_OT_armature_add.rotation',
       'bpy.types.OBJECT_OT_camera_add.rotation',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.rotation',
       'bpy.types.OBJECT_OT_collection_instance_add.rotation',
       'bpy.types.OBJECT_OT_curves_empty_hair_add.rotation',
       'bpy.types.OBJECT_OT_curves_random_add.rotation',
       'bpy.types.OBJECT_OT_data_instance_add.rotation',
       'bpy.types.OBJECT_OT_drop_named_image.rotation',
       'bpy.types.OBJECT_OT_effector_add.rotation',
       'bpy.types.OBJECT_OT_empty_add.rotation',
       'bpy.types.OBJECT_OT_gpencil_add.rotation',
       'bpy.types.OBJECT_OT_grease_pencil_add.rotation',
       'bpy.types.OBJECT_OT_light_add.rotation',
       'bpy.types.OBJECT_OT_lightprobe_add.rotation',
       'bpy.types.OBJECT_OT_metaball_add.rotation',
       'bpy.types.OBJECT_OT_pointcloud_add.rotation',
       'bpy.types.OBJECT_OT_speaker_add.rotation',
       'bpy.types.OBJECT_OT_text_add.rotation',
       'bpy.types.OBJECT_OT_volume_add.rotation',
       'bpy.types.OBJECT_OT_volume_import.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.rotation',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.rotation'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale for the newly added object"),
     (('bpy.types.CURVE_OT_primitive_bezier_circle_add.scale',
       'bpy.types.CURVE_OT_primitive_bezier_curve_add.scale',
       'bpy.types.CURVE_OT_primitive_nurbs_circle_add.scale',
       'bpy.types.CURVE_OT_primitive_nurbs_curve_add.scale',
       'bpy.types.CURVE_OT_primitive_nurbs_path_add.scale',
       'bpy.types.MESH_OT_primitive_circle_add.scale',
       'bpy.types.MESH_OT_primitive_cone_add.scale',
       'bpy.types.MESH_OT_primitive_cube_add.scale',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.scale',
       'bpy.types.MESH_OT_primitive_cylinder_add.scale',
       'bpy.types.MESH_OT_primitive_grid_add.scale',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.scale',
       'bpy.types.MESH_OT_primitive_monkey_add.scale',
       'bpy.types.MESH_OT_primitive_plane_add.scale',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.scale',
       'bpy.types.OBJECT_OT_add.scale',
       'bpy.types.OBJECT_OT_armature_add.scale',
       'bpy.types.OBJECT_OT_camera_add.scale',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.scale',
       'bpy.types.OBJECT_OT_collection_instance_add.scale',
       'bpy.types.OBJECT_OT_curves_empty_hair_add.scale',
       'bpy.types.OBJECT_OT_curves_random_add.scale',
       'bpy.types.OBJECT_OT_data_instance_add.scale',
       'bpy.types.OBJECT_OT_drop_named_image.scale',
       'bpy.types.OBJECT_OT_effector_add.scale',
       'bpy.types.OBJECT_OT_empty_add.scale',
       'bpy.types.OBJECT_OT_gpencil_add.scale',
       'bpy.types.OBJECT_OT_grease_pencil_add.scale',
       'bpy.types.OBJECT_OT_light_add.scale',
       'bpy.types.OBJECT_OT_lightprobe_add.scale',
       'bpy.types.OBJECT_OT_metaball_add.scale',
       'bpy.types.OBJECT_OT_pointcloud_add.scale',
       'bpy.types.OBJECT_OT_speaker_add.scale',
       'bpy.types.OBJECT_OT_text_add.scale',
       'bpy.types.OBJECT_OT_volume_add.scale',
       'bpy.types.OBJECT_OT_volume_import.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add.scale',
       'bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add.scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Bezier"),
     (('bpy.types.CURVE_OT_primitive_bezier_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Bezier Curve"),
     (('bpy.types.CURVE_OT_primitive_bezier_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Nurbs Circle"),
     (('bpy.types.CURVE_OT_primitive_nurbs_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs Circle"),
     (('bpy.types.CURVE_OT_primitive_nurbs_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Nurbs Curve"),
     (('bpy.types.CURVE_OT_primitive_nurbs_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs Curve"),
     (('bpy.types.CURVE_OT_primitive_nurbs_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Path"),
     (('bpy.types.CURVE_OT_primitive_nurbs_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Path"),
     (('bpy.types.CURVE_OT_primitive_nurbs_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Curve Radius"),
     (('bpy.types.CURVE_OT_radius_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set per-point radius which is used for bevel tapering"),
     (('bpy.types.CURVE_OT_radius_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal hidden control points"),
     (('bpy.types.CURVE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect control points at the boundary of each selection region"),
     (('bpy.types.CURVE_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all control points linked to the current selection"),
     (('bpy.types.CURVE_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select control points at the boundary of each selection region"),
     (('bpy.types.CURVE_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Next"),
     (('bpy.types.CURVE_OT_select_next',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select control points following already selected ones along the curves"),
     (('bpy.types.CURVE_OT_select_next',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Checker Deselect"),
     (('bpy.types.CURVE_OT_select_nth',
       'bpy.types.MESH_OT_select_nth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect every Nth point starting from the active one"),
     (('bpy.types.CURVE_OT_select_nth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Previous"),
     (('bpy.types.CURVE_OT_select_previous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select control points preceding already selected ones along the curves"),
     (('bpy.types.CURVE_OT_select_previous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomly select some control points"),
     (('bpy.types.CURVE_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Portion of items to select randomly"),
     (('bpy.types.CURVE_OT_select_random.ratio',
       'bpy.types.GPENCIL_OT_select_random.ratio',
       'bpy.types.GREASE_PENCIL_OT_select_random.ratio',
       'bpy.types.LATTICE_OT_select_random.ratio',
       'bpy.types.MBALL_OT_select_random_metaelems.ratio',
       'bpy.types.MESH_OT_select_random.ratio',
       'bpy.types.OBJECT_OT_select_random.ratio',
       'bpy.types.PARTICLE_OT_select_random.ratio'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Control Point Row"),
     (('bpy.types.CURVE_OT_select_row',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select a row of control points including active one"),
     (('bpy.types.CURVE_OT_select_row',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar curve points by property type"),
     (('bpy.types.CURVE_OT_select_similar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Greater"),
     (("bpy.types.CURVE_OT_select_similar.compare:'GREATER'",
       "bpy.types.MESH_OT_select_similar.compare:'GREATER'",
       "bpy.types.UV_OT_select_similar.compare:'GREATER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Less"),
     (("bpy.types.CURVE_OT_select_similar.compare:'LESS'",
       "bpy.types.MESH_OT_select_similar.compare:'LESS'",
       "bpy.types.UV_OT_select_similar.compare:'LESS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Separate"),
     (('bpy.types.CURVE_OT_separate',
       'bpy.types.MESH_OT_separate',
       'bpy.types.NODE_OT_group_separate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate selected points from connected unselected points into a new object"),
     (('bpy.types.CURVE_OT_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shade Flat"),
     (('bpy.types.CURVE_OT_shade_flat',
       'bpy.types.MESH_OT_faces_shade_flat',
       'bpy.types.OBJECT_OT_shade_flat'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set shading to flat"),
     (('bpy.types.CURVE_OT_shade_flat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shade Smooth"),
     (('bpy.types.CURVE_OT_shade_smooth',
       'bpy.types.MESH_OT_faces_shade_smooth',
       'bpy.types.OBJECT_OT_shade_smooth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set shading to smooth"),
     (('bpy.types.CURVE_OT_shade_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten angles of selected points"),
     (('bpy.types.CURVE_OT_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Curve Radius"),
     (('bpy.types.CURVE_OT_smooth_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolate radii of selected points"),
     (('bpy.types.CURVE_OT_smooth_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Curve Tilt"),
     (('bpy.types.CURVE_OT_smooth_tilt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolate tilt of selected points"),
     (('bpy.types.CURVE_OT_smooth_tilt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Curve Weight"),
     (('bpy.types.CURVE_OT_smooth_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolate weight of selected points"),
     (('bpy.types.CURVE_OT_smooth_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude selected boundary row around pivot point and current view axis"),
     (('bpy.types.CURVE_OT_spin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Spline Type"),
     (('bpy.types.CURVE_OT_spline_type_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set type of active spline"),
     (('bpy.types.CURVE_OT_spline_type_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Handles"),
     (('bpy.types.CURVE_OT_spline_type_set.use_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use handles when converting bezier curves into polygons"),
     (('bpy.types.CURVE_OT_spline_type_set.use_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Goal Weight"),
     (('bpy.types.CURVE_OT_spline_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set softbody goal weight for selected points"),
     (('bpy.types.CURVE_OT_spline_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split off selected points from connected unselected points"),
     (('bpy.types.CURVE_OT_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivide selected segments"),
     (('bpy.types.CURVE_OT_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch direction of selected splines"),
     (('bpy.types.CURVE_OT_switch_direction',
       'bpy.types.MASK_OT_switch_direction'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Tilt"),
     (('bpy.types.CURVE_OT_tilt_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the tilt of selected control points"),
     (('bpy.types.CURVE_OT_tilt_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new control point (linked to only selected end-curve one, if any)"),
     (('bpy.types.CURVE_OT_vertex_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Location to add new vertex at"),
     (('bpy.types.CURVE_OT_vertex_add.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Denoise Animation"),
     (('bpy.types.CYCLES_OT_denoise_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Denoise rendered animation sequence using current scene and view layer settings. Requires denoising data passes and output to OpenEXR multilayer files"),
     (('bpy.types.CYCLES_OT_denoise_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Input Filepath"),
     (('bpy.types.CYCLES_OT_denoise_animation.input_filepath',
       'bpy.types.CYCLES_OT_merge_images.input_filepath1',
       'bpy.types.CYCLES_OT_merge_images.input_filepath2'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File path for image to denoise. If not specified, uses the render file path and frame range from the scene"),
     (('bpy.types.CYCLES_OT_denoise_animation.input_filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output Filepath"),
     (('bpy.types.CYCLES_OT_denoise_animation.output_filepath',
       'bpy.types.CYCLES_OT_merge_images.output_filepath'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If not specified, renders will be denoised in-place"),
     (('bpy.types.CYCLES_OT_denoise_animation.output_filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge Images"),
     (('bpy.types.CYCLES_OT_merge_images',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Combine OpenEXR multi-layer images rendered with different sample ranges into one image with reduced noise"),
     (('bpy.types.CYCLES_OT_merge_images',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File path for image to merge"),
     (('bpy.types.CYCLES_OT_merge_images.input_filepath1',
       'bpy.types.CYCLES_OT_merge_images.input_filepath2'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File path for merged image"),
     (('bpy.types.CYCLES_OT_merge_images.output_filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Use Nodes"),
     (('bpy.types.CYCLES_OT_use_shading_nodes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable nodes on a material, world or light"),
     (('bpy.types.CYCLES_OT_use_shading_nodes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dynamic Paint Bake"),
     (('bpy.types.DPAINT_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake dynamic paint image sequence surface"),
     (('bpy.types.DPAINT_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Output Layer"),
     (('bpy.types.DPAINT_OT_output_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove Dynamic Paint output data layer"),
     (('bpy.types.DPAINT_OT_output_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output Toggle"),
     (('bpy.types.DPAINT_OT_output_toggle.output',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output A"),
     (("bpy.types.DPAINT_OT_output_toggle.output:'A'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output B"),
     (("bpy.types.DPAINT_OT_output_toggle.output:'B'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Slot"),
     (('bpy.types.DPAINT_OT_surface_slot_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new Dynamic Paint surface slot"),
     (('bpy.types.DPAINT_OT_surface_slot_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Surface Slot"),
     (('bpy.types.DPAINT_OT_surface_slot_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected surface slot"),
     (('bpy.types.DPAINT_OT_surface_slot_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Type Active"),
     (('bpy.types.DPAINT_OT_type_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle whether given type is active or not"),
     (('bpy.types.DPAINT_OT_type_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flush Edits"),
     (('bpy.types.ED_OT_flush_edits',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flush edit data from active editing modes"),
     (('bpy.types.ED_OT_flush_edits',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Fake User"),
     (('bpy.types.ED_OT_lib_id_fake_user_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Generate Preview"),
     (('bpy.types.ED_OT_lib_id_generate_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an automatic preview for the selected data-block"),
     (('bpy.types.ED_OT_lib_id_generate_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Generate Preview from Object"),
     (('bpy.types.ED_OT_lib_id_generate_preview_from_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a preview for this asset by rendering the active object"),
     (('bpy.types.ED_OT_lib_id_generate_preview_from_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Custom Preview"),
     (('bpy.types.ED_OT_lib_id_load_custom_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Choose an image to help identify the data-block visually"),
     (('bpy.types.ED_OT_lib_id_load_custom_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Library Override Editable"),
     (('bpy.types.ED_OT_lib_id_override_editable_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set if this library override data-block can be edited"),
     (('bpy.types.ED_OT_lib_id_override_editable_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlink Data-Block"),
     (('bpy.types.ED_OT_lib_id_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a usage of a data-block, clearing the assignment"),
     (('bpy.types.ED_OT_lib_id_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Undo History"),
     (('bpy.types.ED_OT_undo_history',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Redo specific action in history"),
     (('bpy.types.ED_OT_undo_history',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Undo Push"),
     (('bpy.types.ED_OT_undo_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an undo state (internal use only)"),
     (('bpy.types.ED_OT_undo_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo Message"),
     (('bpy.types.ED_OT_undo_push.message',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Undo and Redo"),
     (('bpy.types.ED_OT_undo_redo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo and redo previous action"),
     (('bpy.types.ED_OT_undo_redo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export BVH"),
     (('bpy.types.EXPORT_ANIM_OT_bvh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save a BVH motion capture file from an armature"),
     (('bpy.types.EXPORT_ANIM_OT_bvh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filepath used for exporting the file"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.filepath',
       'bpy.types.EXPORT_MESH_OT_stl.filepath',
       'bpy.types.EXPORT_SCENE_OT_fbx.filepath',
       'bpy.types.EXPORT_SCENE_OT_gltf.filepath',
       'bpy.types.EXPORT_SCENE_OT_x3d.filepath'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "End frame to export"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.frame_end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Starting frame to export"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.frame_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale the BVH by this value"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.global_scale',
       'bpy.types.IMPORT_ANIM_OT_bvh.global_scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Root Translation Only"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.root_transform_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only write out translation channels for the root bone"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.root_transform_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotation conversion"),
     (('bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode',
       'bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (Native)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'NATIVE'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'NATIVE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the rotation order defined in the BVH file"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'NATIVE'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'NATIVE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (XYZ)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'XYZ'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'XYZ'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler XYZ"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'XYZ'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'XYZ'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (XZY)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'XZY'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'XZY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler XZY"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'XZY'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'XZY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (YXZ)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'YXZ'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'YXZ'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler YXZ"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'YXZ'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'YXZ'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (YZX)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'YZX'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'YZX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler YZX"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'YZX'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'YZX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (ZXY)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'ZXY'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'ZXY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler ZXY"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'ZXY'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'ZXY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Euler (ZYX)"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'ZYX'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'ZYX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to euler ZYX"),
     (("bpy.types.EXPORT_ANIM_OT_bvh.rotate_mode:'ZYX'",
       "bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'ZYX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export STL"),
     (('bpy.types.EXPORT_MESH_OT_stl',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save STL triangle mesh data"),
     (('bpy.types.EXPORT_MESH_OT_stl',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ascii"),
     (('bpy.types.EXPORT_MESH_OT_stl.ascii',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the file in ASCII file format"),
     (('bpy.types.EXPORT_MESH_OT_stl.ascii',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "X Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'X'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'X'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'X'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'X'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'X'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Y Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'Y'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'Y'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'Y'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'Y'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'Y'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Z Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'Z'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'Z'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'Z'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'Z'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'Z'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'Z'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-X Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'-X'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'-X'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'-X'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'-X'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'-X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'-X'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'-X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Y Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'-Y'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'-Y'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'-Y'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'-Y'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'-Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Z Forward"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_forward:'-Z'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_forward:'-Z'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_forward:'-Z'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_forward:'-Z'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_forward:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_forward:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_forward:'-Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "X Up"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_up:'X'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_up:'X'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_up:'X'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_up:'X'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_up:'X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_up:'X'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_up:'X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Y Up"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_up:'Y'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_up:'Y'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_up:'Y'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_up:'Y'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_up:'Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_up:'Y'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_up:'Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-X Up"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_up:'-X'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_up:'-X'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_up:'-X'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_up:'-X'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_up:'-X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_up:'-X'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_up:'-X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Y Up"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_up:'-Y'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_up:'-Y'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_up:'-Y'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_up:'-Y'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_up:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_up:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_up:'-Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Z Up"),
     (("bpy.types.EXPORT_MESH_OT_stl.axis_up:'-Z'",
       "bpy.types.EXPORT_SCENE_OT_fbx.axis_up:'-Z'",
       "bpy.types.EXPORT_SCENE_OT_x3d.axis_up:'-Z'",
       "bpy.types.IMPORT_ANIM_OT_bvh.axis_up:'-Z'",
       "bpy.types.IMPORT_MESH_OT_stl.axis_up:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_fbx.axis_up:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_x3d.axis_up:'-Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Batch Mode"),
     (('bpy.types.EXPORT_MESH_OT_stl.batch_mode',
       'bpy.types.EXPORT_SCENE_OT_fbx.batch_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All data in one file"),
     (("bpy.types.EXPORT_MESH_OT_stl.batch_mode:'OFF'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each object as a file"),
     (("bpy.types.EXPORT_MESH_OT_stl.batch_mode:'OBJECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Space"),
     (('bpy.types.EXPORT_MESH_OT_stl.global_space',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export in this reference space"),
     (('bpy.types.EXPORT_MESH_OT_stl.global_space',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Modifiers"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_mesh_modifiers',
       'bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_modifiers',
       'bpy.types.EXPORT_SCENE_OT_gltf.export_apply',
       'bpy.types.EXPORT_SCENE_OT_x3d.use_mesh_modifiers',
       'bpy.types.WM_OT_collada_export.apply_modifiers',
       'bpy.types.WM_OT_obj_export.apply_modifiers',
       'bpy.types.WM_OT_ply_export.apply_modifiers'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the modifiers before saving"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_mesh_modifiers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scene Unit"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_scene_unit',
       'bpy.types.IMPORT_MESH_OT_stl.use_scene_unit',
       'bpy.types.WM_OT_ply_import.use_scene_unit',
       'bpy.types.WM_OT_stl_import.use_scene_unit'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply current scene's unit (as defined by unit scale) to exported data"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_scene_unit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection Only"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_selection',
       'bpy.types.EXPORT_SCENE_OT_x3d.use_selection',
       'bpy.types.WM_OT_collada_export.selected',
       'bpy.types.WM_OT_usd_export.selected_objects_only'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export selected objects only"),
     (('bpy.types.EXPORT_MESH_OT_stl.use_selection',
       'bpy.types.EXPORT_SCENE_OT_gltf.use_selection',
       'bpy.types.EXPORT_SCENE_OT_x3d.use_selection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export FBX"),
     (('bpy.types.EXPORT_SCENE_OT_fbx',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write a FBX file"),
     (('bpy.types.EXPORT_SCENE_OT_fbx',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Leaf Bones"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.add_leaf_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append a final bone to the end of each chain to specify last bone length (use this when you intend to edit the armature from exported data)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.add_leaf_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Scalings"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to apply custom and units scalings in generated FBX file (Blender uses FBX scale to detect units on import, but many other applications do not handle the same way)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Local"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply custom scaling and units scaling to each object transformation, FBX scale remains at 1.0"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "FBX Units Scale"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_UNITS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply custom scaling to each object transformation, and units scaling to FBX scale"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_UNITS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "FBX Custom Scale"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_CUSTOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply custom scaling to FBX scale, and units scaling to each object transformation"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_CUSTOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "FBX All"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply custom scaling and units scaling to FBX scale"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.apply_scale_options:'FBX_SCALE_ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Unit"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.apply_unit_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Take into account current Blender units settings (if unset, raw Blender Units values are used as-is)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.apply_unit_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Armature FBXNode Type"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "FBX type of node (object) used to represent Blender's armatures (use the Null type unless you experience issues with the other app, as other choices may not import back perfectly into Blender...)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Null"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype:'NULL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "'Null' FBX node, similar to Blender's Empty (default)"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype:'NULL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "'Root' FBX node, supposed to be the root of chains of bones..."),
     (("bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype:'ROOT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "LimbNode"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype:'LIMBNODE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "'LimbNode' FBX node, a regular joint between two bones..."),
     (("bpy.types.EXPORT_SCENE_OT_fbx.armature_nodetype:'LIMBNODE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Baked Animation"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export baked keyframe animation"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force Start/End Keying"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_force_startend_keying',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always add a keyframe at start and end of actions for animated channels"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_force_startend_keying',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much to simplify baked values (0.0 to disable, the higher the more simplified)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_simplify_factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sampling Rate"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_step',
       'bpy.types.EXPORT_SCENE_OT_gltf.export_frame_step',
       'bpy.types.WM_OT_collada_export.sampling_rate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How often to evaluate animated values (in frames)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_step',
       'bpy.types.EXPORT_SCENE_OT_gltf.export_frame_step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Actions"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_use_all_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export each action as a separated FBX's AnimStack, instead of global scene animation (note that animated objects will get all actions compatible with them, others will get no animation at all)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_use_all_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Key All Bones"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_use_all_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force exporting at least one key of animation for all bones (needed with some target applications, like UE4)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_use_all_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export each non-muted NLA strip as a separated FBX's AnimStack, if any, instead of global scene animation"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_anim_use_nla_strips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Transform"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_space_transform',
       'bpy.types.IMPORT_SCENE_OT_fbx.bake_space_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake space transform into object data, avoids getting unwanted rotations to objects when target space is not aligned with Blender's space (WARNING! experimental option, use at own risk, known to be broken with armatures/animations)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.bake_space_transform',
       'bpy.types.IMPORT_SCENE_OT_fbx.bake_space_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active scene to file"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'OFF'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each scene as a file"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'SCENE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each collection (data-block ones) as a file, does not include content of children collections"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scene Collections"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'SCENE_COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each collection (including master, non-data-block ones) of each scene as a file, including content from children collections"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'SCENE_COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active Scene Collections"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'ACTIVE_SCENE_COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each collection (including master, non-data-block one) of the active scene as a file, including content from children collections"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.batch_mode:'ACTIVE_SCENE_COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex color attributes"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.colors_type',
       'bpy.types.WM_OT_ply_export.export_colors'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not export color attributes"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.colors_type:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "sRGB"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.colors_type:'SRGB'",
       "bpy.types.IMPORT_SCENE_OT_fbx.colors_type:'SRGB'",
       "bpy.types.WM_OT_ply_export.export_colors:'SRGB'",
       "bpy.types.WM_OT_ply_import.import_colors:'SRGB'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export colors in sRGB color space"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.colors_type:'SRGB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export colors in linear color space"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.colors_type:'LINEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Embed Textures"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.embed_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Embed textures in FBX binary file (only for \\"Copy\\" path mode!)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.embed_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale all data (Some importers do not support scaled armatures!)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.global_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export smoothing information (prefer 'Normals Only' option if your target importer understand split normals)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.mesh_smooth_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normals Only"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.mesh_smooth_type:'OFF'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only normals instead of writing edge or face smoothing data"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.mesh_smooth_type:'OFF'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write face smoothing"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.mesh_smooth_type:'FACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write edge smoothing"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.mesh_smooth_type:'EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which kind of object to export"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.object_types',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lamp"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.object_types:'LIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "WARNING: not supported in dupli/group instances"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.object_types:'ARMATURE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Other geometry types, like curve, metaball, etc. (converted to meshes)"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.object_types:'OTHER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path Mode"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.path_mode',
       'bpy.types.EXPORT_SCENE_OT_x3d.path_mode',
       'bpy.types.WM_OT_obj_export.path_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used to reference paths"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.path_mode',
       'bpy.types.EXPORT_SCENE_OT_x3d.path_mode',
       'bpy.types.WM_OT_obj_export.path_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use relative paths with subdirectories only"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'AUTO'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'AUTO'",
       "bpy.types.WM_OT_obj_export.path_mode:'AUTO'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always write absolute paths"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'ABSOLUTE'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'ABSOLUTE'",
       "bpy.types.WM_OT_obj_export.path_mode:'ABSOLUTE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always write relative paths (where possible)"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'RELATIVE'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'RELATIVE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'MATCH'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'MATCH'",
       "bpy.types.WM_OT_obj_export.path_mode:'MATCH'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match absolute/relative setting with input path"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'MATCH'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'MATCH'",
       "bpy.types.WM_OT_obj_export.path_mode:'MATCH'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Strip Path"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'STRIP'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'STRIP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filename only"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'STRIP'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'STRIP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the file to the destination path (or subdirectory)"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.path_mode:'COPY'",
       "bpy.types.EXPORT_SCENE_OT_x3d.path_mode:'COPY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Primary Bone Axis"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.primary_bone_axis',
       'bpy.types.IMPORT_SCENE_OT_fbx.primary_bone_axis'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-X Axis"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.primary_bone_axis:'-X'",
       "bpy.types.EXPORT_SCENE_OT_fbx.secondary_bone_axis:'-X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.primary_bone_axis:'-X'",
       "bpy.types.IMPORT_SCENE_OT_fbx.secondary_bone_axis:'-X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Y Axis"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.primary_bone_axis:'-Y'",
       "bpy.types.EXPORT_SCENE_OT_fbx.secondary_bone_axis:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.primary_bone_axis:'-Y'",
       "bpy.types.IMPORT_SCENE_OT_fbx.secondary_bone_axis:'-Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "-Z Axis"),
     (("bpy.types.EXPORT_SCENE_OT_fbx.primary_bone_axis:'-Z'",
       "bpy.types.EXPORT_SCENE_OT_fbx.secondary_bone_axis:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_fbx.primary_bone_axis:'-Z'",
       "bpy.types.IMPORT_SCENE_OT_fbx.secondary_bone_axis:'-Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prioritize Active Color"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.prioritize_active_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make sure active color will be exported first. Could be important since some other software can discard other color attributes besides the first one"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.prioritize_active_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Secondary Bone Axis"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.secondary_bone_axis',
       'bpy.types.IMPORT_SCENE_OT_fbx.secondary_bone_axis'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only objects from the active collection (and its children)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_active_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Deform Bones"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_armature_deform_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only write deforming bones (and non-deforming ones when they have deforming children)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_armature_deform_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Batch Own Dir"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_batch_own_dir',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a dir for each exported file"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_batch_own_dir',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export custom properties"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_custom_props',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Loose Edges"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_edges',
       'bpy.types.EXPORT_SCENE_OT_gltf.use_mesh_edges'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export loose edges (as two-vertices polygons)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifiers to mesh objects (except Armature ones) - WARNING: prevents exporting shape keys"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_modifiers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Modifiers Render Setting"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_modifiers_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use render settings when applying modifiers to mesh objects (DISABLED in Blender 2.8)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_mesh_modifiers_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Metadata"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_metadata',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export selected and visible objects only"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Space Transform"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_space_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply global space transform to the object rotations. When disabled only the axis space is written to the file and all object transforms are left as-is"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_space_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Subdivision Surface"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_subsurf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the last Catmull-Rom subdivision modifier as FBX subdivision (does not apply the modifier even if 'Apply Modifiers' is enabled)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_subsurf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Triangulate Faces"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_triangles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert all faces to triangles"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_triangles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add binormal and tangent vectors, together with normal they form the tangent space (will only work correctly with tris/quads only meshes!)"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_tspace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Visible Objects"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_visible',
       'bpy.types.EXPORT_SCENE_OT_gltf.use_visible'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export visible objects only"),
     (('bpy.types.EXPORT_SCENE_OT_fbx.use_visible',
       'bpy.types.EXPORT_SCENE_OT_gltf.use_visible'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export glTF 2.0"),
     (('bpy.types.EXPORT_SCENE_OT_gltf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export scene as glTF 2.0 file"),
     (('bpy.types.EXPORT_SCENE_OT_gltf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include All Bone Influences"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_all_influences',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow export of all joint vertex influences. Models may appear incorrectly in many viewers"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_all_influences',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split Animation by Object"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_scene_split_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Scene as seen in Viewport, But split animation by Object"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_scene_split_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all Armature Actions"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_single_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all actions, bound to a single armature. WARNING: Option does not support exports including multiple armatures"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_single_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set all glTF Animation starting at 0"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_slide_to_zero',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set all glTF animation starting at 0.0s. Can be useful for looping animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_anim_slide_to_zero',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation mode"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Animation mode"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export actions (actives and on NLA tracks) as separate animations"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode:'ACTIONS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active actions merged"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode:'ACTIVE_ACTIONS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All the currently assigned actions become one glTF animation"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode:'ACTIVE_ACTIONS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export individual NLA Tracks as separate animation"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode:'NLA_TRACKS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export baked scene as a single animation"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_animation_mode:'SCENE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports active actions and NLA tracks as glTF animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_animations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifiers (excluding Armatures) to mesh objects -WARNING: prevents exporting shape keys"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Attributes (when starting with underscore)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_attributes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake All Objects Animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_bake_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force exporting animation on every object. Can be useful when using constraints or driver. Also useful when exporting only selection"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_bake_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export cameras"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_cameras',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex colors with meshes"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Legal rights and conditions for the model"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_copyright',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Current Frame as Object Rest Transformations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the scene in the current animation frame. When off, frame 0 is used as rest transformations for objects"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Deformation Bones Only"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_def_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Deformation bones only"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_def_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Color quantization bits"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_color_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quantization bits for color values (0 = no quantization)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_color_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generic quantization bits"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_generic_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quantization bits for generic values like weights or joints (0 = no quantization)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_generic_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draco mesh compression"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_mesh_compression_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compress mesh using Draco"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_mesh_compression_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compression level"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_mesh_compression_level',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compression level (0 = most speed, 6 = most compression, higher values currently not supported)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_mesh_compression_level',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normal quantization bits"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_normal_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quantization bits for normal values (0 = no quantization)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_normal_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Position quantization bits"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_position_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quantization bits for position values (0 = no quantization)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_position_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Texcoord quantization bits"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_texcoord_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quantization bits for texture coordinate values (0 = no quantization)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_draco_texcoord_quantization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export custom properties as glTF extras"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_extras',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always Sample Animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_force_sampling',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply sampling to all animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_force_sampling',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output format. Binary is most efficient, but JSON may be easier to edit later"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_format',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "glTF Binary (.glb)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_format:'GLB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports a single file, with all data packed in binary form. Most efficient and portable, but more difficult to edit later"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_format:'GLB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "glTF Separate (.gltf + .bin + textures)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_format:'GLTF_SEPARATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports multiple files, with separate JSON, binary and texture data. Easiest to edit later"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_format:'GLTF_SEPARATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit to Playback Range"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_frame_range',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clips animations to selected playback range"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_frame_range',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "GPU Instances"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_gpu_instances',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export using EXT_mesh_gpu_instancing. Limited to children of a given Empty. Multiple materials might be omitted"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_gpu_instances',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten Bone Hierarchy"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_hierarchy_flatten_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten Bone Hierarchy. Useful in case of non decomposable transformation matrix"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_hierarchy_flatten_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create WebP"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_add_webp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Creates WebP textures for every texture. For already WebP textures, nothing happens"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_add_webp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Output format for images. PNG is lossless and generally preferred, but JPEG might be preferable for web applications due to the smaller file size. Alternatively they can be omitted if they are not needed"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_format',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save PNGs as PNGs, JPEGs as JPEGs, WebPs as WebPs. For other formats, use PNG"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "JPEG Format (.jpg)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'JPEG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save images as JPEGs. (Images that need alpha are saved as PNGs though.) Be aware of a possible loss in quality"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'JPEG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "WebP Format"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'WEBP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save images as WebPs as main image (no fallback)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'WEBP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't export images"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_image_format:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image quality"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_quality',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quality of image export"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_quality',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "WebP fallback"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_webp_fallback',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "For all WebP textures, create a PNG fallback texture"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_image_webp_fallback',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lighting Mode"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode',
       'bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Optional backwards compatibility for non-standard render engines. Applies to lights"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode',
       'bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Physically-based glTF lighting units (cd, lx, nt)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'SPEC'",
       "bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'SPEC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unitless"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'COMPAT'",
       "bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'COMPAT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Non-physical, unitless lighting. Useful when exposure controls are not available"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'COMPAT'",
       "bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'COMPAT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Raw (Deprecated)"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'RAW'",
       "bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'RAW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blender lighting strengths with no conversion"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'RAW'",
       "bpy.types.IMPORT_SCENE_OT_gltf.export_import_convert_lighting_mode:'RAW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bone Influences"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_influence_nb',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Choose how many Bone influences to export"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_influence_nb',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "JPEG quality"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_jpeg_quality',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quality of JPEG export"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_jpeg_quality',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_keep_originals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original textures files if possible. WARNING: if you use more than one texture, where pbr standard requires only one, only one texture will be used. This can lead to unexpected results"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_keep_originals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Punctual Lights"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_lights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export directional, point, and spot lights. Uses \\"KHR_lights_punctual\\" glTF extension"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_lights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export materials"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all materials used by included objects"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_materials:'EXPORT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not export materials, but write multiple primitive groups per mesh, keeping material slot information"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_materials:'PLACEHOLDER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "No export"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_materials:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not export materials, and combine mesh primitive groups, losing material slot information"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_materials:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export shape keys (morph targets)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape Key Animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export shape keys animations (morph targets)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape Key Normals"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex normals with shape keys (morph targets)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset shape keys between actions"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_reset_sk_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset shape keys between each action exported. This is needed when some SK channels are not keyed on some animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_reset_sk_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape Key Tangents"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_tangent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex tangents with shape keys (morph targets)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_morph_tangent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Frames"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_negative_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Frames are slid or cropped"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_negative_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide animation to start at frame 0"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_negative_frame:'SLIDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep only frames above frame 0"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.export_negative_frame:'CROP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Group by NLA Track"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_nla_strips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When on, multiple actions become part of the same glTF animation if they're pushed onto NLA tracks with the same name. When off, all the currently assigned actions become one glTF animation"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_nla_strips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merged Animation Name"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_nla_strips_merged_animation_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of single glTF animation to be exported"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_nla_strips_merged_animation_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex normals with meshes"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force keeping channels for bones"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_keep_anim_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If all keyframes are identical in a rig, force keeping the minimal animation. When off, all possible channels for the bones will be exported, even if empty (minimal animation, 2 keyframes)"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_keep_anim_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force keeping channel for objects"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_keep_anim_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If all keyframes are identical for object transformations, force keeping the minimal animation"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_keep_anim_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Optimize Animation Size"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reduce exported file size by removing duplicate keyframes"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_optimize_animation_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export original PBR Specular"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_original_specular',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export original glTF PBR Specular, instead of Blender Principled Shader Specular"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_original_specular',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset pose bones between actions"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_reset_pose_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset pose bones between each action exported. This is needed when some bones are not keyed on some animations"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_reset_pose_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Rest Position Armature"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_rest_position_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export armatures using rest position as joints' rest pose. When off, current frame pose is used as rest pose"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_rest_position_armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export skinning (armature) data"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_skins',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tangents"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_tangents',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export vertex tangents with meshes"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_tangents',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export UVs (texture coordinates) with meshes"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_texcoords',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Folder to place texture files in. Relative to the .gltf file"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_texture_dir',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Omitting Sparse Accessor if data is empty"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_try_omit_sparse_sk',
       'bpy.types.EXPORT_SCENE_OT_gltf.export_try_omit_sparse_sk'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Sparse Accessor if better"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_try_sparse_sk',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try using Sparse Accessor if it saves space"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_try_sparse_sk',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "+Y Up"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_yup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export using glTF convention, +Y up"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.export_yup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of caller (in case of add-on calling this exporter). Can be useful in case of Extension added by other add-ons"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.gltf_export_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export setting categories"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.ui_tab',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "General"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.ui_tab:'GENERAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "General settings"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.ui_tab:'GENERAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mesh settings"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.ui_tab:'MESHES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object settings"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.ui_tab:'OBJECTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation settings"),
     (("bpy.types.EXPORT_SCENE_OT_gltf.ui_tab:'ANIMATION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export objects in the active collection only"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_active_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Nested Collections"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_active_collection_with_nested',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include active collection and nested collections"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_active_collection_with_nested',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export active scene only"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_active_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export loose edges as lines, using the material from the first material slot"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_mesh_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Loose Points"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_mesh_vertices',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export loose points as glTF points, using the material from the first material slot"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_mesh_vertices',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Renderable Objects"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_renderable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export renderable objects only"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.use_renderable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remember Export Settings"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.will_save_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store glTF export settings in the Blender project"),
     (('bpy.types.EXPORT_SCENE_OT_gltf.will_save_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export X3D"),
     (('bpy.types.EXPORT_SCENE_OT_x3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export selection to Extensible 3D file (.x3d)"),
     (('bpy.types.EXPORT_SCENE_OT_x3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name decorations"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.name_decorations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add prefixes to the names of exported nodes to indicate their type"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.name_decorations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compress the exported file"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_compress',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "H3D Extensions"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_h3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export shaders for H3D"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_h3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hierarchy"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_hierarchy',
       'bpy.types.OUTLINER_OT_delete.hierarchy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export parent child relationships"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use transformed mesh data from each object"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_mesh_modifiers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write normals with geometry"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write quads into 'IndexedTriangleSet'"),
     (('bpy.types.EXPORT_SCENE_OT_x3d.use_triangulate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Automatically Pack Resources"),
     (('bpy.types.FILE_OT_autopack_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically pack all external files into the .blend file"),
     (('bpy.types.FILE_OT_autopack_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cleanup Bookmarks"),
     (('bpy.types.FILE_OT_bookmark_cleanup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all invalid bookmarks"),
     (('bpy.types.FILE_OT_bookmark_cleanup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cancel File Load"),
     (('bpy.types.FILE_OT_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cancel loading of selected file"),
     (('bpy.types.FILE_OT_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Selected Files"),
     (('bpy.types.FILE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected files to the trash or recycle bin"),
     (('bpy.types.FILE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Directory Path"),
     (('bpy.types.FILE_OT_edit_directory_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start editing directory field"),
     (('bpy.types.FILE_OT_edit_directory_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Execute File Window"),
     (('bpy.types.FILE_OT_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Execute selected file"),
     (('bpy.types.FILE_OT_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "External File Operation"),
     (('bpy.types.FILE_OT_external_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Perform external operation on a file or folder"),
     (('bpy.types.FILE_OT_external_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File or folder path"),
     (('bpy.types.FILE_OT_external_operation.filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Operation to perform on the file or path"),
     (('bpy.types.FILE_OT_external_operation.operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the file"),
     (("bpy.types.FILE_OT_external_operation.operation:'OPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open Folder"),
     (("bpy.types.FILE_OT_external_operation.operation:'FOLDER_OPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the folder"),
     (("bpy.types.FILE_OT_external_operation.operation:'FOLDER_OPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit the file"),
     (("bpy.types.FILE_OT_external_operation.operation:'EDIT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new file of this type"),
     (("bpy.types.FILE_OT_external_operation.operation:'NEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find File"),
     (("bpy.types.FILE_OT_external_operation.operation:'FIND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Search for files of this type"),
     (("bpy.types.FILE_OT_external_operation.operation:'FIND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'SHOW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Play this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'PLAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Browse"),
     (("bpy.types.FILE_OT_external_operation.operation:'BROWSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Browse this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'BROWSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preview this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'PREVIEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Print"),
     (("bpy.types.FILE_OT_external_operation.operation:'PRINT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Print this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'PRINT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install"),
     (("bpy.types.FILE_OT_external_operation.operation:'INSTALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install this file"),
     (("bpy.types.FILE_OT_external_operation.operation:'INSTALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Run As User"),
     (("bpy.types.FILE_OT_external_operation.operation:'RUNAS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Run as specific user"),
     (("bpy.types.FILE_OT_external_operation.operation:'RUNAS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show OS Properties for this item"),
     (("bpy.types.FILE_OT_external_operation.operation:'PROPERTIES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find in Folder"),
     (("bpy.types.FILE_OT_external_operation.operation:'FOLDER_FIND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Search for items in this folder"),
     (("bpy.types.FILE_OT_external_operation.operation:'FOLDER_FIND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Command Prompt Here"),
     (("bpy.types.FILE_OT_external_operation.operation:'CMD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a command prompt here"),
     (("bpy.types.FILE_OT_external_operation.operation:'CMD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "File Selector Drop"),
     (('bpy.types.FILE_OT_filepath_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Find Missing Files"),
     (('bpy.types.FILE_OT_find_missing_files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to find missing external files"),
     (('bpy.types.FILE_OT_find_missing_files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find all files in the search path (not just missing)"),
     (('bpy.types.FILE_OT_find_missing_files.find_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Hide Dot Files"),
     (('bpy.types.FILE_OT_hidedot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle hide hidden dot files"),
     (('bpy.types.FILE_OT_hidedot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Highlight File"),
     (('bpy.types.FILE_OT_highlight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Highlight selected file(s)"),
     (('bpy.types.FILE_OT_highlight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Paths Absolute"),
     (('bpy.types.FILE_OT_make_paths_absolute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make all paths to external files absolute"),
     (('bpy.types.FILE_OT_make_paths_absolute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Paths Relative"),
     (('bpy.types.FILE_OT_make_paths_relative',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make all paths to external files relative to current .blend"),
     (('bpy.types.FILE_OT_make_paths_relative',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Execute File"),
     (('bpy.types.FILE_OT_mouse_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Perform the current execute action for the file under the cursor (e.g. open the file)"),
     (('bpy.types.FILE_OT_mouse_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pack Resources"),
     (('bpy.types.FILE_OT_pack_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack all used external files into this .blend"),
     (('bpy.types.FILE_OT_pack_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pack Linked Libraries"),
     (('bpy.types.FILE_OT_pack_libraries',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store all data-blocks linked from other .blend files in the current .blend file. Library references are preserved so the linked data-blocks can be unpacked again"),
     (('bpy.types.FILE_OT_pack_libraries',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rename File or Directory"),
     (('bpy.types.FILE_OT_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rename file or file directory"),
     (('bpy.types.FILE_OT_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Report Missing Files"),
     (('bpy.types.FILE_OT_report_missing_files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Report all missing external files"),
     (('bpy.types.FILE_OT_report_missing_files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Recent"),
     (('bpy.types.FILE_OT_reset_recent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset recent files"),
     (('bpy.types.FILE_OT_reset_recent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Directory"),
     (('bpy.types.FILE_OT_select_bookmark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select a bookmarked directory"),
     (('bpy.types.FILE_OT_select_bookmark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Scroll"),
     (('bpy.types.FILE_OT_smoothscroll',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth scroll to make editable file visible"),
     (('bpy.types.FILE_OT_smoothscroll',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sort from Column"),
     (('bpy.types.FILE_OT_sort_column_ui_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change sorting to use column under cursor"),
     (('bpy.types.FILE_OT_sort_column_ui_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unpack Resources"),
     (('bpy.types.FILE_OT_unpack_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unpack all files packed into this .blend to external ones"),
     (('bpy.types.FILE_OT_unpack_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to unpack"),
     (('bpy.types.FILE_OT_unpack_all.method',
       'bpy.types.FILE_OT_unpack_item.method',
       'bpy.types.IMAGE_OT_unpack.method',
       'bpy.types.SOUND_OT_unpack.method'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use files in current directory (create when necessary)"),
     (("bpy.types.FILE_OT_unpack_all.method:'USE_LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write files to current directory (overwrite existing files)"),
     (("bpy.types.FILE_OT_unpack_all.method:'WRITE_LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use files in original location (create when necessary)"),
     (("bpy.types.FILE_OT_unpack_all.method:'USE_ORIGINAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write files to original location (overwrite existing files)"),
     (("bpy.types.FILE_OT_unpack_all.method:'WRITE_ORIGINAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disable auto-pack, keep all packed files"),
     (("bpy.types.FILE_OT_unpack_all.method:'KEEP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Pack"),
     (("bpy.types.FILE_OT_unpack_all.method:'REMOVE'",
       "bpy.types.IMAGE_OT_unpack.method:'REMOVE'",
       "bpy.types.SOUND_OT_unpack.method:'REMOVE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unpack Item"),
     (('bpy.types.FILE_OT_unpack_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unpack this file to an external file"),
     (('bpy.types.FILE_OT_unpack_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of ID block to unpack"),
     (('bpy.types.FILE_OT_unpack_item.id_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier type of ID block"),
     (('bpy.types.FILE_OT_unpack_item.id_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use file from current directory (create when necessary)"),
     (("bpy.types.FILE_OT_unpack_item.method:'USE_LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write file to current directory (overwrite existing file)"),
     (("bpy.types.FILE_OT_unpack_item.method:'WRITE_LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use file in original location (create when necessary)"),
     (("bpy.types.FILE_OT_unpack_item.method:'USE_ORIGINAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write file to original location (overwrite existing file)"),
     (("bpy.types.FILE_OT_unpack_item.method:'WRITE_ORIGINAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unpack Linked Libraries"),
     (('bpy.types.FILE_OT_unpack_libraries',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore all packed linked data-blocks to their original locations"),
     (('bpy.types.FILE_OT_unpack_libraries',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scroll the selected files into view"),
     (('bpy.types.FILE_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake All"),
     (('bpy.types.FLUID_OT_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Entire Fluid Simulation"),
     (('bpy.types.FLUID_OT_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Data"),
     (('bpy.types.FLUID_OT_bake_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Fluid Data"),
     (('bpy.types.FLUID_OT_bake_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Guides"),
     (('bpy.types.FLUID_OT_bake_guides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Fluid Guiding"),
     (('bpy.types.FLUID_OT_bake_guides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Mesh"),
     (('bpy.types.FLUID_OT_bake_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Fluid Mesh"),
     (('bpy.types.FLUID_OT_bake_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Noise"),
     (('bpy.types.FLUID_OT_bake_noise',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Fluid Noise"),
     (('bpy.types.FLUID_OT_bake_noise',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Particles"),
     (('bpy.types.FLUID_OT_bake_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Fluid Particles"),
     (('bpy.types.FLUID_OT_bake_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free All"),
     (('bpy.types.FLUID_OT_free_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Entire Fluid Simulation"),
     (('bpy.types.FLUID_OT_free_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free Data"),
     (('bpy.types.FLUID_OT_free_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Fluid Data"),
     (('bpy.types.FLUID_OT_free_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free Guides"),
     (('bpy.types.FLUID_OT_free_guides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Fluid Guiding"),
     (('bpy.types.FLUID_OT_free_guides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free Mesh"),
     (('bpy.types.FLUID_OT_free_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Fluid Mesh"),
     (('bpy.types.FLUID_OT_free_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free Noise"),
     (('bpy.types.FLUID_OT_free_noise',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Fluid Noise"),
     (('bpy.types.FLUID_OT_free_noise',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Free Particles"),
     (('bpy.types.FLUID_OT_free_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Fluid Particles"),
     (('bpy.types.FLUID_OT_free_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pause Bake"),
     (('bpy.types.FLUID_OT_pause_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pause Bake"),
     (('bpy.types.FLUID_OT_pause_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Fluid Preset"),
     (('bpy.types.FLUID_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Fluid Preset"),
     (('bpy.types.FLUID_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Case"),
     (('bpy.types.FONT_OT_case_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set font case"),
     (('bpy.types.FONT_OT_case_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Text", "Case"),
     (('bpy.types.FONT_OT_case_set.case',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lower or upper case"),
     (('bpy.types.FONT_OT_case_set.case',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Text", "Lower"),
     (("bpy.types.FONT_OT_case_set.case:'LOWER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Text", "Upper"),
     (("bpy.types.FONT_OT_case_set.case:'UPPER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Case"),
     (('bpy.types.FONT_OT_case_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle font case"),
     (('bpy.types.FONT_OT_case_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Line Break"),
     (('bpy.types.FONT_OT_line_break',
       'bpy.types.TEXT_OT_line_break'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert line break at cursor position"),
     (('bpy.types.FONT_OT_line_break',
       'bpy.types.TEXT_OT_line_break'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Font"),
     (('bpy.types.FONT_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a new font from a file"),
     (('bpy.types.FONT_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all text"),
     (('bpy.types.FONT_OT_select_all',
       'bpy.types.TEXT_OT_select_all'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select word under cursor"),
     (('bpy.types.FONT_OT_select_word',
       'bpy.types.TEXT_OT_select_word'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set cursor selection"),
     (('bpy.types.FONT_OT_selection_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Style"),
     (('bpy.types.FONT_OT_style_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set font style"),
     (('bpy.types.FONT_OT_style_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear style rather than setting it"),
     (('bpy.types.FONT_OT_style_set.clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Text"),
     (('bpy.types.FONT_OT_text_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cut Text"),
     (('bpy.types.FONT_OT_text_cut',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut selected text to clipboard"),
     (('bpy.types.FONT_OT_text_cut',
       'bpy.types.TEXT_OT_cut'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Text"),
     (('bpy.types.FONT_OT_text_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste File"),
     (('bpy.types.FONT_OT_text_paste_from_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste contents from file"),
     (('bpy.types.FONT_OT_text_paste_from_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Text Box"),
     (('bpy.types.FONT_OT_textbox_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new text box"),
     (('bpy.types.FONT_OT_textbox_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Text Box"),
     (('bpy.types.FONT_OT_textbox_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the text box"),
     (('bpy.types.FONT_OT_textbox_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The current text box"),
     (('bpy.types.FONT_OT_textbox_remove.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlink"),
     (('bpy.types.FONT_OT_unlink',
       'bpy.types.OBJECT_OT_unlink_data',
       'bpy.types.TEXT_OT_unlink'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink active font data-block"),
     (('bpy.types.FONT_OT_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Attribute"),
     (('bpy.types.GEOMETRY_OT_attribute_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add attribute to geometry"),
     (('bpy.types.GEOMETRY_OT_attribute_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of element that attribute is stored on"),
     (('bpy.types.GEOMETRY_OT_attribute_add.domain',
       'bpy.types.GEOMETRY_OT_color_attribute_add.domain',
       'bpy.types.GEOMETRY_OT_color_attribute_convert.domain',
       'bpy.types.PAINT_OT_add_texture_paint_slot.domain'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of new attribute"),
     (('bpy.types.GEOMETRY_OT_attribute_add.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Attribute"),
     (('bpy.types.GEOMETRY_OT_attribute_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change how the attribute is stored"),
     (('bpy.types.GEOMETRY_OT_attribute_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which geometry element to move the attribute to"),
     (('bpy.types.GEOMETRY_OT_attribute_convert.domain',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Attribute"),
     (('bpy.types.GEOMETRY_OT_attribute_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove attribute from geometry"),
     (('bpy.types.GEOMETRY_OT_attribute_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Color Attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add color attribute to geometry"),
     (('bpy.types.GEOMETRY_OT_color_attribute_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Default fill color"),
     (('bpy.types.GEOMETRY_OT_color_attribute_add.color',
       'bpy.types.IMAGE_OT_new.color',
       'bpy.types.IMAGE_OT_tile_add.color',
       'bpy.types.IMAGE_OT_tile_fill.color',
       'bpy.types.PAINT_OT_add_texture_paint_slot.color'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "RGBA color 32-bit floating-point values"),
     (("bpy.types.GEOMETRY_OT_color_attribute_add.data_type:'FLOAT_COLOR'",
       "bpy.types.GEOMETRY_OT_color_attribute_convert.data_type:'FLOAT_COLOR'",
       "bpy.types.PAINT_OT_add_texture_paint_slot.data_type:'FLOAT_COLOR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of new color attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_add.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Color Attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change how the color attribute is stored"),
     (('bpy.types.GEOMETRY_OT_color_attribute_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Color Attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate color attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Color Attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove color attribute from geometry"),
     (('bpy.types.GEOMETRY_OT_color_attribute_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Render Color"),
     (('bpy.types.GEOMETRY_OT_color_attribute_render_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set default color attribute used for rendering"),
     (('bpy.types.GEOMETRY_OT_color_attribute_render_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of color attribute"),
     (('bpy.types.GEOMETRY_OT_color_attribute_render_set.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Run Node Group"),
     (('bpy.types.GEOMETRY_OT_execute_node_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Execute a node group on geometry"),
     (('bpy.types.GEOMETRY_OT_execute_node_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Asset Library Identifier"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.asset_library_identifier',
       'bpy.types.NODE_OT_add_group_asset.asset_library_identifier',
       'bpy.types.OBJECT_OT_modifier_add_node_group.asset_library_identifier'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Asset Library Type"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.asset_library_type',
       'bpy.types.NODE_OT_add_group_asset.asset_library_type',
       'bpy.types.OBJECT_OT_modifier_add_node_group.asset_library_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Essentials"),
     (("bpy.types.GEOMETRY_OT_execute_node_group.asset_library_type:'ESSENTIALS'",
       "bpy.types.NODE_OT_add_group_asset.asset_library_type:'ESSENTIALS'",
       "bpy.types.OBJECT_OT_modifier_add_node_group.asset_library_type:'ESSENTIALS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the data-block to use by the operator"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.name',
       'bpy.types.NODE_OT_add_collection.name',
       'bpy.types.NODE_OT_add_file.name',
       'bpy.types.NODE_OT_add_group.name',
       'bpy.types.NODE_OT_add_mask.name',
       'bpy.types.NODE_OT_add_material.name',
       'bpy.types.NODE_OT_add_object.name',
       'bpy.types.OBJECT_OT_add_named.name',
       'bpy.types.OBJECT_OT_data_instance_add.name',
       'bpy.types.OBJECT_OT_drop_named_image.name',
       'bpy.types.OBJECT_OT_drop_named_material.name',
       'bpy.types.VIEW3D_OT_background_image_add.name',
       'bpy.types.VIEW3D_OT_drop_world.name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative Asset Identifier"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.relative_asset_identifier',
       'bpy.types.NODE_OT_add_group_asset.relative_asset_identifier',
       'bpy.types.OBJECT_OT_modifier_add_node_group.relative_asset_identifier'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Session UUID"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.session_uuid',
       'bpy.types.NODE_OT_add_collection.session_uuid',
       'bpy.types.NODE_OT_add_file.session_uuid',
       'bpy.types.NODE_OT_add_group.session_uuid',
       'bpy.types.NODE_OT_add_mask.session_uuid',
       'bpy.types.NODE_OT_add_material.session_uuid',
       'bpy.types.NODE_OT_add_object.session_uuid',
       'bpy.types.OBJECT_OT_add_named.session_uuid',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.session_uuid',
       'bpy.types.OBJECT_OT_collection_instance_add.session_uuid',
       'bpy.types.OBJECT_OT_data_instance_add.session_uuid',
       'bpy.types.OBJECT_OT_drop_geometry_nodes.session_uuid',
       'bpy.types.OBJECT_OT_drop_named_image.session_uuid',
       'bpy.types.OBJECT_OT_drop_named_material.session_uuid',
       'bpy.types.OBJECT_OT_modifier_add_node_group.session_uuid',
       'bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single.session_uuid',
       'bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single.session_uuid',
       'bpy.types.OBJECT_OT_transform_to_mouse.session_uuid',
       'bpy.types.UI_OT_drop_material.session_uuid',
       'bpy.types.VIEW3D_OT_background_image_add.session_uuid',
       'bpy.types.VIEW3D_OT_drop_world.session_uuid'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Session UUID of the data-block to use by the operator"),
     (('bpy.types.GEOMETRY_OT_execute_node_group.session_uuid',
       'bpy.types.NODE_OT_add_collection.session_uuid',
       'bpy.types.NODE_OT_add_file.session_uuid',
       'bpy.types.NODE_OT_add_group.session_uuid',
       'bpy.types.NODE_OT_add_mask.session_uuid',
       'bpy.types.NODE_OT_add_material.session_uuid',
       'bpy.types.NODE_OT_add_object.session_uuid',
       'bpy.types.OBJECT_OT_add_named.session_uuid',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.session_uuid',
       'bpy.types.OBJECT_OT_collection_instance_add.session_uuid',
       'bpy.types.OBJECT_OT_data_instance_add.session_uuid',
       'bpy.types.OBJECT_OT_drop_named_image.session_uuid',
       'bpy.types.OBJECT_OT_drop_named_material.session_uuid',
       'bpy.types.OBJECT_OT_modifier_add_node_group.session_uuid',
       'bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single.session_uuid',
       'bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single.session_uuid',
       'bpy.types.UI_OT_drop_material.session_uuid',
       'bpy.types.VIEW3D_OT_background_image_add.session_uuid',
       'bpy.types.VIEW3D_OT_drop_world.session_uuid'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Geometry Randomization"),
     (('bpy.types.GEOMETRY_OT_geometry_randomization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle geometry randomization for debugging purposes"),
     (('bpy.types.GEOMETRY_OT_geometry_randomization',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the order of geometry elements (e.g. vertices or edges) after some operations where there are no guarantees about the order. This avoids accidentally depending on something that may change in the future"),
     (('bpy.types.GEOMETRY_OT_geometry_randomization.value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Gizmo Select"),
     (('bpy.types.GIZMOGROUP_OT_gizmo_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the currently highlighted gizmo"),
     (('bpy.types.GIZMOGROUP_OT_gizmo_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Gizmo Tweak"),
     (('bpy.types.GIZMOGROUP_OT_gizmo_tweak',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tweak the active gizmo"),
     (('bpy.types.GIZMOGROUP_OT_gizmo_tweak',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Active Frame"),
     (('bpy.types.GPENCIL_OT_active_frame_delete',
       'bpy.types.GPENCIL_OT_annotation_active_frame_delete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the active frame for the active Grease Pencil Layer"),
     (('bpy.types.GPENCIL_OT_active_frame_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete All Active Frames"),
     (('bpy.types.GPENCIL_OT_active_frames_delete_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the active frame(s) of all editable Grease Pencil layers"),
     (('bpy.types.GPENCIL_OT_active_frames_delete_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the active frame for the active Annotation Layer"),
     (('bpy.types.GPENCIL_OT_annotation_active_frame_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Annotation Add New"),
     (('bpy.types.GPENCIL_OT_annotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new Annotation data-block"),
     (('bpy.types.GPENCIL_OT_annotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Object Transform to Grease Pencil"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake grease pencil object transform to grease pencil keyframes"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The end frame of animation"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.frame_end',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.frame_end'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The start frame"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.frame_start',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.frame_start'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target Frame"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.frame_target',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.frame_target'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Destination frame"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.frame_target',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.frame_target'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Selected Keyframes"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.only_selected',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.only_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert only selected keyframes"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.only_selected',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.only_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Projection Type"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.project_type',
       'bpy.types.GPENCIL_OT_reproject.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "No Reproject"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'KEEP'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'KEEP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes using the X-Z plane"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'FRONT'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'FRONT'",
       "bpy.types.GPENCIL_OT_reproject.type:'FRONT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes using the Y-Z plane"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'SIDE'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'SIDE'",
       "bpy.types.GPENCIL_OT_reproject.type:'SIDE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes using the X-Y plane"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'TOP'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'TOP'",
       "bpy.types.GPENCIL_OT_reproject.type:'TOP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using 'Cursor' Stroke Placement"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'VIEW'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'VIEW'",
       "bpy.types.GPENCIL_OT_reproject.type:'VIEW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes using the orientation of 3D cursor"),
     (("bpy.types.GPENCIL_OT_bake_grease_pencil_animation.project_type:'CURSOR'",
       "bpy.types.GPENCIL_OT_bake_mesh_animation.project_type:'CURSOR'",
       "bpy.types.GPENCIL_OT_reproject.type:'CURSOR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Step between generated frames"),
     (('bpy.types.GPENCIL_OT_bake_grease_pencil_animation.step',
       'bpy.types.GPENCIL_OT_bake_mesh_animation.step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Mesh Animation to Grease Pencil"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake mesh animation to grease pencil strokes"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Threshold Angle"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.angle',
       'bpy.types.OBJECT_OT_convert.angle'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Threshold to determine ends of the strokes"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.angle',
       'bpy.types.OBJECT_OT_convert.angle'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Faces"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.faces',
       'bpy.types.OBJECT_OT_convert.faces'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export faces as filled strokes"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.faces',
       'bpy.types.OBJECT_OT_convert.faces'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stroke Offset"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.offset',
       'bpy.types.OBJECT_OT_convert.offset',
       'bpy.types.OBJECT_OT_gpencil_add.stroke_depth_offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset strokes from fill"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.offset',
       'bpy.types.OBJECT_OT_convert.offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Seam Edges"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.seams',
       'bpy.types.OBJECT_OT_convert.seams'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert only seam edges"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.seams',
       'bpy.types.OBJECT_OT_convert.seams'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target grease pencil"),
     (('bpy.types.GPENCIL_OT_bake_mesh_animation.target',
       'bpy.types.GPENCIL_OT_trace_image.target'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New Object"),
     (("bpy.types.GPENCIL_OT_bake_mesh_animation.target:'NEW'",
       "bpy.types.GPENCIL_OT_trace_image.target:'NEW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Object"),
     (("bpy.types.GPENCIL_OT_bake_mesh_animation.target:'SELECTED'",
       "bpy.types.GPENCIL_OT_trace_image.target:'SELECTED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Blank Frame"),
     (('bpy.types.GPENCIL_OT_blank_frame_add',
       'bpy.types.GREASE_PENCIL_OT_insert_blank_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a blank frame on the current frame (all subsequently existing frames, if any, are shifted right by one frame)"),
     (('bpy.types.GPENCIL_OT_blank_frame_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create blank frame in all layers, not only active"),
     (('bpy.types.GPENCIL_OT_blank_frame_add.all_layers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset brush to default parameters"),
     (('bpy.types.GPENCIL_OT_brush_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset All Brushes"),
     (('bpy.types.GPENCIL_OT_brush_reset_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all mode brushes and recreate a default set"),
     (('bpy.types.GPENCIL_OT_brush_reset_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Grease Pencil"),
     (('bpy.types.GPENCIL_OT_convert',
       'bpy.types.GPENCIL_OT_convert_old_files'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert the active Grease Pencil layer to a new Curve Object"),
     (('bpy.types.GPENCIL_OT_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bevel resolution when depth is non-zero"),
     (('bpy.types.GPENCIL_OT_convert.bevel_resolution',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The end frame of the path control curve (if Realtime is not set)"),
     (('bpy.types.GPENCIL_OT_convert.end_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The duration of evaluation of the path control curve"),
     (('bpy.types.GPENCIL_OT_convert.frame_range',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Gap Duration"),
     (('bpy.types.GPENCIL_OT_convert.gap_duration',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom Gap mode: (Average) length of gaps, in frames (Note: Realtime value, will be scaled if Realtime is not set)"),
     (('bpy.types.GPENCIL_OT_convert.gap_duration',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Gap Randomness"),
     (('bpy.types.GPENCIL_OT_convert.gap_randomness',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom Gap mode: Number of frames that gap lengths can vary"),
     (('bpy.types.GPENCIL_OT_convert.gap_randomness',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius Factor"),
     (('bpy.types.GPENCIL_OT_convert.radius_multiplier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Multiplier for the points' radii (set from stroke width)"),
     (('bpy.types.GPENCIL_OT_convert.radius_multiplier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom Gap mode: Random generator seed"),
     (('bpy.types.GPENCIL_OT_convert.seed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The start frame of the path control curve"),
     (('bpy.types.GPENCIL_OT_convert.start_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Timing Mode"),
     (('bpy.types.GPENCIL_OT_convert.timing_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to use timing data stored in strokes"),
     (('bpy.types.GPENCIL_OT_convert.timing_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "No Timing"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ignore timing"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simple linear timing"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'LINEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the original timing, gaps included"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'FULL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom Gaps"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'CUSTOMGAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the original timing, but with custom gap lengths (in frames)"),
     (("bpy.types.GPENCIL_OT_convert.timing_mode:'CUSTOMGAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which type of curve to convert to"),
     (('bpy.types.GPENCIL_OT_convert.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation path"),
     (("bpy.types.GPENCIL_OT_convert.type:'PATH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Bezier curve"),
     (("bpy.types.GPENCIL_OT_convert.type:'CURVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Polygon Curve"),
     (("bpy.types.GPENCIL_OT_convert.type:'POLY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bezier curve with straight-line segments (vector handles)"),
     (("bpy.types.GPENCIL_OT_convert.type:'POLY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Strokes"),
     (('bpy.types.GPENCIL_OT_convert.use_link_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Whether to link strokes with zero-radius sections of curves"),
     (('bpy.types.GPENCIL_OT_convert.use_link_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize Weight"),
     (('bpy.types.GPENCIL_OT_convert.use_normalize_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize weight (set from stroke width)"),
     (('bpy.types.GPENCIL_OT_convert.use_normalize_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Whether the path control curve reproduces the drawing in realtime, starting from Start Frame"),
     (('bpy.types.GPENCIL_OT_convert.use_realtime',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Has Valid Timing"),
     (('bpy.types.GPENCIL_OT_convert.use_timing_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Whether the converted Grease Pencil layer has valid timing data (internal use)"),
     (('bpy.types.GPENCIL_OT_convert.use_timing_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert 2.7x grease pencil files to 2.80"),
     (('bpy.types.GPENCIL_OT_convert_old_files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert to Annotations"),
     (('bpy.types.GPENCIL_OT_convert_old_files.annotation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Strokes"),
     (('bpy.types.GPENCIL_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected Grease Pencil points and strokes"),
     (('bpy.types.GPENCIL_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Annotation Unlink"),
     (('bpy.types.GPENCIL_OT_data_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink active Annotation data-block"),
     (('bpy.types.GPENCIL_OT_data_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected Grease Pencil strokes, vertices, or frames"),
     (('bpy.types.GPENCIL_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used for deleting Grease Pencil data"),
     (('bpy.types.GPENCIL_OT_delete.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected points and split strokes into segments"),
     (("bpy.types.GPENCIL_OT_delete.type:'POINTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected strokes"),
     (("bpy.types.GPENCIL_OT_delete.type:'STROKES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete active frame"),
     (("bpy.types.GPENCIL_OT_delete.type:'FRAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve"),
     (('bpy.types.GPENCIL_OT_dissolve',
       'bpy.types.GREASE_PENCIL_OT_dissolve'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected points without splitting strokes"),
     (('bpy.types.GPENCIL_OT_dissolve',
       'bpy.types.GREASE_PENCIL_OT_dissolve'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used for dissolving stroke points"),
     (('bpy.types.GPENCIL_OT_dissolve.type',
       'bpy.types.GREASE_PENCIL_OT_dissolve.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve selected points"),
     (("bpy.types.GPENCIL_OT_dissolve.type:'POINTS'",
       "bpy.types.GREASE_PENCIL_OT_dissolve.type:'POINTS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve Between"),
     (("bpy.types.GPENCIL_OT_dissolve.type:'BETWEEN'",
       "bpy.types.GREASE_PENCIL_OT_dissolve.type:'BETWEEN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve points between selected points"),
     (("bpy.types.GPENCIL_OT_dissolve.type:'BETWEEN'",
       "bpy.types.GREASE_PENCIL_OT_dissolve.type:'BETWEEN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve Unselect"),
     (("bpy.types.GPENCIL_OT_dissolve.type:'UNSELECT'",
       "bpy.types.GREASE_PENCIL_OT_dissolve.type:'UNSELECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve all unselected points"),
     (("bpy.types.GPENCIL_OT_dissolve.type:'UNSELECT'",
       "bpy.types.GREASE_PENCIL_OT_dissolve.type:'UNSELECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Strokes"),
     (('bpy.types.GPENCIL_OT_duplicate',
       'bpy.types.GPENCIL_OT_duplicate_move'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate the selected Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_duplicate',
       'bpy.types.GPENCIL_OT_duplicate_move.GPENCIL_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make copies of the selected Grease Pencil strokes and move them"),
     (('bpy.types.GPENCIL_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Strokes"),
     (('bpy.types.GPENCIL_OT_duplicate_move.GPENCIL_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strokes Edit Mode Toggle"),
     (('bpy.types.GPENCIL_OT_editmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit edit mode for Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_editmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Return to Previous Mode"),
     (('bpy.types.GPENCIL_OT_editmode_toggle.back',
       'bpy.types.GPENCIL_OT_paintmode_toggle.back',
       'bpy.types.GPENCIL_OT_sculptmode_toggle.back',
       'bpy.types.GPENCIL_OT_vertexmode_toggle.back',
       'bpy.types.GPENCIL_OT_weightmode_toggle.back'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Return to previous mode"),
     (('bpy.types.GPENCIL_OT_editmode_toggle.back',
       'bpy.types.GPENCIL_OT_paintmode_toggle.back',
       'bpy.types.GPENCIL_OT_sculptmode_toggle.back',
       'bpy.types.GPENCIL_OT_vertexmode_toggle.back',
       'bpy.types.GPENCIL_OT_weightmode_toggle.back'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extract Palette from Vertex Color"),
     (('bpy.types.GPENCIL_OT_extract_palette_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extract all colors used in Grease Pencil Vertex and create a Palette"),
     (('bpy.types.GPENCIL_OT_extract_palette_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert only selected strokes"),
     (('bpy.types.GPENCIL_OT_extract_palette_vertex.selected',
       'bpy.types.GPENCIL_OT_material_to_vertex_color.selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Duplicate Frames"),
     (('bpy.types.GPENCIL_OT_frame_clean_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove duplicate keyframes"),
     (('bpy.types.GPENCIL_OT_frame_clean_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Frames"),
     (("bpy.types.GPENCIL_OT_frame_clean_duplicate.type:'ALL'",
       "bpy.types.GPENCIL_OT_frame_clean_fill.mode:'ALL'",
       "bpy.types.GPENCIL_OT_layer_duplicate_object.mode:'ALL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Frames"),
     (("bpy.types.GPENCIL_OT_frame_clean_duplicate.type:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Fill Boundaries"),
     (('bpy.types.GPENCIL_OT_frame_clean_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove 'no fill' boundary strokes"),
     (('bpy.types.GPENCIL_OT_frame_clean_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active Frame Only"),
     (("bpy.types.GPENCIL_OT_frame_clean_fill.mode:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clean active frame only"),
     (("bpy.types.GPENCIL_OT_frame_clean_fill.mode:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clean all frames in all layers"),
     (("bpy.types.GPENCIL_OT_frame_clean_fill.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Loose Points"),
     (('bpy.types.GPENCIL_OT_frame_clean_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove loose points"),
     (('bpy.types.GPENCIL_OT_frame_clean_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit"),
     (('bpy.types.GPENCIL_OT_frame_clean_loose.limit',
       'bpy.types.OBJECT_OT_vertex_group_clean.limit',
       'bpy.types.OBJECT_OT_vertex_group_limit_total.limit',
       'bpy.types.UV_OT_stitch.limit'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of points to consider stroke as loose"),
     (('bpy.types.GPENCIL_OT_frame_clean_loose.limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Frame"),
     (('bpy.types.GPENCIL_OT_frame_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of the active Grease Pencil Frame"),
     (('bpy.types.GPENCIL_OT_frame_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate frame in active layer only"),
     (("bpy.types.GPENCIL_OT_frame_duplicate.mode:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate active frames in all layers"),
     (("bpy.types.GPENCIL_OT_frame_duplicate.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Generate Automatic Weights"),
     (('bpy.types.GPENCIL_OT_generate_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate automatic weights for armatures (requires armature modifier)"),
     (('bpy.types.GPENCIL_OT_generate_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Armature to use"),
     (('bpy.types.GPENCIL_OT_generate_weights.armature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decay"),
     (('bpy.types.GPENCIL_OT_generate_weights.decay',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Factor to reduce influence depending of distance to bone axis"),
     (('bpy.types.GPENCIL_OT_generate_weights.decay',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Empty Groups"),
     (("bpy.types.GPENCIL_OT_generate_weights.mode:'NAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatic Weights"),
     (("bpy.types.GPENCIL_OT_generate_weights.mode:'AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ratio between bone length and influence radius"),
     (('bpy.types.GPENCIL_OT_generate_weights.ratio',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate Guide Angle"),
     (('bpy.types.GPENCIL_OT_guide_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate guide angle"),
     (('bpy.types.GPENCIL_OT_guide_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Guide angle"),
     (('bpy.types.GPENCIL_OT_guide_rotate.angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Increment angle"),
     (('bpy.types.GPENCIL_OT_guide_rotate.increment',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Generate Grease Pencil Object using image as source"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate a Grease Pencil Object using Image as source"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate Mask"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil.mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an inverted image for masking using alpha channel"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil.mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Point Size"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil.size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Size used for grease pencil points"),
     (('bpy.types.GPENCIL_OT_image_to_grease_pencil.size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Breakdowns"),
     (('bpy.types.GPENCIL_OT_interpolate_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove breakdown frames generated by interpolating between two Grease Pencil frames"),
     (('bpy.types.GPENCIL_OT_interpolate_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Interpolate Sequence"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate 'in-betweens' to smoothly interpolate between Grease Pencil frames"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Easing"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence.easing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence.easing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Automatic Easing"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.easing:'AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Easing type is chosen automatically based on what the type of interpolation used (e.g. 'Ease In' for transitional types, and 'Ease Out' for dynamic effects)"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.easing:'AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Ease In"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.easing:'EASE_IN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Ease Out"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.easing:'EASE_OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Ease In and Out"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.easing:'EASE_IN_OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of frames between generated interpolated frames"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence.step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Type"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolation method to use the next time 'Interpolate Sequence' is run"),
     (('bpy.types.GPENCIL_OT_interpolate_sequence.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Linear"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'LINEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Custom"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'CUSTOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom interpolation defined using a curve map"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'CUSTOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Sinusoidal"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'SINE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Quadratic"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'QUAD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Cubic"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'CUBIC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Quartic"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'QUART'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Quintic"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'QUINT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Exponential"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'EXPO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Circular"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'CIRC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Back"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'BACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Bounce"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'BOUNCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Elastic"),
     (("bpy.types.GPENCIL_OT_interpolate_sequence.type:'ELASTIC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Active Layer"),
     (('bpy.types.GPENCIL_OT_layer_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active Grease Pencil layer"),
     (('bpy.types.GPENCIL_OT_layer_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Layer"),
     (('bpy.types.GPENCIL_OT_layer_add',
       'bpy.types.GREASE_PENCIL_OT_layer_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new layer or note for the active data-block"),
     (('bpy.types.GPENCIL_OT_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the newly added layer"),
     (('bpy.types.GPENCIL_OT_layer_add.new_layer_name',
       'bpy.types.GPENCIL_OT_move_to_layer.new_layer_name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Annotation Layer"),
     (('bpy.types.GPENCIL_OT_layer_annotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new Annotation layer or note for the active data-block"),
     (('bpy.types.GPENCIL_OT_layer_annotation_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Annotation Layer"),
     (('bpy.types.GPENCIL_OT_layer_annotation_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active Annotation layer up/down in the list"),
     (('bpy.types.GPENCIL_OT_layer_annotation_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Annotation Layer"),
     (('bpy.types.GPENCIL_OT_layer_annotation_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove active Annotation layer"),
     (('bpy.types.GPENCIL_OT_layer_annotation_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Layer"),
     (('bpy.types.GPENCIL_OT_layer_change',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change active Grease Pencil layer"),
     (('bpy.types.GPENCIL_OT_layer_change',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Layer"),
     (('bpy.types.GPENCIL_OT_layer_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of the active Grease Pencil layer"),
     (('bpy.types.GPENCIL_OT_layer_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Data"),
     (("bpy.types.GPENCIL_OT_layer_duplicate.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Empty Keyframes"),
     (("bpy.types.GPENCIL_OT_layer_duplicate.mode:'EMPTY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Layer to New Object"),
     (('bpy.types.GPENCIL_OT_layer_duplicate_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of the active Grease Pencil layer to selected object"),
     (('bpy.types.GPENCIL_OT_layer_duplicate_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("GPencil", "Only Active"),
     (('bpy.types.GPENCIL_OT_layer_duplicate_object.only_active',
       'bpy.types.GPENCIL_OT_materials_copy_to_object.only_active'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy only active Layer, uncheck to append all layers"),
     (('bpy.types.GPENCIL_OT_layer_duplicate_object.only_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Isolate Layer"),
     (('bpy.types.GPENCIL_OT_layer_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle whether the active layer is the only one that can be edited and/or visible"),
     (('bpy.types.GPENCIL_OT_layer_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Affect Visibility"),
     (('bpy.types.GPENCIL_OT_layer_isolate.affect_visibility',
       'bpy.types.GPENCIL_OT_material_isolate.affect_visibility'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "In addition to toggling the editability, also affect the visibility"),
     (('bpy.types.GPENCIL_OT_layer_isolate.affect_visibility',
       'bpy.types.GPENCIL_OT_material_isolate.affect_visibility'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Mask Layer"),
     (('bpy.types.GPENCIL_OT_layer_mask_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new layer as masking"),
     (('bpy.types.GPENCIL_OT_layer_mask_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the layer"),
     (('bpy.types.GPENCIL_OT_layer_mask_add.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Grease Pencil Layer Mask"),
     (('bpy.types.GPENCIL_OT_layer_mask_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active Grease Pencil mask layer up/down in the list"),
     (('bpy.types.GPENCIL_OT_layer_mask_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Mask Layer"),
     (('bpy.types.GPENCIL_OT_layer_mask_remove',
       'bpy.types.MASK_OT_layer_remove'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Layer Mask"),
     (('bpy.types.GPENCIL_OT_layer_mask_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge Down"),
     (('bpy.types.GPENCIL_OT_layer_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Combine Layers"),
     (('bpy.types.GPENCIL_OT_layer_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Combine active layer into the layer below"),
     (("bpy.types.GPENCIL_OT_layer_merge.mode:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Combine all layers into the active layer"),
     (("bpy.types.GPENCIL_OT_layer_merge.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Grease Pencil Layer"),
     (('bpy.types.GPENCIL_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active Grease Pencil layer up/down in the list"),
     (('bpy.types.GPENCIL_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Layer"),
     (('bpy.types.GPENCIL_OT_layer_remove',
       'bpy.types.GREASE_PENCIL_OT_layer_remove'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove active Grease Pencil layer"),
     (('bpy.types.GPENCIL_OT_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Lock All Layers"),
     (('bpy.types.GPENCIL_OT_lock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock all Grease Pencil layers to prevent them from being accidentally modified"),
     (('bpy.types.GPENCIL_OT_lock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable Unused Layer Colors"),
     (('bpy.types.GPENCIL_OT_lock_layer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock and hide any color not used in any layer"),
     (('bpy.types.GPENCIL_OT_lock_layer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hide Material(s)"),
     (('bpy.types.GPENCIL_OT_material_hide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide selected/unselected Grease Pencil materials"),
     (('bpy.types.GPENCIL_OT_material_hide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide unselected rather than selected colors"),
     (('bpy.types.GPENCIL_OT_material_hide.unselected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Isolate Material"),
     (('bpy.types.GPENCIL_OT_material_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle whether the active material is the only one that is editable and/or visible"),
     (('bpy.types.GPENCIL_OT_material_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Lock All Materials"),
     (('bpy.types.GPENCIL_OT_material_lock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock all Grease Pencil materials to prevent them from being accidentally modified"),
     (('bpy.types.GPENCIL_OT_material_lock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Lock Unused Materials"),
     (('bpy.types.GPENCIL_OT_material_lock_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock any material not used in any selected stroke"),
     (('bpy.types.GPENCIL_OT_material_lock_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show All Materials"),
     (('bpy.types.GPENCIL_OT_material_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unhide all hidden Grease Pencil materials"),
     (('bpy.types.GPENCIL_OT_material_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Material"),
     (('bpy.types.GPENCIL_OT_material_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select/Deselect all Grease Pencil strokes using current material"),
     (('bpy.types.GPENCIL_OT_material_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unselect strokes"),
     (('bpy.types.GPENCIL_OT_material_select.deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Material"),
     (('bpy.types.GPENCIL_OT_material_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set active material"),
     (('bpy.types.GPENCIL_OT_material_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Stroke Materials to Vertex Color"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace materials in strokes with Vertex Color"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Palette"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color.palette',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new palette with colors"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color.palette',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Unused Materials"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color.remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove any unused material after the conversion"),
     (('bpy.types.GPENCIL_OT_material_to_vertex_color.remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlock All Materials"),
     (('bpy.types.GPENCIL_OT_material_unlock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlock all Grease Pencil materials so that they can be edited"),
     (('bpy.types.GPENCIL_OT_material_unlock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Materials to Selected Object"),
     (('bpy.types.GPENCIL_OT_materials_copy_to_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append Materials of the active Grease Pencil to other object"),
     (('bpy.types.GPENCIL_OT_materials_copy_to_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append only active material, uncheck to append all materials"),
     (('bpy.types.GPENCIL_OT_materials_copy_to_object.only_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Strokes to Layer"),
     (('bpy.types.GPENCIL_OT_move_to_layer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected strokes to another layer"),
     (('bpy.types.GPENCIL_OT_move_to_layer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strokes Paint Mode Toggle"),
     (('bpy.types.GPENCIL_OT_paintmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit paint mode for Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_paintmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Strokes"),
     (('bpy.types.GPENCIL_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste previously copied strokes to active layer or to original layer"),
     (('bpy.types.GPENCIL_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste on Back"),
     (('bpy.types.GPENCIL_OT_paste.paste_back',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add pasted strokes behind all strokes"),
     (('bpy.types.GPENCIL_OT_paste.paste_back',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste to Active"),
     (("bpy.types.GPENCIL_OT_paste.type:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste by Layer"),
     (("bpy.types.GPENCIL_OT_paste.type:'LAYER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recalculate internal geometry"),
     (('bpy.types.GPENCIL_OT_recalc_geometry',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update all internal geometry data"),
     (('bpy.types.GPENCIL_OT_recalc_geometry',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reproject Strokes"),
     (('bpy.types.GPENCIL_OT_reproject',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the selected strokes from the current viewpoint as if they had been newly drawn (e.g. to fix problems from accidental 3D cursor movement or accidental viewport changes, or for matching deforming geometry)"),
     (('bpy.types.GPENCIL_OT_reproject',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original strokes and create a copy before reprojecting"),
     (('bpy.types.GPENCIL_OT_reproject.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the strokes on to the scene geometry, as if drawn using 'Surface' placement"),
     (("bpy.types.GPENCIL_OT_reproject.type:'SURFACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Fill Transformations"),
     (('bpy.types.GPENCIL_OT_reset_transform_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset any UV transformation and back to default values"),
     (('bpy.types.GPENCIL_OT_reset_transform_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show All Layers"),
     (('bpy.types.GPENCIL_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show all Grease Pencil layers"),
     (('bpy.types.GPENCIL_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strokes Sculpt Mode Toggle"),
     (('bpy.types.GPENCIL_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit sculpt mode for Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Segment"),
     (('bpy.types.GPENCIL_OT_segment_add',
       'bpy.types.GPENCIL_OT_time_segment_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a segment to the dash modifier"),
     (('bpy.types.GPENCIL_OT_segment_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Dash Segment"),
     (('bpy.types.GPENCIL_OT_segment_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active dash segment up or down"),
     (('bpy.types.GPENCIL_OT_segment_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Dash Segment"),
     (('bpy.types.GPENCIL_OT_segment_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active segment from the dash modifier"),
     (('bpy.types.GPENCIL_OT_segment_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of the segment to remove"),
     (('bpy.types.GPENCIL_OT_segment_remove.index',
       'bpy.types.GPENCIL_OT_time_segment_remove.index'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Alternated"),
     (('bpy.types.GPENCIL_OT_select_alternate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select alternative points in same strokes as already selected points"),
     (('bpy.types.GPENCIL_OT_select_alternate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unselect Ends"),
     (('bpy.types.GPENCIL_OT_select_alternate.unselect_ends',
       'bpy.types.GPENCIL_OT_select_random.unselect_ends'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not select the first and last point of the stroke"),
     (('bpy.types.GPENCIL_OT_select_alternate.unselect_ends',
       'bpy.types.GPENCIL_OT_select_random.unselect_ends'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select First"),
     (('bpy.types.GPENCIL_OT_select_first',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select first point in Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_select_first',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extend selection instead of deselecting all other selected points"),
     (('bpy.types.GPENCIL_OT_select_first.extend',
       'bpy.types.GPENCIL_OT_select_last.extend'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Strokes Only"),
     (('bpy.types.GPENCIL_OT_select_first.only_selected_strokes',
       'bpy.types.GPENCIL_OT_select_last.only_selected_strokes'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only select the first point of strokes that already have points selected"),
     (('bpy.types.GPENCIL_OT_select_first.only_selected_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all strokes with similar characteristics"),
     (('bpy.types.GPENCIL_OT_select_grouped',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared layers"),
     (("bpy.types.GPENCIL_OT_select_grouped.type:'LAYER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared materials"),
     (("bpy.types.GPENCIL_OT_select_grouped.type:'MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Last"),
     (('bpy.types.GPENCIL_OT_select_last',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select last point in Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_select_last',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only select the last point of strokes that already have points selected"),
     (('bpy.types.GPENCIL_OT_select_last.only_selected_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shrink sets of selected Grease Pencil points"),
     (('bpy.types.GPENCIL_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all points in same strokes as already selected points"),
     (('bpy.types.GPENCIL_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grow sets of selected Grease Pencil points"),
     (('bpy.types.GPENCIL_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Random"),
     (('bpy.types.GPENCIL_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select random points for non selected strokes"),
     (('bpy.types.GPENCIL_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Vertex Color"),
     (('bpy.types.GPENCIL_OT_select_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all points with similar vertex color of current selected"),
     (('bpy.types.GPENCIL_OT_select_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tolerance of the selection. Higher values select a wider range of similar colors"),
     (('bpy.types.GPENCIL_OT_select_vertex_color.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide/Unhide selected points for Grease Pencil strokes setting alpha factor"),
     (('bpy.types.GPENCIL_OT_selection_opacity_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set active material"),
     (('bpy.types.GPENCIL_OT_set_active_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the selected stroke material as the active material"),
     (('bpy.types.GPENCIL_OT_set_active_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor to Selected Points"),
     (('bpy.types.GPENCIL_OT_snap_cursor_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap cursor to center of selected points"),
     (('bpy.types.GPENCIL_OT_snap_cursor_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Selection to Cursor"),
     (('bpy.types.GPENCIL_OT_snap_to_cursor',
       'bpy.types.VIEW3D_OT_snap_selected_to_cursor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected points/strokes to the cursor"),
     (('bpy.types.GPENCIL_OT_snap_to_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "With Offset"),
     (('bpy.types.GPENCIL_OT_snap_to_cursor.use_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset the entire stroke instead of selected points only"),
     (('bpy.types.GPENCIL_OT_snap_to_cursor.use_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Selection to Grid"),
     (('bpy.types.GPENCIL_OT_snap_to_grid',
       'bpy.types.VIEW3D_OT_snap_selected_to_grid'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected points to the nearest grid points"),
     (('bpy.types.GPENCIL_OT_snap_to_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Stroke Thickness"),
     (('bpy.types.GPENCIL_OT_stroke_apply_thickness',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the thickness change of the layer to its strokes"),
     (('bpy.types.GPENCIL_OT_stroke_apply_thickness',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Arrange Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_arrange',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Arrange selected strokes up/down in the display order of the active layer"),
     (('bpy.types.GPENCIL_OT_stroke_arrange',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bring to Front"),
     (("bpy.types.GPENCIL_OT_stroke_arrange.direction:'TOP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bring Forward"),
     (("bpy.types.GPENCIL_OT_stroke_arrange.direction:'UP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Send Backward"),
     (("bpy.types.GPENCIL_OT_stroke_arrange.direction:'DOWN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Send to Back"),
     (("bpy.types.GPENCIL_OT_stroke_arrange.direction:'BOTTOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Caps Mode"),
     (('bpy.types.GPENCIL_OT_stroke_caps_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change stroke caps mode (rounded or flat)"),
     (('bpy.types.GPENCIL_OT_stroke_caps_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set as default rounded"),
     (("bpy.types.GPENCIL_OT_stroke_caps_set.type:'DEFAULT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Stroke Color"),
     (('bpy.types.GPENCIL_OT_stroke_change_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected strokes to active material"),
     (('bpy.types.GPENCIL_OT_stroke_change_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the material"),
     (('bpy.types.GPENCIL_OT_stroke_change_color.material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Stroke Cutter"),
     (('bpy.types.GPENCIL_OT_stroke_cutter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select section and cut"),
     (('bpy.types.GPENCIL_OT_stroke_cutter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flat Caps"),
     (('bpy.types.GPENCIL_OT_stroke_cutter.flat_caps',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set handle type"),
     (('bpy.types.GPENCIL_OT_stroke_editcurve_set_handle_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the type of an edit curve handle"),
     (('bpy.types.GPENCIL_OT_stroke_editcurve_set_handle_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Enter curve edit mode"),
     (('bpy.types.GPENCIL_OT_stroke_enter_editcurve_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Called to transform a stroke into a curve"),
     (('bpy.types.GPENCIL_OT_stroke_enter_editcurve_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Error Threshold"),
     (('bpy.types.GPENCIL_OT_stroke_enter_editcurve_mode.error_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Threshold on the maximum deviation from the actual stroke"),
     (('bpy.types.GPENCIL_OT_stroke_enter_editcurve_mode.error_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change direction of the points of the selected strokes"),
     (('bpy.types.GPENCIL_OT_stroke_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge Strokes"),
     (('bpy.types.GPENCIL_OT_stroke_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new stroke with the selected stroke points"),
     (('bpy.types.GPENCIL_OT_stroke_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Additive Drawing"),
     (('bpy.types.GPENCIL_OT_stroke_merge.additive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add to previous drawing"),
     (('bpy.types.GPENCIL_OT_stroke_merge.additive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw new stroke below all previous strokes"),
     (('bpy.types.GPENCIL_OT_stroke_merge.back',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve Points"),
     (('bpy.types.GPENCIL_OT_stroke_merge.clear_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve old selected points"),
     (('bpy.types.GPENCIL_OT_stroke_merge.clear_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete Strokes"),
     (('bpy.types.GPENCIL_OT_stroke_merge.clear_stroke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete old selected strokes"),
     (('bpy.types.GPENCIL_OT_stroke_merge.clear_stroke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Close new stroke"),
     (('bpy.types.GPENCIL_OT_stroke_merge.cyclic',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge by Distance"),
     (('bpy.types.GPENCIL_OT_stroke_merge_by_distance',
       'bpy.types.MESH_OT_remove_doubles'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge points by distance"),
     (('bpy.types.GPENCIL_OT_stroke_merge_by_distance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use whole stroke, not only selected points"),
     (('bpy.types.GPENCIL_OT_stroke_merge_by_distance.use_unselected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge Grease Pencil Materials"),
     (('bpy.types.GPENCIL_OT_stroke_merge_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace materials in strokes merging similar"),
     (('bpy.types.GPENCIL_OT_stroke_merge_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hue Threshold"),
     (('bpy.types.GPENCIL_OT_stroke_merge_material.hue_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Saturation Threshold"),
     (('bpy.types.GPENCIL_OT_stroke_merge_material.sat_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value Threshold"),
     (('bpy.types.GPENCIL_OT_stroke_merge_material.val_threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_normalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize stroke attributes"),
     (('bpy.types.GPENCIL_OT_stroke_normalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attribute to be normalized"),
     (('bpy.types.GPENCIL_OT_stroke_normalize.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalizes the stroke thickness by making all points use the same thickness value"),
     (("bpy.types.GPENCIL_OT_stroke_normalize.mode:'THICKNESS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalizes the stroke opacity by making all points use the same opacity value"),
     (("bpy.types.GPENCIL_OT_stroke_normalize.mode:'OPACITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Stroke to Outline"),
     (('bpy.types.GPENCIL_OT_stroke_outline',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to keep global shape when the stroke thickness change"),
     (('bpy.types.GPENCIL_OT_stroke_outline.keep',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Material"),
     (("bpy.types.GPENCIL_OT_stroke_outline.material_mode:'KEEP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep current stroke material"),
     (("bpy.types.GPENCIL_OT_stroke_outline.material_mode:'KEEP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New Material"),
     (("bpy.types.GPENCIL_OT_stroke_outline.material_mode:'NEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Thickness of the stroke perimeter"),
     (('bpy.types.GPENCIL_OT_stroke_outline.thickness',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("View3D", "Side"),
     (("bpy.types.GPENCIL_OT_stroke_outline.view_mode:'SIDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("View3D", "Camera"),
     (("bpy.types.GPENCIL_OT_stroke_outline.view_mode:'CAMERA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Vertex Color"),
     (('bpy.types.GPENCIL_OT_stroke_reset_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset vertex color for all or selected strokes"),
     (('bpy.types.GPENCIL_OT_stroke_reset_vertex_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset Vertex Color to Stroke only"),
     (("bpy.types.GPENCIL_OT_stroke_reset_vertex_color.mode:'STROKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset Vertex Color to Fill only"),
     (("bpy.types.GPENCIL_OT_stroke_reset_vertex_color.mode:'FILL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset Vertex Color to Stroke and Fill"),
     (("bpy.types.GPENCIL_OT_stroke_reset_vertex_color.mode:'BOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sample Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample stroke points to predefined segment length"),
     (('bpy.types.GPENCIL_OT_stroke_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Separate Strokes"),
     (('bpy.types.GPENCIL_OT_stroke_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate the selected strokes or layer in a new grease pencil object"),
     (('bpy.types.GPENCIL_OT_stroke_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Points"),
     (("bpy.types.GPENCIL_OT_stroke_separate.mode:'POINT'",
       'bpy.types.GPENCIL_OT_stroke_smooth.only_selected',
       'bpy.types.GPENCIL_OT_stroke_subdivide.only_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate the selected points"),
     (("bpy.types.GPENCIL_OT_stroke_separate.mode:'POINT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Strokes"),
     (("bpy.types.GPENCIL_OT_stroke_separate.mode:'STROKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate the selected strokes"),
     (("bpy.types.GPENCIL_OT_stroke_separate.mode:'STROKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate the strokes of the current layer"),
     (("bpy.types.GPENCIL_OT_stroke_separate.mode:'LAYER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Simplify Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_simplify',
       'bpy.types.GREASE_PENCIL_OT_stroke_simplify'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify selected strokes, reducing number of points"),
     (('bpy.types.GPENCIL_OT_stroke_simplify',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Simplify Fixed Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_simplify_fixed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify selected strokes, reducing number of points using fixed algorithm"),
     (('bpy.types.GPENCIL_OT_stroke_simplify_fixed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of simplify steps"),
     (('bpy.types.GPENCIL_OT_stroke_simplify_fixed.step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_smooth',
       'bpy.types.GREASE_PENCIL_OT_stroke_smooth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth selected strokes"),
     (('bpy.types.GPENCIL_OT_stroke_smooth',
       'bpy.types.GREASE_PENCIL_OT_stroke_smooth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth only selected points in the stroke"),
     (('bpy.types.GPENCIL_OT_stroke_smooth.only_selected',
       'bpy.types.GPENCIL_OT_stroke_subdivide.only_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split Strokes"),
     (('bpy.types.GPENCIL_OT_stroke_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split selected points as new stroke on same frame"),
     (('bpy.types.GPENCIL_OT_stroke_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Start Point"),
     (('bpy.types.GPENCIL_OT_stroke_start_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set start point for cyclic strokes"),
     (('bpy.types.GPENCIL_OT_stroke_start_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Subdivide Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivide between continuous selected points of the stroke adding a point half way between them"),
     (('bpy.types.GPENCIL_OT_stroke_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Trim Stroke"),
     (('bpy.types.GPENCIL_OT_stroke_trim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trim selected stroke to first loop or intersection"),
     (('bpy.types.GPENCIL_OT_stroke_trim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a segment to the time modifier"),
     (('bpy.types.GPENCIL_OT_time_segment_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Time Segment"),
     (('bpy.types.GPENCIL_OT_time_segment_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active time segment up or down"),
     (('bpy.types.GPENCIL_OT_time_segment_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Time Segment"),
     (('bpy.types.GPENCIL_OT_time_segment_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active segment from the time modifier"),
     (('bpy.types.GPENCIL_OT_time_segment_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Colors"),
     (('bpy.types.GPENCIL_OT_tint_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch tint colors"),
     (('bpy.types.GPENCIL_OT_tint_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Trace Image to Grease Pencil"),
     (('bpy.types.GPENCIL_OT_trace_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extract Grease Pencil strokes from image"),
     (('bpy.types.GPENCIL_OT_trace_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trace Frame"),
     (('bpy.types.GPENCIL_OT_trace_image.frame_number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Used to trace only one frame of the image sequence, set to zero to trace all"),
     (('bpy.types.GPENCIL_OT_trace_image.frame_number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Determines if trace simple image or full sequence"),
     (('bpy.types.GPENCIL_OT_trace_image.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trace the current frame of the image"),
     (("bpy.types.GPENCIL_OT_trace_image.mode:'SINGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trace full sequence"),
     (("bpy.types.GPENCIL_OT_trace_image.mode:'SEQUENCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resolution of the generated curves"),
     (('bpy.types.GPENCIL_OT_trace_image.resolution',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Distance to sample points, zero to disable"),
     (('bpy.types.GPENCIL_OT_trace_image.sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale of the final stroke"),
     (('bpy.types.GPENCIL_OT_trace_image.scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Color Threshold"),
     (('bpy.types.GPENCIL_OT_trace_image.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Determine the lightness threshold above which strokes are generated"),
     (('bpy.types.GPENCIL_OT_trace_image.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn Policy"),
     (('bpy.types.GPENCIL_OT_trace_image.turnpolicy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Determines how to resolve ambiguities during decomposition of bitmaps into paths"),
     (('bpy.types.GPENCIL_OT_trace_image.turnpolicy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prefers to connect black (foreground) components"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'BLACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prefers to connect white (background) components"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'WHITE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always take a left turn"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always take a right turn"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minority"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'MINORITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prefers to connect the color (black or white) that occurs least frequently in the local neighborhood of the current position"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'MINORITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Majority"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'MAJORITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prefers to connect the color (black or white) that occurs most frequently in the local neighborhood of the current position"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'MAJORITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Choose pseudo-randomly"),
     (("bpy.types.GPENCIL_OT_trace_image.turnpolicy:'RANDOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start At Current Frame"),
     (('bpy.types.GPENCIL_OT_trace_image.use_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trace Image starting in current image frame"),
     (('bpy.types.GPENCIL_OT_trace_image.use_current_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlock All Layers"),
     (('bpy.types.GPENCIL_OT_unlock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlock all Grease Pencil layers so that they can be edited"),
     (('bpy.types.GPENCIL_OT_unlock_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Brightness/Contrast"),
     (('bpy.types.GPENCIL_OT_vertex_color_brightness_contrast',
       'bpy.types.PAINT_OT_vertex_color_brightness_contrast'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust vertex color brightness/contrast"),
     (('bpy.types.GPENCIL_OT_vertex_color_brightness_contrast',
       'bpy.types.PAINT_OT_vertex_color_brightness_contrast'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Hue/Saturation/Value"),
     (('bpy.types.GPENCIL_OT_vertex_color_hsv',
       'bpy.types.PAINT_OT_vertex_color_hsv'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust vertex color HSV values"),
     (('bpy.types.GPENCIL_OT_vertex_color_hsv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Invert"),
     (('bpy.types.GPENCIL_OT_vertex_color_invert',
       'bpy.types.PAINT_OT_vertex_color_invert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert RGB values"),
     (('bpy.types.GPENCIL_OT_vertex_color_invert',
       'bpy.types.PAINT_OT_vertex_color_invert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Levels"),
     (('bpy.types.GPENCIL_OT_vertex_color_levels',
       'bpy.types.PAINT_OT_vertex_color_levels'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust levels of vertex colors"),
     (('bpy.types.GPENCIL_OT_vertex_color_levels',
       'bpy.types.PAINT_OT_vertex_color_levels'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value to multiply colors by"),
     (('bpy.types.GPENCIL_OT_vertex_color_levels.gain',
       'bpy.types.PAINT_OT_vertex_color_levels.gain'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value to add to colors"),
     (('bpy.types.GPENCIL_OT_vertex_color_levels.offset',
       'bpy.types.PAINT_OT_vertex_color_levels.offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Set Color"),
     (('bpy.types.GPENCIL_OT_vertex_color_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set active color to all selected vertex"),
     (('bpy.types.GPENCIL_OT_vertex_color_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign to Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_assign',
       'bpy.types.OBJECT_OT_vertex_group_assign'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign the selected vertices to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_assign',
       'bpy.types.OBJECT_OT_vertex_group_assign'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deselect Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_deselect',
       'bpy.types.OBJECT_OT_vertex_group_deselect'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect all selected vertices assigned to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_deselect',
       'bpy.types.OBJECT_OT_vertex_group_deselect'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Invert Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_invert',
       'bpy.types.OBJECT_OT_vertex_group_invert'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert weights to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize',
       'bpy.types.OBJECT_OT_vertex_group_normalize'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize weights to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize All Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize all weights of all vertex groups, so that for each vertex, the sum of all weights is 1.0"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize_all',
       'bpy.types.OBJECT_OT_vertex_group_normalize_all'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Active"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize_all.lock_active',
       'bpy.types.OBJECT_OT_vertex_group_normalize_all.lock_active'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep the values of the active group while normalizing others"),
     (('bpy.types.GPENCIL_OT_vertex_group_normalize_all.lock_active',
       'bpy.types.OBJECT_OT_vertex_group_normalize_all.lock_active'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove from Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_remove_from',
       'bpy.types.OBJECT_OT_vertex_group_remove_from'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected vertices from active or all vertex group(s)"),
     (('bpy.types.GPENCIL_OT_vertex_group_remove_from',
       'bpy.types.OBJECT_OT_vertex_group_remove_from'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_select',
       'bpy.types.OBJECT_OT_vertex_group_select'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all the vertices assigned to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_select',
       'bpy.types.OBJECT_OT_vertex_group_select'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Vertex Group"),
     (('bpy.types.GPENCIL_OT_vertex_group_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth weights to the active vertex group"),
     (('bpy.types.GPENCIL_OT_vertex_group_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strokes Vertex Mode Toggle"),
     (('bpy.types.GPENCIL_OT_vertexmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit vertex paint mode for Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_vertexmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight Paint Sample Weight"),
     (('bpy.types.GPENCIL_OT_weight_sample',
       'bpy.types.PAINT_OT_weight_sample'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the mouse to sample a weight in the 3D view"),
     (('bpy.types.GPENCIL_OT_weight_sample',
       'bpy.types.PAINT_OT_weight_sample'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight Paint Toggle Direction"),
     (('bpy.types.GPENCIL_OT_weight_toggle_direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Add/Subtract for the weight paint draw tool"),
     (('bpy.types.GPENCIL_OT_weight_toggle_direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strokes Weight Mode Toggle"),
     (('bpy.types.GPENCIL_OT_weightmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit weight paint mode for Grease Pencil strokes"),
     (('bpy.types.GPENCIL_OT_weightmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend Offset Keyframes"),
     (('bpy.types.GRAPH_OT_blend_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shift selected keys to the value of the neighboring keys as a block"),
     (('bpy.types.GRAPH_OT_blend_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Control which key to offset towards and how far"),
     (('bpy.types.GRAPH_OT_blend_offset.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend to Default Value"),
     (('bpy.types.GRAPH_OT_blend_to_default',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend selected keys to their default value from their current position"),
     (('bpy.types.GRAPH_OT_blend_to_default',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much to blend to the default value"),
     (('bpy.types.GRAPH_OT_blend_to_default.factor',
       'bpy.types.GRAPH_OT_gaussian_smooth.factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend to Ease Keyframes"),
     (('bpy.types.GRAPH_OT_blend_to_ease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blends keyframes from current state to an ease-in or ease-out curve"),
     (('bpy.types.GRAPH_OT_blend_to_ease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Favor either original data or ease curve"),
     (('bpy.types.GRAPH_OT_blend_to_ease.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend to Neighbor"),
     (('bpy.types.GRAPH_OT_blend_to_neighbor',
       'bpy.types.POSE_OT_blend_to_neighbor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend selected keyframes to their left or right neighbor"),
     (('bpy.types.GRAPH_OT_blend_to_neighbor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The blend factor with 0 being the current frame"),
     (('bpy.types.GRAPH_OT_blend_to_neighbor.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Breakdown"),
     (('bpy.types.GRAPH_OT_breakdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected keyframes to an inbetween position relative to adjacent keys"),
     (('bpy.types.GRAPH_OT_breakdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Favor either the left or the right key"),
     (('bpy.types.GRAPH_OT_breakdown.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Butterworth Smooth"),
     (('bpy.types.GRAPH_OT_butterworth_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth an F-Curve while maintaining the general shape of the curve"),
     (('bpy.types.GRAPH_OT_butterworth_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much to blend to the smoothed curve"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend In/Out"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.blend_in_out',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Linearly blend the smooth data to the border frames of the selection"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.blend_in_out',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frequency Cutoff (Hz)"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.cutoff_frequency',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lower values give a smoother curve"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.cutoff_frequency',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter Order"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.filter_order',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Higher values produce a harder frequency cutoff"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.filter_order',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Samples per Frame"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.samples_per_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How many samples to calculate per frame, helps with subframe data"),
     (('bpy.types.GRAPH_OT_butterworth_smooth.samples_per_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Cursor"),
     (('bpy.types.GRAPH_OT_cursor_set',
       'bpy.types.TEXT_OT_cursor_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively set the current frame and value cursor"),
     (('bpy.types.GRAPH_OT_cursor_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Decimate Keyframes"),
     (('bpy.types.GRAPH_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decimate F-Curves by removing keyframes that influence the curve shape the least"),
     (('bpy.types.GRAPH_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The ratio of remaining keyframes after the operation"),
     (('bpy.types.GRAPH_OT_decimate.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which mode to use for decimation"),
     (('bpy.types.GRAPH_OT_decimate.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use a percentage to specify how many keyframes you want to remove"),
     (("bpy.types.GRAPH_OT_decimate.mode:'RATIO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Error Margin"),
     (("bpy.types.GRAPH_OT_decimate.mode:'ERROR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use an error margin to specify how much the curve is allowed to deviate from the original path"),
     (("bpy.types.GRAPH_OT_decimate.mode:'ERROR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Max Error Margin"),
     (('bpy.types.GRAPH_OT_decimate.remove_error_margin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much the new decimated curve is allowed to deviate from the original"),
     (('bpy.types.GRAPH_OT_decimate.remove_error_margin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Invalid Drivers"),
     (('bpy.types.GRAPH_OT_driver_delete_invalid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all visible drivers considered invalid"),
     (('bpy.types.GRAPH_OT_driver_delete_invalid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Driver Variables"),
     (('bpy.types.GRAPH_OT_driver_variables_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the driver variables of the active driver"),
     (('bpy.types.GRAPH_OT_driver_variables_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Driver Variables"),
     (('bpy.types.GRAPH_OT_driver_variables_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add copied driver variables to the active driver"),
     (('bpy.types.GRAPH_OT_driver_variables_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace Existing"),
     (('bpy.types.GRAPH_OT_driver_variables_paste.replace',
       'bpy.types.GRAPH_OT_fmodifier_paste.replace',
       'bpy.types.NLA_OT_fmodifier_paste.replace'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace existing driver variables, instead of just appending to the end of the existing list"),
     (('bpy.types.GRAPH_OT_driver_variables_paste.replace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Ease Keyframes"),
     (('bpy.types.GRAPH_OT_ease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align keyframes on a ease-in or ease-out curve"),
     (('bpy.types.GRAPH_OT_ease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curve Bend"),
     (('bpy.types.GRAPH_OT_ease.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Control the bend of the curve"),
     (('bpy.types.GRAPH_OT_ease.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Equalize Handles"),
     (('bpy.types.GRAPH_OT_equalize_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ensure selected keyframes' handles have equal length, optionally making them horizontal. Automatic, Automatic Clamped, or Vector handle types will be converted to Aligned"),
     (('bpy.types.GRAPH_OT_equalize_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten"),
     (('bpy.types.GRAPH_OT_equalize_handles.flatten',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make the values of the selected keyframes' handles the same as their respective keyframes"),
     (('bpy.types.GRAPH_OT_equalize_handles.flatten',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Handle Length"),
     (('bpy.types.GRAPH_OT_equalize_handles.handle_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Length to make selected keyframes' bezier handles"),
     (('bpy.types.GRAPH_OT_equalize_handles.handle_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Side of the keyframes' bezier handles to affect"),
     (('bpy.types.GRAPH_OT_equalize_handles.side',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Equalize selected keyframes' left handles"),
     (("bpy.types.GRAPH_OT_equalize_handles.side:'LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Equalize selected keyframes' right handles"),
     (("bpy.types.GRAPH_OT_equalize_handles.side:'RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Equalize both of a keyframe's handles"),
     (("bpy.types.GRAPH_OT_equalize_handles.side:'BOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Euler Discontinuity Filter"),
     (('bpy.types.GRAPH_OT_euler_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fix large jumps and flips in the selected Euler Rotation F-Curves arising from rotation values being clipped when baking physics"),
     (('bpy.types.GRAPH_OT_euler_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy F-Modifiers"),
     (('bpy.types.GRAPH_OT_fmodifier_copy',
       'bpy.types.NLA_OT_fmodifier_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the F-Modifier(s) of the active F-Curve"),
     (('bpy.types.GRAPH_OT_fmodifier_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste F-Modifiers"),
     (('bpy.types.GRAPH_OT_fmodifier_paste',
       'bpy.types.NLA_OT_fmodifier_paste'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add copied F-Modifiers to the selected F-Curves"),
     (('bpy.types.GRAPH_OT_fmodifier_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only paste F-Modifiers on active F-Curve"),
     (('bpy.types.GRAPH_OT_fmodifier_paste.only_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace existing F-Modifiers, instead of just appending to the end of the existing list"),
     (('bpy.types.GRAPH_OT_fmodifier_paste.replace',
       'bpy.types.NLA_OT_fmodifier_paste.replace'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place the cursor on the midpoint of selected keyframes"),
     (('bpy.types.GRAPH_OT_frame_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Gaussian Smooth"),
     (('bpy.types.GRAPH_OT_gaussian_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth the curve using a Gaussian filter"),
     (('bpy.types.GRAPH_OT_gaussian_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How far to each side the operator will average the key values"),
     (('bpy.types.GRAPH_OT_gaussian_smooth.filter_width',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sigma"),
     (('bpy.types.GRAPH_OT_gaussian_smooth.sigma',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The shape of the gaussian distribution, lower values make it sharper"),
     (('bpy.types.GRAPH_OT_gaussian_smooth.sigma',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Ghost Curves"),
     (('bpy.types.GRAPH_OT_ghost_curves_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear F-Curve snapshots (Ghosts) for active Graph Editor"),
     (('bpy.types.GRAPH_OT_ghost_curves_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Ghost Curves"),
     (('bpy.types.GRAPH_OT_ghost_curves_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create snapshot (Ghosts) of selected F-Curves as background aid for active Graph Editor"),
     (('bpy.types.GRAPH_OT_ghost_curves_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe on all visible and editable F-Curves using each curve's current value"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe on selected F-Curves using each curve's current value"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'SEL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Active F-Curve"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe on the active F-Curve using the curve's current value"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active Channels at Cursor"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'CURSOR_ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe for the active F-Curve at the cursor point"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'CURSOR_ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Channels at Cursor"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'CURSOR_SEL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a keyframe for selected F-Curves at the cursor point"),
     (("bpy.types.GRAPH_OT_keyframe_insert.type:'CURSOR_SEL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Keys to Samples"),
     (('bpy.types.GRAPH_OT_keys_to_samples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert selected channels to an uneditable set of samples to save storage space"),
     (('bpy.types.GRAPH_OT_keys_to_samples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Match Slope"),
     (('bpy.types.GRAPH_OT_match_slope',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend selected keys to the slope of neighboring ones"),
     (('bpy.types.GRAPH_OT_match_slope',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Defines which keys to use as slope and how much to blend towards them"),
     (('bpy.types.GRAPH_OT_match_slope.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Values Over Cursor Value"),
     (("bpy.types.GRAPH_OT_mirror.type:'VALUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip values of selected keyframes using the cursor value (Y/Horizontal component) as the mirror line"),
     (("bpy.types.GRAPH_OT_mirror.type:'VALUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Times Over Zero Time"),
     (("bpy.types.GRAPH_OT_mirror.type:'YAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip times of selected keyframes, effectively reversing the order they appear in"),
     (("bpy.types.GRAPH_OT_mirror.type:'YAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Preview Range based on range of selected keyframes"),
     (('bpy.types.GRAPH_OT_previewrange_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Push Pull Keyframes"),
     (('bpy.types.GRAPH_OT_push_pull',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exaggerate or minimize the value of the selected keys"),
     (('bpy.types.GRAPH_OT_push_pull',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Control how far to push or pull the keys"),
     (('bpy.types.GRAPH_OT_push_pull.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reveal Curves"),
     (('bpy.types.GRAPH_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make previously hidden curves visible again in Graph Editor view"),
     (('bpy.types.GRAPH_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Samples to Keys"),
     (('bpy.types.GRAPH_OT_samples_to_keys',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert selected channels from samples to keyframes"),
     (('bpy.types.GRAPH_OT_samples_to_keys',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scale Average Keyframes"),
     (('bpy.types.GRAPH_OT_scale_average',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale selected key values by their combined average"),
     (('bpy.types.GRAPH_OT_scale_average',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale Factor"),
     (('bpy.types.GRAPH_OT_scale_average.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The scale factor applied to the curve segments"),
     (('bpy.types.GRAPH_OT_scale_average.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Key / Handles"),
     (('bpy.types.GRAPH_OT_select_key_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "For selected keyframes, select/deselect any combination of the key itself and its handles"),
     (('bpy.types.GRAPH_OT_select_key_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Effect on the key itself"),
     (('bpy.types.GRAPH_OT_select_key_handles.key_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep"),
     (("bpy.types.GRAPH_OT_select_key_handles.key_action:'KEEP'",
       "bpy.types.GRAPH_OT_select_key_handles.left_handle_action:'KEEP'",
       "bpy.types.GRAPH_OT_select_key_handles.right_handle_action:'KEEP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Leave as is"),
     (("bpy.types.GRAPH_OT_select_key_handles.key_action:'KEEP'",
       "bpy.types.GRAPH_OT_select_key_handles.left_handle_action:'KEEP'",
       "bpy.types.GRAPH_OT_select_key_handles.right_handle_action:'KEEP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Effect on the left handle"),
     (('bpy.types.GRAPH_OT_select_key_handles.left_handle_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Effect on the right handle"),
     (('bpy.types.GRAPH_OT_select_key_handles.right_handle_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shear Keyframes"),
     (('bpy.types.GRAPH_OT_shear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Affect the value of the keys linearly, keeping the same relationship between them using either the left or the right key as reference"),
     (('bpy.types.GRAPH_OT_shear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which end of the segment to use as a reference to shear from"),
     (('bpy.types.GRAPH_OT_shear.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Left"),
     (("bpy.types.GRAPH_OT_shear.direction:'FROM_LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shear the keys using the left key as reference"),
     (("bpy.types.GRAPH_OT_shear.direction:'FROM_LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Right"),
     (("bpy.types.GRAPH_OT_shear.direction:'FROM_RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shear the keys using the right key as reference"),
     (("bpy.types.GRAPH_OT_shear.direction:'FROM_RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shear Factor"),
     (('bpy.types.GRAPH_OT_shear.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The amount of shear to apply"),
     (('bpy.types.GRAPH_OT_shear.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Keys"),
     (('bpy.types.GRAPH_OT_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply weighted moving means to make selected F-Curves less bumpy"),
     (('bpy.types.GRAPH_OT_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected keyframes to the chosen times/values"),
     (('bpy.types.GRAPH_OT_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection to Cursor Value"),
     (("bpy.types.GRAPH_OT_snap.type:'VALUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set values of selected keyframes to the cursor value (Y/Horizontal component)"),
     (("bpy.types.GRAPH_OT_snap.type:'VALUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten Handles"),
     (("bpy.types.GRAPH_OT_snap.type:'HORIZONTAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten handles for a smoother transition"),
     (("bpy.types.GRAPH_OT_snap.type:'HORIZONTAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor Value to Selected"),
     (('bpy.types.GRAPH_OT_snap_cursor_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place the cursor value on the average value of selected keyframes"),
     (('bpy.types.GRAPH_OT_snap_cursor_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sound to Samples"),
     (('bpy.types.GRAPH_OT_sound_to_samples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bakes a sound wave to samples on selected channels"),
     (('bpy.types.GRAPH_OT_sound_to_samples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attack Time"),
     (('bpy.types.GRAPH_OT_sound_to_samples.attack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value for the envelope calculation that tells how fast the envelope can rise (the lower the value the steeper it can rise)"),
     (('bpy.types.GRAPH_OT_sound_to_samples.attack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Highest Frequency"),
     (('bpy.types.GRAPH_OT_sound_to_samples.high',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cutoff frequency of a low-pass filter that is applied to the audio data"),
     (('bpy.types.GRAPH_OT_sound_to_samples.high',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lowest Frequency"),
     (('bpy.types.GRAPH_OT_sound_to_samples.low',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cutoff frequency of a high-pass filter that is applied to the audio data"),
     (('bpy.types.GRAPH_OT_sound_to_samples.low',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Release Time"),
     (('bpy.types.GRAPH_OT_sound_to_samples.release',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value for the envelope calculation that tells how fast the envelope can fall (the lower the value the steeper it can fall)"),
     (('bpy.types.GRAPH_OT_sound_to_samples.release',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Square Threshold"),
     (('bpy.types.GRAPH_OT_sound_to_samples.sthreshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Square only: all values with an absolute amplitude lower than that result in 0"),
     (('bpy.types.GRAPH_OT_sound_to_samples.sthreshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum amplitude value needed to influence the envelope"),
     (('bpy.types.GRAPH_OT_sound_to_samples.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only the positive differences of the envelope amplitudes are summarized to produce the output"),
     (('bpy.types.GRAPH_OT_sound_to_samples.use_accumulate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The amplitudes of the envelope are summarized (or, when Accumulate is enabled, both positive and negative differences are accumulated)"),
     (('bpy.types.GRAPH_OT_sound_to_samples.use_additive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The output is a square curve (negative values always result in -1, and positive ones in 1)"),
     (('bpy.types.GRAPH_OT_sound_to_samples.use_square',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Time Offset Keyframes"),
     (('bpy.types.GRAPH_OT_time_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shifts the value of selected keys in time"),
     (('bpy.types.GRAPH_OT_time_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How far in frames to offset the animation"),
     (('bpy.types.GRAPH_OT_time_offset.frame_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show selected keyframe range"),
     (('bpy.types.GRAPH_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Grease Pencil Draw Mode Toggle"),
     (('bpy.types.GREASE_PENCIL_OT_draw_mode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enter/Exit draw mode for grease pencil"),
     (('bpy.types.GREASE_PENCIL_OT_draw_mode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a blank frame on the current scene frame"),
     (('bpy.types.GREASE_PENCIL_OT_insert_blank_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert a blank frame in all editable layers"),
     (('bpy.types.GREASE_PENCIL_OT_insert_blank_frame.all_layers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new Grease Pencil layer in the active object"),
     (('bpy.types.GREASE_PENCIL_OT_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the new layer"),
     (('bpy.types.GREASE_PENCIL_OT_layer_add.new_layer_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Layer Group"),
     (('bpy.types.GREASE_PENCIL_OT_layer_group_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new Grease Pencil layer group in the active object"),
     (('bpy.types.GREASE_PENCIL_OT_layer_group_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the new layer group"),
     (('bpy.types.GREASE_PENCIL_OT_layer_group_add.new_layer_group_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active Grease Pencil layer"),
     (('bpy.types.GREASE_PENCIL_OT_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reorder Layer"),
     (('bpy.types.GREASE_PENCIL_OT_layer_reorder',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reorder the active Grease Pencil layer"),
     (('bpy.types.GREASE_PENCIL_OT_layer_reorder',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Above"),
     (("bpy.types.GREASE_PENCIL_OT_layer_reorder.location:'ABOVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Below"),
     (("bpy.types.GREASE_PENCIL_OT_layer_reorder.location:'BELOW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target Name"),
     (('bpy.types.GREASE_PENCIL_OT_layer_reorder.target_layer_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the target layer"),
     (('bpy.types.GREASE_PENCIL_OT_layer_reorder.target_layer_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Alternate"),
     (('bpy.types.GREASE_PENCIL_OT_select_alternate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select alternated points in strokes with already selected points"),
     (('bpy.types.GREASE_PENCIL_OT_select_alternate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect Ends"),
     (('bpy.types.GREASE_PENCIL_OT_select_alternate.deselect_ends',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(De)select the first and last point of each stroke"),
     (('bpy.types.GREASE_PENCIL_OT_select_alternate.deselect_ends',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select end points of strokes"),
     (('bpy.types.GREASE_PENCIL_OT_select_ends',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount End"),
     (('bpy.types.GREASE_PENCIL_OT_select_ends.amount_end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of points to select from the end"),
     (('bpy.types.GREASE_PENCIL_OT_select_ends.amount_end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount Start"),
     (('bpy.types.GREASE_PENCIL_OT_select_ends.amount_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of points to select from the start"),
     (('bpy.types.GREASE_PENCIL_OT_select_ends.amount_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selects random points from the current strokes selection"),
     (('bpy.types.GREASE_PENCIL_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the selection mode for Grease Pencil strokes"),
     (('bpy.types.GREASE_PENCIL_OT_set_selection_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify selected strokes"),
     (('bpy.types.GREASE_PENCIL_OT_stroke_simplify',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Endpoints"),
     (('bpy.types.GREASE_PENCIL_OT_stroke_smooth.smooth_ends',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Render Slot"),
     (('bpy.types.IMAGE_OT_add_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new render slot"),
     (('bpy.types.IMAGE_OT_add_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Render Region"),
     (('bpy.types.IMAGE_OT_clear_render_border',
       'bpy.types.VIEW3D_OT_clear_render_border'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the boundaries of the render region and disable render region"),
     (('bpy.types.IMAGE_OT_clear_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Render Slot"),
     (('bpy.types.IMAGE_OT_clear_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the currently selected render slot"),
     (('bpy.types.IMAGE_OT_clear_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Image"),
     (('bpy.types.IMAGE_OT_clipboard_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the image to the clipboard"),
     (('bpy.types.IMAGE_OT_clipboard_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Image"),
     (('bpy.types.IMAGE_OT_clipboard_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste new image from the clipboard"),
     (('bpy.types.IMAGE_OT_clipboard_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Image Edit Externally"),
     (('bpy.types.IMAGE_OT_external_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit image in an external application"),
     (('bpy.types.IMAGE_OT_external_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Browse Image"),
     (('bpy.types.IMAGE_OT_file_browse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open an image file browser, hold Shift to open the file, Alt to browse containing directory"),
     (('bpy.types.IMAGE_OT_file_browse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Image"),
     (('bpy.types.IMAGE_OT_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip the image"),
     (('bpy.types.IMAGE_OT_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip the image horizontally"),
     (('bpy.types.IMAGE_OT_flip.use_flip_x',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip the image vertically"),
     (('bpy.types.IMAGE_OT_flip.use_flip_y',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Invert Channels"),
     (('bpy.types.IMAGE_OT_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert image's channels"),
     (('bpy.types.IMAGE_OT_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert alpha channel"),
     (('bpy.types.IMAGE_OT_invert.invert_a',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert blue channel"),
     (('bpy.types.IMAGE_OT_invert.invert_b',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert green channel"),
     (('bpy.types.IMAGE_OT_invert.invert_g',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert red channel"),
     (('bpy.types.IMAGE_OT_invert.invert_r',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Match Movie Length"),
     (('bpy.types.IMAGE_OT_match_movie_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set image's user's length to the one of this video"),
     (('bpy.types.IMAGE_OT_match_movie_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Image"),
     (('bpy.types.IMAGE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new image"),
     (('bpy.types.IMAGE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an image with an alpha channel"),
     (('bpy.types.IMAGE_OT_new.alpha',
       'bpy.types.IMAGE_OT_tile_add.alpha',
       'bpy.types.IMAGE_OT_tile_fill.alpha',
       'bpy.types.PAINT_OT_add_texture_paint_slot.alpha'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create image with 32-bit floating-point bit depth"),
     (('bpy.types.IMAGE_OT_new.float',
       'bpy.types.IMAGE_OT_tile_add.float',
       'bpy.types.IMAGE_OT_tile_fill.float',
       'bpy.types.PAINT_OT_add_texture_paint_slot.float'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill the image with a grid for UV map testing"),
     (('bpy.types.IMAGE_OT_new.generated_type',
       'bpy.types.IMAGE_OT_tile_add.generated_type',
       'bpy.types.IMAGE_OT_tile_fill.generated_type',
       'bpy.types.PAINT_OT_add_texture_paint_slot.generated_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image height"),
     (('bpy.types.IMAGE_OT_new.height',
       'bpy.types.IMAGE_OT_tile_add.height',
       'bpy.types.IMAGE_OT_tile_fill.height',
       'bpy.types.PAINT_OT_add_texture_paint_slot.height'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image data-block name"),
     (('bpy.types.IMAGE_OT_new.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a tiled image"),
     (('bpy.types.IMAGE_OT_new.tiled',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an image with left and right views"),
     (('bpy.types.IMAGE_OT_new.use_stereo_3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image width"),
     (('bpy.types.IMAGE_OT_new.width',
       'bpy.types.IMAGE_OT_tile_add.width',
       'bpy.types.IMAGE_OT_tile_fill.width',
       'bpy.types.PAINT_OT_add_texture_paint_slot.width'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Image"),
     (('bpy.types.IMAGE_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open image"),
     (('bpy.types.IMAGE_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow the path to contain substitution tokens"),
     (('bpy.types.IMAGE_OT_open.allow_path_tokens',
       'bpy.types.IMAGE_OT_save_as.allow_path_tokens'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detect Sequences"),
     (('bpy.types.IMAGE_OT_open.use_sequence_detection',
       'bpy.types.OBJECT_OT_volume_import.use_sequence_detection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically detect animated sequences in selected images (based on file names)"),
     (('bpy.types.IMAGE_OT_open.use_sequence_detection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detect UDIMs"),
     (('bpy.types.IMAGE_OT_open.use_udim_detecting',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detect selected UDIM files and load all matching tiles"),
     (('bpy.types.IMAGE_OT_open.use_udim_detecting',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pack Image"),
     (('bpy.types.IMAGE_OT_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack an image as embedded data into the .blend file"),
     (('bpy.types.IMAGE_OT_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Project Apply"),
     (('bpy.types.IMAGE_OT_project_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project edited image back onto the object"),
     (('bpy.types.IMAGE_OT_project_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Project Edit"),
     (('bpy.types.IMAGE_OT_project_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit a snapshot of the 3D Viewport in an external image editor"),
     (('bpy.types.IMAGE_OT_project_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Cached Render"),
     (('bpy.types.IMAGE_OT_read_viewlayers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Read all the current scene's view layers from cache, as needed"),
     (('bpy.types.IMAGE_OT_read_viewlayers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Image"),
     (('bpy.types.IMAGE_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload current image from disk"),
     (('bpy.types.IMAGE_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Render Slot"),
     (('bpy.types.IMAGE_OT_remove_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the current render slot"),
     (('bpy.types.IMAGE_OT_remove_render_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Render Region"),
     (('bpy.types.IMAGE_OT_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the boundaries of the render region and enable render region"),
     (('bpy.types.IMAGE_OT_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Replace Image"),
     (('bpy.types.IMAGE_OT_replace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace current image by another one from disk"),
     (('bpy.types.IMAGE_OT_replace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Resize Image"),
     (('bpy.types.IMAGE_OT_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resize the image"),
     (('bpy.types.IMAGE_OT_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sample Color"),
     (('bpy.types.IMAGE_OT_sample',
       'bpy.types.PAINT_OT_sample_color',
       'bpy.types.SCULPT_OT_sample_color',
       'bpy.types.SEQUENCER_OT_sample'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use mouse to sample a color in current image"),
     (('bpy.types.IMAGE_OT_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sample Line"),
     (('bpy.types.IMAGE_OT_sample_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample a line and show it in Scope panels"),
     (('bpy.types.IMAGE_OT_sample_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Image"),
     (('bpy.types.IMAGE_OT_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the image with current name and settings"),
     (('bpy.types.IMAGE_OT_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save All Modified"),
     (('bpy.types.IMAGE_OT_save_all_modified',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save all modified images"),
     (('bpy.types.IMAGE_OT_save_all_modified',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save As Image"),
     (('bpy.types.IMAGE_OT_save_as',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the image with another name and/or settings"),
     (('bpy.types.IMAGE_OT_save_as',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new image file without modifying the current image in Blender"),
     (('bpy.types.IMAGE_OT_save_as.copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save As Render"),
     (('bpy.types.IMAGE_OT_save_as.save_as_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save image with render color management.\nFor display image formats like PNG, apply view and display transform.\nFor intermediate image formats like OpenEXR, use the default render output color space"),
     (('bpy.types.IMAGE_OT_save_as.save_as_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Sequence"),
     (('bpy.types.IMAGE_OT_save_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save a sequence of images"),
     (('bpy.types.IMAGE_OT_save_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Tile"),
     (('bpy.types.IMAGE_OT_tile_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adds a tile to the image"),
     (('bpy.types.IMAGE_OT_tile_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How many tiles to add"),
     (('bpy.types.IMAGE_OT_tile_add.count',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill new tile with a generated image"),
     (('bpy.types.IMAGE_OT_tile_add.fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Optional tile label"),
     (('bpy.types.IMAGE_OT_tile_add.label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UDIM number of the tile"),
     (('bpy.types.IMAGE_OT_tile_add.number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fill Tile"),
     (('bpy.types.IMAGE_OT_tile_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill the current tile with a generated image"),
     (('bpy.types.IMAGE_OT_tile_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Tile"),
     (('bpy.types.IMAGE_OT_tile_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Removes a tile from the image"),
     (('bpy.types.IMAGE_OT_tile_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unpack Image"),
     (('bpy.types.IMAGE_OT_unpack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save an image packed in the .blend file to disk"),
     (('bpy.types.IMAGE_OT_unpack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image Name"),
     (('bpy.types.IMAGE_OT_unpack.id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image data-block name to unpack"),
     (('bpy.types.IMAGE_OT_unpack.id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Local File"),
     (("bpy.types.IMAGE_OT_unpack.method:'USE_LOCAL'",
       "bpy.types.SOUND_OT_unpack.method:'USE_LOCAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write Local File (overwrite existing)"),
     (("bpy.types.IMAGE_OT_unpack.method:'WRITE_LOCAL'",
       "bpy.types.SOUND_OT_unpack.method:'WRITE_LOCAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Original File"),
     (("bpy.types.IMAGE_OT_unpack.method:'USE_ORIGINAL'",
       "bpy.types.SOUND_OT_unpack.method:'USE_ORIGINAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write Original File (overwrite existing)"),
     (("bpy.types.IMAGE_OT_unpack.method:'WRITE_ORIGINAL'",
       "bpy.types.SOUND_OT_unpack.method:'WRITE_ORIGINAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cursor To Center View"),
     (('bpy.types.IMAGE_OT_view_cursor_center',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set 2D Cursor To Center View location"),
     (('bpy.types.IMAGE_OT_view_cursor_center',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Center"),
     (('bpy.types.IMAGE_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View all selected UVs"),
     (('bpy.types.IMAGE_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in/out the image"),
     (('bpy.types.IMAGE_OT_view_zoom',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Zoom to Border"),
     (('bpy.types.IMAGE_OT_view_zoom_border',
       'bpy.types.VIEW2D_OT_zoom_border',
       'bpy.types.VIEW3D_OT_zoom_border'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in the view to the nearest item contained in the border"),
     (('bpy.types.IMAGE_OT_view_zoom_border',
       'bpy.types.VIEW2D_OT_zoom_border'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom Out"),
     (('bpy.types.IMAGE_OT_view_zoom_border.zoom_out',
       'bpy.types.VIEW2D_OT_zoom_border.zoom_out',
       'bpy.types.VIEW3D_OT_zoom_border.zoom_out'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in the image (centered around 2D cursor)"),
     (('bpy.types.IMAGE_OT_view_zoom_in',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom out the image (centered around 2D cursor)"),
     (('bpy.types.IMAGE_OT_view_zoom_out',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import BVH"),
     (('bpy.types.IMPORT_ANIM_OT_bvh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a BVH motion capture file"),
     (('bpy.types.IMPORT_ANIM_OT_bvh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filepath used for importing the file"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.filepath',
       'bpy.types.IMPORT_CURVE_OT_svg.filepath',
       'bpy.types.IMPORT_MESH_OT_stl.filepath',
       'bpy.types.IMPORT_SCENE_OT_fbx.filepath',
       'bpy.types.IMPORT_SCENE_OT_gltf.filepath',
       'bpy.types.IMPORT_SCENE_OT_x3d.filepath'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Starting frame for the animation"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.frame_start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert rotations to quaternions"),
     (("bpy.types.IMPORT_ANIM_OT_bvh.rotate_mode:'QUATERNION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import target type"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update Scene Duration"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.update_scene_duration',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extend the scene's duration to the BVH duration (never shortens the scene)"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.update_scene_duration',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update Scene FPS"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.update_scene_fps',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the scene framerate to that of the BVH file (note that this nullifies the 'Scale FPS' option, as the scale will be 1:1)"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.update_scene_fps',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Loop the animation playback"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.use_cyclic',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale FPS"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.use_fps_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale the framerate from the BVH to the current scenes, otherwise each BVH frame maps directly to a Blender frame"),
     (('bpy.types.IMPORT_ANIM_OT_bvh.use_fps_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import SVG"),
     (('bpy.types.IMPORT_CURVE_OT_svg',
       'bpy.types.WM_OT_gpencil_import_svg'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a SVG file"),
     (('bpy.types.IMPORT_CURVE_OT_svg',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import STL"),
     (('bpy.types.IMPORT_MESH_OT_stl',
       'bpy.types.WM_OT_stl_import'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load STL triangle mesh data"),
     (('bpy.types.IMPORT_MESH_OT_stl',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Facet Normals"),
     (('bpy.types.IMPORT_MESH_OT_stl.use_facet_normal',
       'bpy.types.WM_OT_stl_import.use_facet_normal'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use (import) facet normals (note that this will still give flat shading)"),
     (('bpy.types.IMPORT_MESH_OT_stl.use_facet_normal',
       'bpy.types.WM_OT_stl_import.use_facet_normal'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply current scene's unit (as defined by unit scale) to imported data"),
     (('bpy.types.IMPORT_MESH_OT_stl.use_scene_unit',
       'bpy.types.WM_OT_ply_import.use_scene_unit',
       'bpy.types.WM_OT_stl_import.use_scene_unit'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import FBX"),
     (('bpy.types.IMPORT_SCENE_OT_fbx',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a FBX file"),
     (('bpy.types.IMPORT_SCENE_OT_fbx',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation Offset"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.anim_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset to apply to animation during import, in frames"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.anim_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatic Bone Orientation"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.automatic_bone_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to align the major bone axis with the bone children"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.automatic_bone_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import vertex color attributes"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.colors_type',
       'bpy.types.WM_OT_ply_import.import_colors'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not import color attributes"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.colors_type:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expect file colors in sRGB color space"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.colors_type:'SRGB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expect file colors in linear color space"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.colors_type:'LINEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decal Offset"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.decal_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Displace geometry of alpha meshes"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.decal_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force Connect Children"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.force_connect_children',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force connection of children bones to their parent, even if their computed head/tail positions do not match (can be useful with pure-joints-type armatures)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.force_connect_children',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ignore Leaf Bones"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.ignore_leaf_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ignore the last bone at the end of each chain (used to mark the length of the previous bone)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.ignore_leaf_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import options categories"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.ui_tab',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Main"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.ui_tab:'MAIN'",
       "bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'main'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Main basic settings"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.ui_tab:'MAIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Armature-related settings"),
     (("bpy.types.IMPORT_SCENE_OT_fbx.ui_tab:'ARMATURE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alpha Decals"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_alpha_decals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Treat materials with alpha as decals (no shadow casting)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_alpha_decals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Animation"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import FBX animation"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import custom normals, if available (otherwise Blender will recompute them)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_custom_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import user properties as custom properties"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_custom_props',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Enums As Strings"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_custom_props_enum_as_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store enumeration values as strings"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_custom_props_enum_as_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Image Search"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_image_search',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Search subdirs for any associated images (WARNING: may be slow)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_image_search',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specify orientation and scale, instead of using embedded data in FBX file"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_manual_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Pre/Post Rotation"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_prepost_rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use pre/post rotation from FBX transform (you may have to disable that in some cases)"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_prepost_rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivision Data"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_subsurf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import FBX subdivision information as subdivision surface modifiers"),
     (('bpy.types.IMPORT_SCENE_OT_fbx.use_subsurf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import glTF 2.0"),
     (('bpy.types.IMPORT_SCENE_OT_gltf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a glTF 2.0 file"),
     (('bpy.types.IMPORT_SCENE_OT_gltf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bone Dir"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Heuristic for placing bones. Tries to make bones pretty"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blender (best for import/export round trip)"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'BLENDER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Good for re-importing glTFs exported from Blender, and re-exporting glTFs to glTFs after Blender editing. Bone tips are placed on their local +Y axis (in glTF space)"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'BLENDER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Temperance (average)"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'TEMPERANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decent all-around strategy. A bone with one child has its tip placed on the local axis closest to its child"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'TEMPERANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fortune (may look better, less accurate)"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'FORTUNE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Might look better than Temperance, but also might have errors. A bone with one child has its tip placed at its child's root. Non-uniform scalings may get messed up though, so beware"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.bone_heuristic:'FORTUNE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Guess Original Bind Pose"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.guess_original_bind_pose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to guess the original bind pose for skinned meshes from the inverse bind matrices. When off, use default/rest pose as bind pose"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.guess_original_bind_pose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack Images"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.import_pack_images',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack all images into .blend file"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.import_pack_images',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How normals are computed during import"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.import_shading',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Normal Data"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.import_shading:'NORMALS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flat Shading"),
     (("bpy.types.IMPORT_SCENE_OT_gltf.import_shading:'FLAT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import WebP textures"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.import_webp_texture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If a texture exists in WebP format, loads the WebP texture instead of the fallback PNG/JPEG one"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.import_webp_texture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Log Level"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.loglevel',
       'bpy.types.IMPORT_SCENE_OT_gltf.loglevel'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The glTF format requires discontinuous normals, UVs, and other vertex attributes to be stored as separate vertices, as required for rendering on typical graphics hardware. This option attempts to combine co-located vertices where possible. Currently cannot combine verts with different normals"),
     (('bpy.types.IMPORT_SCENE_OT_gltf.merge_vertices',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import X3D/VRML2"),
     (('bpy.types.IMPORT_SCENE_OT_x3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import an X3D or VRML2 file"),
     (('bpy.types.IMPORT_SCENE_OT_x3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Reports to Clipboard"),
     (('bpy.types.INFO_OT_report_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected reports to clipboard"),
     (('bpy.types.INFO_OT_report_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Reports"),
     (('bpy.types.INFO_OT_report_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected reports"),
     (('bpy.types.INFO_OT_report_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Replay Operators"),
     (('bpy.types.INFO_OT_report_replay',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replay selected reports"),
     (('bpy.types.INFO_OT_report_replay',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Reports Display"),
     (('bpy.types.INFO_OT_reports_display_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update the display of reports in Blender UI (internal use)"),
     (('bpy.types.INFO_OT_reports_display_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip (Distortion Free)"),
     (('bpy.types.LATTICE_OT_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror all control points without inverting the lattice deform"),
     (('bpy.types.LATTICE_OT_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Coordinates along this axis get flipped"),
     (('bpy.types.LATTICE_OT_flip.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "U (X) Axis"),
     (("bpy.types.LATTICE_OT_flip.axis:'U'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "V (Y) Axis"),
     (("bpy.types.LATTICE_OT_flip.axis:'V'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "W (Z) Axis"),
     (("bpy.types.LATTICE_OT_flip.axis:'W'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Regular"),
     (('bpy.types.LATTICE_OT_make_regular',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set UVW control points a uniform distance apart"),
     (('bpy.types.LATTICE_OT_make_regular',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect vertices at the boundary of each selection region"),
     (('bpy.types.LATTICE_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select mirrored lattice points"),
     (('bpy.types.LATTICE_OT_select_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select vertex directly linked to already selected ones"),
     (('bpy.types.LATTICE_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomly select UVW control points"),
     (('bpy.types.LATTICE_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Ungrouped"),
     (('bpy.types.LATTICE_OT_select_ungrouped',
       'bpy.types.MESH_OT_select_ungrouped',
       'bpy.types.PAINT_OT_vert_select_ungrouped'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select vertices without a group"),
     (('bpy.types.LATTICE_OT_select_ungrouped',
       'bpy.types.MESH_OT_select_ungrouped',
       'bpy.types.PAINT_OT_vert_select_ungrouped'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Time Marker"),
     (('bpy.types.MARKER_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new time marker"),
     (('bpy.types.MARKER_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bind Camera to Markers"),
     (('bpy.types.MARKER_OT_camera_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bind the selected camera to a marker on the current frame"),
     (('bpy.types.MARKER_OT_camera_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Time Marker"),
     (('bpy.types.MARKER_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected time marker(s)"),
     (('bpy.types.MARKER_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Markers to Scene"),
     (('bpy.types.MARKER_OT_make_links_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected markers to another scene"),
     (('bpy.types.MARKER_OT_make_links_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rename Marker"),
     (('bpy.types.MARKER_OT_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rename first selected time marker"),
     (('bpy.types.MARKER_OT_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New name for marker"),
     (('bpy.types.MARKER_OT_rename.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Markers Before/After Current Frame"),
     (('bpy.types.MARKER_OT_select_leftright',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select markers on and left/right of the current frame"),
     (('bpy.types.MARKER_OT_select_leftright',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Feather Vertex"),
     (('bpy.types.MASK_OT_add_feather_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add vertex to feather"),
     (('bpy.types.MASK_OT_add_feather_vertex',
       'bpy.types.MASK_OT_add_feather_vertex_slide.MASK_OT_add_feather_vertex'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Feather Vertex and Slide"),
     (('bpy.types.MASK_OT_add_feather_vertex_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new vertex to feather and slide it"),
     (('bpy.types.MASK_OT_add_feather_vertex_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Feather Vertex"),
     (('bpy.types.MASK_OT_add_feather_vertex_slide.MASK_OT_add_feather_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide Point"),
     (('bpy.types.MASK_OT_add_feather_vertex_slide.MASK_OT_slide_point',
       'bpy.types.MASK_OT_add_vertex_slide.MASK_OT_slide_point'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide control points"),
     (('bpy.types.MASK_OT_add_feather_vertex_slide.MASK_OT_slide_point',
       'bpy.types.MASK_OT_add_vertex_slide.MASK_OT_slide_point',
       'bpy.types.MASK_OT_slide_point'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Vertex"),
     (('bpy.types.MASK_OT_add_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add vertex to active spline"),
     (('bpy.types.MASK_OT_add_vertex',
       'bpy.types.MASK_OT_add_vertex_slide.MASK_OT_add_vertex'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Vertex and Slide"),
     (('bpy.types.MASK_OT_add_vertex_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new vertex and slide it"),
     (('bpy.types.MASK_OT_add_vertex_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Vertex"),
     (('bpy.types.MASK_OT_add_vertex_slide.MASK_OT_add_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Splines"),
     (('bpy.types.MASK_OT_copy_splines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected splines to the internal clipboard"),
     (('bpy.types.MASK_OT_copy_splines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle cyclic for selected splines"),
     (('bpy.types.MASK_OT_cyclic_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected control points or splines"),
     (('bpy.types.MASK_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Mask"),
     (('bpy.types.MASK_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected control points and segments between them"),
     (('bpy.types.MASK_OT_duplicate',
       'bpy.types.MASK_OT_duplicate_move.MASK_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate mask and move"),
     (('bpy.types.MASK_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Mask"),
     (('bpy.types.MASK_OT_duplicate_move.MASK_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Feather Weight"),
     (('bpy.types.MASK_OT_feather_weight_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the feather weight to zero"),
     (('bpy.types.MASK_OT_feather_weight_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Restrict View"),
     (('bpy.types.MASK_OT_hide_view_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal temporarily hidden mask layers"),
     (('bpy.types.MASK_OT_hide_view_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Layer"),
     (('bpy.types.MASK_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active layer up/down in the list"),
     (('bpy.types.MASK_OT_layer_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the active layer"),
     (('bpy.types.MASK_OT_layer_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Mask Layer"),
     (('bpy.types.MASK_OT_layer_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new mask layer for masking"),
     (('bpy.types.MASK_OT_layer_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of new mask layer"),
     (('bpy.types.MASK_OT_layer_new.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove mask layer"),
     (('bpy.types.MASK_OT_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Mask"),
     (('bpy.types.MASK_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new mask"),
     (('bpy.types.MASK_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of new mask"),
     (('bpy.types.MASK_OT_new.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the mask's parenting"),
     (('bpy.types.MASK_OT_parent_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the mask's parenting"),
     (('bpy.types.MASK_OT_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Splines"),
     (('bpy.types.MASK_OT_paste_splines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste splines from the internal clipboard"),
     (('bpy.types.MASK_OT_paste_splines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Circle"),
     (('bpy.types.MASK_OT_primitive_circle_add',
       'bpy.types.MESH_OT_primitive_circle_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new circle-shaped spline"),
     (('bpy.types.MASK_OT_primitive_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Location of new circle"),
     (('bpy.types.MASK_OT_primitive_circle_add.location',
       'bpy.types.MASK_OT_primitive_square_add.location'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Size of new circle"),
     (('bpy.types.MASK_OT_primitive_circle_add.size',
       'bpy.types.MASK_OT_primitive_square_add.size'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Square"),
     (('bpy.types.MASK_OT_primitive_square_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new square-shaped spline"),
     (('bpy.types.MASK_OT_primitive_square_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select curve points using circle selection"),
     (('bpy.types.MASK_OT_select_circle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect spline points at the boundary of each selection region"),
     (('bpy.types.MASK_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all curve points linked to already selected ones"),
     (('bpy.types.MASK_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select more spline points connected to initial selection"),
     (('bpy.types.MASK_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Shape Key"),
     (('bpy.types.MASK_OT_shape_key_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove mask shape keyframe for active mask layer at the current frame"),
     (('bpy.types.MASK_OT_shape_key_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Feather Reset Animation"),
     (('bpy.types.MASK_OT_shape_key_feather_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset feather weights on all selected points animation values"),
     (('bpy.types.MASK_OT_shape_key_feather_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Shape Key"),
     (('bpy.types.MASK_OT_shape_key_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert mask shape keyframe for active mask layer at the current frame"),
     (('bpy.types.MASK_OT_shape_key_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Re-Key Points of Selected Shapes"),
     (('bpy.types.MASK_OT_shape_key_rekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate animation data on selected points for frames selected in the dopesheet"),
     (('bpy.types.MASK_OT_shape_key_rekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Slide Point"),
     (('bpy.types.MASK_OT_slide_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide New Point"),
     (('bpy.types.MASK_OT_slide_point.is_new_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Newly created vertex is being slid"),
     (('bpy.types.MASK_OT_slide_point.is_new_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide Feather"),
     (('bpy.types.MASK_OT_slide_point.slide_feather',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "First try to slide feather instead of vertex"),
     (('bpy.types.MASK_OT_slide_point.slide_feather',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Slide Spline Curvature"),
     (('bpy.types.MASK_OT_slide_spline_curvature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide a point on the spline to define its curvature"),
     (('bpy.types.MASK_OT_slide_spline_curvature',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Material"),
     (('bpy.types.MATERIAL_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the material settings and nodes"),
     (('bpy.types.MATERIAL_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Material"),
     (('bpy.types.MATERIAL_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new material"),
     (('bpy.types.MATERIAL_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Material"),
     (('bpy.types.MATERIAL_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste the material settings and nodes"),
     (('bpy.types.MATERIAL_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected metaball element(s)"),
     (('bpy.types.MBALL_OT_delete_metaelems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Metaball Elements"),
     (('bpy.types.MBALL_OT_duplicate_metaelems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected metaball element(s)"),
     (('bpy.types.MBALL_OT_duplicate_metaelems',
       'bpy.types.MBALL_OT_duplicate_move.MBALL_OT_duplicate_metaelems'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make copies of the selected metaball elements and move them"),
     (('bpy.types.MBALL_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Metaball Elements"),
     (('bpy.types.MBALL_OT_duplicate_move.MBALL_OT_duplicate_metaelems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all hidden metaball elements"),
     (('bpy.types.MBALL_OT_reveal_metaelems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomly select metaball elements"),
     (('bpy.types.MBALL_OT_select_random_metaelems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar metaballs by property types"),
     (('bpy.types.MBALL_OT_select_similar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Attribute"),
     (('bpy.types.MESH_OT_attribute_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set values of the active attribute for selected elements"),
     (('bpy.types.MESH_OT_attribute_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Average Normals"),
     (('bpy.types.MESH_OT_average_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Average custom normals of selected vertices"),
     (('bpy.types.MESH_OT_average_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Averaging method"),
     (('bpy.types.MESH_OT_average_normals.average_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Take average of vertex normals"),
     (("bpy.types.MESH_OT_average_normals.average_type:'CUSTOM_NORMAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set all vertex normals by face area"),
     (("bpy.types.MESH_OT_average_normals.average_type:'FACE_AREA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set all vertex normals by corner angle"),
     (("bpy.types.MESH_OT_average_normals.average_type:'CORNER_ANGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weight applied per face"),
     (('bpy.types.MESH_OT_average_normals.weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Beautify Faces"),
     (('bpy.types.MESH_OT_beautify_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rearrange some faces to try to get less degenerated geometry"),
     (('bpy.types.MESH_OT_beautify_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Angle limit"),
     (('bpy.types.MESH_OT_beautify_fill.angle_limit',
       'bpy.types.MESH_OT_dissolve_limited.angle_limit',
       'bpy.types.MESH_OT_vert_connect_nonplanar.angle_limit'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut geometry along a plane (click-drag to define plane)"),
     (('bpy.types.MESH_OT_bisect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Inner"),
     (('bpy.types.MESH_OT_bisect.clear_inner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove geometry behind the plane"),
     (('bpy.types.MESH_OT_bisect.clear_inner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Outer"),
     (('bpy.types.MESH_OT_bisect.clear_outer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove geometry in front of the plane"),
     (('bpy.types.MESH_OT_bisect.clear_outer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Plane Point"),
     (('bpy.types.MESH_OT_bisect.plane_co',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A point on the plane"),
     (('bpy.types.MESH_OT_bisect.plane_co',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Plane Normal"),
     (('bpy.types.MESH_OT_bisect.plane_no',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The direction the plane points"),
     (('bpy.types.MESH_OT_bisect.plane_no',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis Threshold"),
     (('bpy.types.MESH_OT_bisect.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserves the existing geometry along the cut plane"),
     (('bpy.types.MESH_OT_bisect.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill in the cut"),
     (('bpy.types.MESH_OT_bisect.use_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend from Shape"),
     (('bpy.types.MESH_OT_blend_from_shape',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend in shape from a shape key"),
     (('bpy.types.MESH_OT_blend_from_shape',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add rather than blend between shapes"),
     (('bpy.types.MESH_OT_blend_from_shape.add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blending factor"),
     (('bpy.types.MESH_OT_blend_from_shape.blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape key to use for blending"),
     (('bpy.types.MESH_OT_blend_from_shape.shape',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bridge Edge Loops"),
     (('bpy.types.MESH_OT_bridge_edge_loops',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a bridge of faces between two or more selected edge loops"),
     (('bpy.types.MESH_OT_bridge_edge_loops',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolation method"),
     (('bpy.types.MESH_OT_bridge_edge_loops.interpolation',
       'bpy.types.MESH_OT_subdivide_edgering.interpolation'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend Path"),
     (("bpy.types.MESH_OT_bridge_edge_loops.interpolation:'PATH'",
       "bpy.types.MESH_OT_subdivide_edgering.interpolation:'PATH'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend Surface"),
     (("bpy.types.MESH_OT_bridge_edge_loops.interpolation:'SURFACE'",
       "bpy.types.MESH_OT_subdivide_edgering.interpolation:'SURFACE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge Factor"),
     (('bpy.types.MESH_OT_bridge_edge_loops.merge_factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Curve", "Profile Shape"),
     (('bpy.types.MESH_OT_bridge_edge_loops.profile_shape',
       'bpy.types.MESH_OT_subdivide_edgering.profile_shape'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape of the profile"),
     (('bpy.types.MESH_OT_bridge_edge_loops.profile_shape',
       'bpy.types.MESH_OT_subdivide_edgering.profile_shape'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Profile Factor"),
     (('bpy.types.MESH_OT_bridge_edge_loops.profile_shape_factor',
       'bpy.types.MESH_OT_subdivide_edgering.profile_shape_factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much intermediary new edges are shrunk/expanded"),
     (('bpy.types.MESH_OT_bridge_edge_loops.profile_shape_factor',
       'bpy.types.MESH_OT_subdivide_edgering.profile_shape_factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smoothness factor"),
     (('bpy.types.MESH_OT_bridge_edge_loops.smoothness',
       'bpy.types.MESH_OT_loopcut.smoothness',
       'bpy.types.MESH_OT_subdivide.smoothness',
       'bpy.types.MESH_OT_subdivide_edgering.smoothness'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Twist offset for closed loops"),
     (('bpy.types.MESH_OT_bridge_edge_loops.twist_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect Loops"),
     (('bpy.types.MESH_OT_bridge_edge_loops.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method of bridging multiple loops"),
     (('bpy.types.MESH_OT_bridge_edge_loops.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open Loop"),
     (("bpy.types.MESH_OT_bridge_edge_loops.type:'SINGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Closed Loop"),
     (("bpy.types.MESH_OT_bridge_edge_loops.type:'CLOSED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Loop Pairs"),
     (("bpy.types.MESH_OT_bridge_edge_loops.type:'PAIRS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge rather than creating faces"),
     (('bpy.types.MESH_OT_bridge_edge_loops.use_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reverse Colors"),
     (('bpy.types.MESH_OT_colors_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip direction of vertex colors inside faces"),
     (('bpy.types.MESH_OT_colors_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate Colors"),
     (('bpy.types.MESH_OT_colors_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate color attributes inside faces"),
     (('bpy.types.MESH_OT_colors_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Counter Clockwise"),
     (('bpy.types.MESH_OT_colors_rotate.use_ccw',
       'bpy.types.MESH_OT_edge_rotate.use_ccw',
       'bpy.types.MESH_OT_uvs_rotate.use_ccw'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convex Hull"),
     (('bpy.types.MESH_OT_convex_hull',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enclose selected vertices in a convex polyhedron"),
     (('bpy.types.MESH_OT_convex_hull',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete Unused"),
     (('bpy.types.MESH_OT_convex_hull.delete_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected elements that are not used by the hull"),
     (('bpy.types.MESH_OT_convex_hull.delete_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Max Face Angle"),
     (('bpy.types.MESH_OT_convex_hull.face_threshold',
       'bpy.types.MESH_OT_tris_convert_to_quads.face_threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face angle limit"),
     (('bpy.types.MESH_OT_convex_hull.face_threshold',
       'bpy.types.MESH_OT_tris_convert_to_quads.face_threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join Triangles"),
     (('bpy.types.MESH_OT_convex_hull.join_triangles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge adjacent triangles into quads"),
     (('bpy.types.MESH_OT_convex_hull.join_triangles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make Holes"),
     (('bpy.types.MESH_OT_convex_hull.make_holes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected faces that are used by the hull"),
     (('bpy.types.MESH_OT_convex_hull.make_holes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compare Materials"),
     (('bpy.types.MESH_OT_convex_hull.materials',
       'bpy.types.MESH_OT_tris_convert_to_quads.materials'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compare Seam"),
     (('bpy.types.MESH_OT_convex_hull.seam',
       'bpy.types.MESH_OT_tris_convert_to_quads.seam'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Max Shape Angle"),
     (('bpy.types.MESH_OT_convex_hull.shape_threshold',
       'bpy.types.MESH_OT_tris_convert_to_quads.shape_threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape angle limit"),
     (('bpy.types.MESH_OT_convex_hull.shape_threshold',
       'bpy.types.MESH_OT_tris_convert_to_quads.shape_threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compare Sharp"),
     (('bpy.types.MESH_OT_convex_hull.sharp',
       'bpy.types.MESH_OT_tris_convert_to_quads.sharp'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Existing Faces"),
     (('bpy.types.MESH_OT_convex_hull.use_existing_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Skip hull triangles that are covered by a pre-existing face"),
     (('bpy.types.MESH_OT_convex_hull.use_existing_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compare UVs"),
     (('bpy.types.MESH_OT_convex_hull.uvs',
       'bpy.types.MESH_OT_tris_convert_to_quads.uvs'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compare VCols"),
     (('bpy.types.MESH_OT_convex_hull.vcols',
       'bpy.types.MESH_OT_tris_convert_to_quads.vcols'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Custom Split Normals Data"),
     (('bpy.types.MESH_OT_customdata_custom_splitnormals_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a custom split normals layer, if none exists yet"),
     (('bpy.types.MESH_OT_customdata_custom_splitnormals_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Custom Split Normals Data"),
     (('bpy.types.MESH_OT_customdata_custom_splitnormals_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the custom split normals layer, if it exists"),
     (('bpy.types.MESH_OT_customdata_custom_splitnormals_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Sculpt Mask Data"),
     (('bpy.types.MESH_OT_customdata_mask_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear vertex sculpt masking data from the mesh"),
     (('bpy.types.MESH_OT_customdata_mask_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Skin Data"),
     (('bpy.types.MESH_OT_customdata_skin_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a vertex skin layer"),
     (('bpy.types.MESH_OT_customdata_skin_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Skin Data"),
     (('bpy.types.MESH_OT_customdata_skin_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear vertex skin layer"),
     (('bpy.types.MESH_OT_customdata_skin_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Decimate Geometry"),
     (('bpy.types.MESH_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simplify geometry by collapsing edges"),
     (('bpy.types.MESH_OT_decimate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use active vertex group as an influence"),
     (('bpy.types.MESH_OT_decimate.use_vertex_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected vertices, edges or faces"),
     (('bpy.types.MESH_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used for deleting mesh data"),
     (('bpy.types.MESH_OT_delete.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Edge Loop"),
     (('bpy.types.MESH_OT_delete_edgeloop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete an edge loop by merging the faces on each side"),
     (('bpy.types.MESH_OT_delete_edgeloop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Split"),
     (('bpy.types.MESH_OT_delete_edgeloop.use_face_split',
       'bpy.types.MESH_OT_dissolve_edges.use_face_split',
       'bpy.types.MESH_OT_dissolve_mode.use_face_split',
       'bpy.types.MESH_OT_dissolve_verts.use_face_split'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split off face corners to maintain surrounding geometry"),
     (('bpy.types.MESH_OT_delete_edgeloop.use_face_split',
       'bpy.types.MESH_OT_dissolve_edges.use_face_split',
       'bpy.types.MESH_OT_dissolve_mode.use_face_split',
       'bpy.types.MESH_OT_dissolve_verts.use_face_split'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Loose"),
     (('bpy.types.MESH_OT_delete_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete loose vertices, edges or faces"),
     (('bpy.types.MESH_OT_delete_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove loose edges"),
     (('bpy.types.MESH_OT_delete_loose.use_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove loose faces"),
     (('bpy.types.MESH_OT_delete_loose.use_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove loose vertices"),
     (('bpy.types.MESH_OT_delete_loose.use_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Degenerate Dissolve"),
     (('bpy.types.MESH_OT_dissolve_degenerate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve zero area faces and zero length edges"),
     (('bpy.types.MESH_OT_dissolve_degenerate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum distance between elements to merge"),
     (('bpy.types.MESH_OT_dissolve_degenerate.threshold',
       'bpy.types.MESH_OT_remove_doubles.threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve Edges"),
     (('bpy.types.MESH_OT_dissolve_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve edges, merging faces"),
     (('bpy.types.MESH_OT_dissolve_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve Vertices"),
     (('bpy.types.MESH_OT_dissolve_edges.use_verts',
       'bpy.types.MESH_OT_dissolve_faces.use_verts',
       'bpy.types.MESH_OT_dissolve_mode.use_verts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve remaining vertices"),
     (('bpy.types.MESH_OT_dissolve_edges.use_verts',
       'bpy.types.MESH_OT_dissolve_faces.use_verts',
       'bpy.types.MESH_OT_dissolve_mode.use_verts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve Faces"),
     (('bpy.types.MESH_OT_dissolve_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve faces"),
     (('bpy.types.MESH_OT_dissolve_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Limited Dissolve"),
     (('bpy.types.MESH_OT_dissolve_limited',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve selected edges and vertices, limited by the angle of surrounding geometry"),
     (('bpy.types.MESH_OT_dissolve_limited',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delimit dissolve operation"),
     (('bpy.types.MESH_OT_dissolve_limited.delimit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve all vertices in between face boundaries"),
     (('bpy.types.MESH_OT_dissolve_limited.use_dissolve_boundaries',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dissolve Selection"),
     (('bpy.types.MESH_OT_dissolve_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve geometry based on the selection mode"),
     (('bpy.types.MESH_OT_dissolve_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tear Boundary"),
     (('bpy.types.MESH_OT_dissolve_mode.use_boundary_tear',
       'bpy.types.MESH_OT_dissolve_verts.use_boundary_tear'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split off face corners instead of merging faces"),
     (('bpy.types.MESH_OT_dissolve_mode.use_boundary_tear',
       'bpy.types.MESH_OT_dissolve_verts.use_boundary_tear'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dissolve vertices, merge edges and faces"),
     (('bpy.types.MESH_OT_dissolve_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Collapse Edges & Faces"),
     (('bpy.types.MESH_OT_edge_collapse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collapse isolated edge and face regions, merging data such as UVs and color attributes. This can collapse edge-rings as well as regions of connected faces into vertices"),
     (('bpy.types.MESH_OT_edge_collapse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Edge/Face"),
     (('bpy.types.MESH_OT_edge_face_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an edge or face to selected"),
     (('bpy.types.MESH_OT_edge_face_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate Selected Edge"),
     (('bpy.types.MESH_OT_edge_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate selected edge or adjoining faces"),
     (('bpy.types.MESH_OT_edge_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edge Split"),
     (('bpy.types.MESH_OT_edge_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split selected edges so that each neighbor face gets its own copy"),
     (('bpy.types.MESH_OT_edge_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method to use for splitting"),
     (('bpy.types.MESH_OT_edge_split.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Faces by Edges"),
     (("bpy.types.MESH_OT_edge_split.type:'EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split faces along selected edges"),
     (("bpy.types.MESH_OT_edge_split.type:'EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Faces & Edges by Vertices"),
     (("bpy.types.MESH_OT_edge_split.type:'VERT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split faces and edges connected to selected vertices"),
     (("bpy.types.MESH_OT_edge_split.type:'VERT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Sharp Edges"),
     (('bpy.types.MESH_OT_edges_select_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all sharp enough edges"),
     (('bpy.types.MESH_OT_edges_select_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Context"),
     (('bpy.types.MESH_OT_extrude_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Only Edges"),
     (('bpy.types.MESH_OT_extrude_edges_indiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Only Edges and Move"),
     (('bpy.types.MESH_OT_extrude_edges_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude edges and move result"),
     (('bpy.types.MESH_OT_extrude_edges_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Individual Faces"),
     (('bpy.types.MESH_OT_extrude_faces_indiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude region and move result"),
     (('bpy.types.MESH_OT_extrude_region_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Repeat"),
     (('bpy.types.MESH_OT_extrude_repeat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude selected vertices, edges or faces repeatedly"),
     (('bpy.types.MESH_OT_extrude_repeat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset vector"),
     (('bpy.types.MESH_OT_extrude_repeat.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Only Vertices and Move"),
     (('bpy.types.MESH_OT_extrude_vertices_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude vertices and move result"),
     (('bpy.types.MESH_OT_extrude_vertices_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude Only Vertices"),
     (('bpy.types.MESH_OT_extrude_vertices_move.MESH_OT_extrude_verts_indiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude individual vertices only"),
     (('bpy.types.MESH_OT_extrude_vertices_move.MESH_OT_extrude_verts_indiv',
       'bpy.types.MESH_OT_extrude_verts_indiv'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Only Vertices"),
     (('bpy.types.MESH_OT_extrude_verts_indiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Planar Faces"),
     (('bpy.types.MESH_OT_face_make_planar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten selected faces"),
     (('bpy.types.MESH_OT_face_make_planar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Face Set Extract"),
     (('bpy.types.MESH_OT_face_set_extract',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new mesh object from the selected Face Set"),
     (('bpy.types.MESH_OT_face_set_extract',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Boundary Loop"),
     (('bpy.types.MESH_OT_face_set_extract.add_boundary_loop',
       'bpy.types.MESH_OT_paint_mask_extract.add_boundary_loop'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an extra edge loop to better preserve the shape when applying a subdivision surface modifier"),
     (('bpy.types.MESH_OT_face_set_extract.add_boundary_loop',
       'bpy.types.MESH_OT_paint_mask_extract.add_boundary_loop'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extract as Solid"),
     (('bpy.types.MESH_OT_face_set_extract.add_solidify',
       'bpy.types.MESH_OT_paint_mask_extract.add_solidify'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extract the mask as a solid object with a solidify modifier"),
     (('bpy.types.MESH_OT_face_set_extract.add_solidify',
       'bpy.types.MESH_OT_paint_mask_extract.add_solidify'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project to Sculpt"),
     (('bpy.types.MESH_OT_face_set_extract.apply_shrinkwrap',
       'bpy.types.MESH_OT_paint_mask_extract.apply_shrinkwrap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the extracted mesh into the original sculpt"),
     (('bpy.types.MESH_OT_face_set_extract.apply_shrinkwrap',
       'bpy.types.MESH_OT_paint_mask_extract.apply_shrinkwrap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth iterations applied to the extracted mesh"),
     (('bpy.types.MESH_OT_face_set_extract.smooth_iterations',
       'bpy.types.MESH_OT_paint_mask_extract.smooth_iterations'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weld Edges into Faces"),
     (('bpy.types.MESH_OT_face_split_by_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weld loose edges into faces (splitting them into new faces)"),
     (('bpy.types.MESH_OT_face_split_by_edges',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Mirrored UV Coords"),
     (('bpy.types.MESH_OT_faces_mirror_uv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy mirror UV coordinates on the X axis based on a mirrored mesh"),
     (('bpy.types.MESH_OT_faces_mirror_uv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis Direction"),
     (('bpy.types.MESH_OT_faces_mirror_uv.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tolerance for finding vertex duplicates"),
     (('bpy.types.MESH_OT_faces_mirror_uv.precision',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Linked Flat Faces"),
     (('bpy.types.MESH_OT_faces_select_linked_flat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select linked faces by angle"),
     (('bpy.types.MESH_OT_faces_select_linked_flat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display faces flat"),
     (('bpy.types.MESH_OT_faces_shade_flat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display faces smooth (using vertex normals)"),
     (('bpy.types.MESH_OT_faces_shade_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill a selected edge loop with faces"),
     (('bpy.types.MESH_OT_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use best triangulation division"),
     (('bpy.types.MESH_OT_fill.use_beauty',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Grid Fill"),
     (('bpy.types.MESH_OT_fill_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill grid from two loops"),
     (('bpy.types.MESH_OT_fill_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex that is the corner of the grid"),
     (('bpy.types.MESH_OT_fill_grid.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Span"),
     (('bpy.types.MESH_OT_fill_grid.span',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of grid columns"),
     (('bpy.types.MESH_OT_fill_grid.span',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simple Blending"),
     (('bpy.types.MESH_OT_fill_grid.use_interp_simple',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use simple interpolation of grid vertices"),
     (('bpy.types.MESH_OT_fill_grid.use_interp_simple',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fill Holes"),
     (('bpy.types.MESH_OT_fill_holes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill in holes (boundary edge loops)"),
     (('bpy.types.MESH_OT_fill_holes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sides"),
     (('bpy.types.MESH_OT_fill_holes.sides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of sides in hole required to fill (zero fills all holes)"),
     (('bpy.types.MESH_OT_fill_holes.sides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Normals"),
     (('bpy.types.MESH_OT_flip_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip the direction of selected faces' normals (and of their vertices)"),
     (('bpy.types.MESH_OT_flip_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom Normals Only"),
     (('bpy.types.MESH_OT_flip_normals.only_clnors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only flip the custom loop normals of the selected elements"),
     (('bpy.types.MESH_OT_flip_normals.only_clnors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Quad Tessellation"),
     (('bpy.types.MESH_OT_flip_quad_tessellation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flips the tessellation of selected quads"),
     (('bpy.types.MESH_OT_flip_quad_tessellation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Intersect (Knife)"),
     (('bpy.types.MESH_OT_intersect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut an intersection into faces"),
     (('bpy.types.MESH_OT_intersect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Self Intersect"),
     (("bpy.types.MESH_OT_intersect.mode:'SELECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Self intersect selected faces"),
     (("bpy.types.MESH_OT_intersect.mode:'SELECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected/Unselected"),
     (("bpy.types.MESH_OT_intersect.mode:'SELECT_UNSELECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Intersect selected with unselected faces"),
     (("bpy.types.MESH_OT_intersect.mode:'SELECT_UNSELECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate Mode"),
     (('bpy.types.MESH_OT_intersect.separate_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate all geometry from intersections"),
     (("bpy.types.MESH_OT_intersect.separate_mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut into geometry keeping each side separate (Selected/Unselected only)"),
     (("bpy.types.MESH_OT_intersect.separate_mode:'CUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge all geometry from the intersection"),
     (("bpy.types.MESH_OT_intersect.separate_mode:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which Intersect solver to use"),
     (('bpy.types.MESH_OT_intersect.solver',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Faster solver, some limitations"),
     (("bpy.types.MESH_OT_intersect.solver:'FAST'",
       "bpy.types.MESH_OT_intersect_boolean.solver:'FAST'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exact solver, slower, handles more cases"),
     (("bpy.types.MESH_OT_intersect.solver:'EXACT'",
       "bpy.types.MESH_OT_intersect_boolean.solver:'EXACT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Intersect (Boolean)"),
     (('bpy.types.MESH_OT_intersect_boolean',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut solid geometry from selected to unselected"),
     (('bpy.types.MESH_OT_intersect_boolean',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Boolean Operation"),
     (('bpy.types.MESH_OT_intersect_boolean.operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which boolean operation to apply"),
     (('bpy.types.MESH_OT_intersect_boolean.operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which Boolean solver to use"),
     (('bpy.types.MESH_OT_intersect_boolean.solver',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do self-union or self-intersection"),
     (('bpy.types.MESH_OT_intersect_boolean.use_self',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap"),
     (('bpy.types.MESH_OT_intersect_boolean.use_swap',
       'bpy.types.SEQUENCER_OT_change_effect_input.swap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use with difference intersection to swap which side is kept"),
     (('bpy.types.MESH_OT_intersect_boolean.use_swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Knife Project"),
     (('bpy.types.MESH_OT_knife_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use other objects outlines and boundaries to project knife cuts"),
     (('bpy.types.MESH_OT_knife_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut Through"),
     (('bpy.types.MESH_OT_knife_project.cut_through',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut through all faces, not just visible ones"),
     (('bpy.types.MESH_OT_knife_project.cut_through',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multi Select Loops"),
     (('bpy.types.MESH_OT_loop_multi_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select a loop of connected edges by connection type"),
     (('bpy.types.MESH_OT_loop_multi_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ring"),
     (('bpy.types.MESH_OT_loop_multi_select.ring',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Loop Inner-Region"),
     (('bpy.types.MESH_OT_loop_to_region',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select region of faces inside of a selected loop of edges"),
     (('bpy.types.MESH_OT_loop_to_region',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select Bigger"),
     (('bpy.types.MESH_OT_loop_to_region.select_bigger',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select bigger regions instead of smaller ones"),
     (('bpy.types.MESH_OT_loop_to_region.select_bigger',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edge Index"),
     (('bpy.types.MESH_OT_loopcut.edge_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Falloff type of the feather"),
     (('bpy.types.MESH_OT_loopcut.falloff',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Object Index"),
     (('bpy.types.MESH_OT_loopcut.object_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark Freestyle Edge"),
     (('bpy.types.MESH_OT_mark_freestyle_edge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(Un)mark selected edges as Freestyle feature edges"),
     (('bpy.types.MESH_OT_mark_freestyle_edge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark Freestyle Face"),
     (('bpy.types.MESH_OT_mark_freestyle_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(Un)mark selected faces for exclusion from Freestyle feature edge detection"),
     (('bpy.types.MESH_OT_mark_freestyle_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark Seam"),
     (('bpy.types.MESH_OT_mark_seam',
       'bpy.types.UV_OT_mark_seam'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(Un)mark selected edges as a seam"),
     (('bpy.types.MESH_OT_mark_seam',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mark Sharp"),
     (('bpy.types.MESH_OT_mark_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(Un)mark selected edges as sharp"),
     (('bpy.types.MESH_OT_mark_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Consider vertices instead of edges to select which edges to (un)tag as sharp"),
     (('bpy.types.MESH_OT_mark_sharp.use_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge"),
     (('bpy.types.MESH_OT_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge selected vertices"),
     (('bpy.types.MESH_OT_merge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge method to use"),
     (('bpy.types.MESH_OT_merge.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "At Center"),
     (("bpy.types.MESH_OT_merge.type:'CENTER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "At Cursor"),
     (("bpy.types.MESH_OT_merge.type:'CURSOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "At First"),
     (("bpy.types.MESH_OT_merge.type:'FIRST'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "At Last"),
     (("bpy.types.MESH_OT_merge.type:'LAST'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move UVs according to merge"),
     (('bpy.types.MESH_OT_merge.uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge Normals"),
     (('bpy.types.MESH_OT_merge_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge custom normals of selected vertices"),
     (('bpy.types.MESH_OT_merge_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Face Normals Strength"),
     (('bpy.types.MESH_OT_mod_weighted_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set/Get strength of face (used in Weighted Normal modifier)"),
     (('bpy.types.MESH_OT_mod_weighted_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Strength to use for assigning or selecting face influence for weighted normal modifier"),
     (('bpy.types.MESH_OT_mod_weighted_strength.face_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weak"),
     (("bpy.types.MESH_OT_mod_weighted_strength.face_strength:'WEAK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Strong"),
     (("bpy.types.MESH_OT_mod_weighted_strength.face_strength:'STRONG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Value"),
     (('bpy.types.MESH_OT_mod_weighted_strength.set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set value of faces"),
     (('bpy.types.MESH_OT_mod_weighted_strength.set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normals Vector Tools"),
     (('bpy.types.MESH_OT_normals_tools',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom normals tools using Normal Vector of UI"),
     (('bpy.types.MESH_OT_normals_tools',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Absolute Coordinates"),
     (('bpy.types.MESH_OT_normals_tools.absolute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Absolute coordinates or Normal vector"),
     (('bpy.types.MESH_OT_normals_tools.absolute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mode of tools taking input from interface"),
     (('bpy.types.MESH_OT_normals_tools.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Normal"),
     (("bpy.types.MESH_OT_normals_tools.mode:'COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy normal to the internal clipboard"),
     (("bpy.types.MESH_OT_normals_tools.mode:'COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste Normal"),
     (("bpy.types.MESH_OT_normals_tools.mode:'PASTE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste normal from the internal clipboard"),
     (("bpy.types.MESH_OT_normals_tools.mode:'PASTE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Normal"),
     (("bpy.types.MESH_OT_normals_tools.mode:'ADD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add normal vector with selection"),
     (("bpy.types.MESH_OT_normals_tools.mode:'ADD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Multiply Normal"),
     (("bpy.types.MESH_OT_normals_tools.mode:'MULTIPLY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Multiply normal vector with selection"),
     (("bpy.types.MESH_OT_normals_tools.mode:'MULTIPLY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset Normal"),
     (("bpy.types.MESH_OT_normals_tools.mode:'RESET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the internal clipboard and/or normal of selected element"),
     (("bpy.types.MESH_OT_normals_tools.mode:'RESET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Offset Edge Loop"),
     (('bpy.types.MESH_OT_offset_edge_loops',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cap Endpoint"),
     (('bpy.types.MESH_OT_offset_edge_loops.use_cap_endpoint',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extend loop around end-points"),
     (('bpy.types.MESH_OT_offset_edge_loops.use_cap_endpoint',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mask Extract"),
     (('bpy.types.MESH_OT_paint_mask_extract',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new mesh object from the current paint mask"),
     (('bpy.types.MESH_OT_paint_mask_extract',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum mask value to consider the vertex valid to extract a face from the original mesh"),
     (('bpy.types.MESH_OT_paint_mask_extract.mask_threshold',
       'bpy.types.MESH_OT_paint_mask_slice.mask_threshold'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mask Slice"),
     (('bpy.types.MESH_OT_paint_mask_slice',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slices the paint mask from the mesh"),
     (('bpy.types.MESH_OT_paint_mask_slice',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill Holes"),
     (('bpy.types.MESH_OT_paint_mask_slice.fill_holes',
       'bpy.types.UV_OT_minimize_stretch.fill_holes',
       'bpy.types.UV_OT_unwrap.fill_holes'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill holes after slicing the mask"),
     (('bpy.types.MESH_OT_paint_mask_slice.fill_holes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slice to New Object"),
     (('bpy.types.MESH_OT_paint_mask_slice.new_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new object from the sliced mask"),
     (('bpy.types.MESH_OT_paint_mask_slice.new_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Point Normals to Target"),
     (('bpy.types.MESH_OT_point_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Point selected custom normals to specified Target"),
     (('bpy.types.MESH_OT_point_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert affected normals"),
     (('bpy.types.MESH_OT_point_normals.invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to define coordinates to point custom normals to"),
     (('bpy.types.MESH_OT_point_normals.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use static coordinates (defined by various means)"),
     (("bpy.types.MESH_OT_point_normals.mode:'COORDINATES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Follow mouse cursor"),
     (("bpy.types.MESH_OT_point_normals.mode:'MOUSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Spherize"),
     (('bpy.types.MESH_OT_point_normals.spherize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolate between original and new normals"),
     (('bpy.types.MESH_OT_point_normals.spherize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Spherize Strength"),
     (('bpy.types.MESH_OT_point_normals.spherize_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ratio of spherized normal to original normal"),
     (('bpy.types.MESH_OT_point_normals.spherize_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target location to which normals will point"),
     (('bpy.types.MESH_OT_point_normals.target_location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poke Faces"),
     (('bpy.types.MESH_OT_poke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split a face into a fan"),
     (('bpy.types.MESH_OT_poke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Poke Center"),
     (('bpy.types.MESH_OT_poke.center_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Poke face center calculation"),
     (('bpy.types.MESH_OT_poke.center_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weighted Median"),
     (("bpy.types.MESH_OT_poke.center_mode:'MEDIAN_WEIGHTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weighted median face center"),
     (("bpy.types.MESH_OT_poke.center_mode:'MEDIAN_WEIGHTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Median face center"),
     (("bpy.types.MESH_OT_poke.center_mode:'MEDIAN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face bounds center"),
     (("bpy.types.MESH_OT_poke.center_mode:'BOUNDS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Poke Offset"),
     (('bpy.types.MESH_OT_poke.offset',
       'bpy.types.MESH_OT_poke.offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poly Build Delete at Cursor"),
     (('bpy.types.MESH_OT_polybuild_delete_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poly Build Dissolve at Cursor"),
     (('bpy.types.MESH_OT_polybuild_dissolve_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poly Build Face at Cursor"),
     (('bpy.types.MESH_OT_polybuild_face_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Quads"),
     (('bpy.types.MESH_OT_polybuild_face_at_cursor.create_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically split edges in triangles to maintain quad topology"),
     (('bpy.types.MESH_OT_polybuild_face_at_cursor.create_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poly Build Split at Cursor"),
     (('bpy.types.MESH_OT_polybuild_split_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split at Cursor Move"),
     (('bpy.types.MESH_OT_polybuild_split_at_cursor_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Poly Build Split at Cursor"),
     (('bpy.types.MESH_OT_polybuild_split_at_cursor_move.MESH_OT_polybuild_split_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Poly Build Transform at Cursor"),
     (('bpy.types.MESH_OT_polybuild_transform_at_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transform at Cursor Move"),
     (('bpy.types.MESH_OT_polybuild_transform_at_cursor_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a circle mesh"),
     (('bpy.types.MESH_OT_primitive_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate UVs"),
     (('bpy.types.MESH_OT_primitive_circle_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cone_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cube_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.calc_uvs',
       'bpy.types.MESH_OT_primitive_cylinder_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_grid_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_monkey_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_plane_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_torus_add.generate_uvs',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.calc_uvs'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate a default UV map"),
     (('bpy.types.MESH_OT_primitive_circle_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cone_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cube_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo.calc_uvs',
       'bpy.types.MESH_OT_primitive_cylinder_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_grid_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_ico_sphere_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_monkey_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_plane_add.calc_uvs',
       'bpy.types.MESH_OT_primitive_torus_add.generate_uvs',
       'bpy.types.MESH_OT_primitive_uv_sphere_add.calc_uvs'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't fill at all"),
     (("bpy.types.MESH_OT_primitive_circle_add.fill_type:'NOTHING'",
       "bpy.types.MESH_OT_primitive_cone_add.end_fill_type:'NOTHING'",
       "bpy.types.MESH_OT_primitive_cylinder_add.end_fill_type:'NOTHING'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use n-gons"),
     (("bpy.types.MESH_OT_primitive_circle_add.fill_type:'NGON'",
       "bpy.types.MESH_OT_primitive_cone_add.end_fill_type:'NGON'",
       "bpy.types.MESH_OT_primitive_cylinder_add.end_fill_type:'NGON'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Triangle Fan"),
     (("bpy.types.MESH_OT_primitive_circle_add.fill_type:'TRIFAN'",
       "bpy.types.MESH_OT_primitive_cone_add.end_fill_type:'TRIFAN'",
       "bpy.types.MESH_OT_primitive_cylinder_add.end_fill_type:'TRIFAN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use triangle fans"),
     (("bpy.types.MESH_OT_primitive_circle_add.fill_type:'TRIFAN'",
       "bpy.types.MESH_OT_primitive_cone_add.end_fill_type:'TRIFAN'",
       "bpy.types.MESH_OT_primitive_cylinder_add.end_fill_type:'TRIFAN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a conic mesh"),
     (('bpy.types.MESH_OT_primitive_cone_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Base Fill Type"),
     (('bpy.types.MESH_OT_primitive_cone_add.end_fill_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius 1"),
     (('bpy.types.MESH_OT_primitive_cone_add.radius1',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius 2"),
     (('bpy.types.MESH_OT_primitive_cone_add.radius2',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a cube mesh"),
     (('bpy.types.MESH_OT_primitive_cube_add',
       'bpy.types.MESH_OT_primitive_cube_add_gizmo'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a cylinder mesh"),
     (('bpy.types.MESH_OT_primitive_cylinder_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cap Fill Type"),
     (('bpy.types.MESH_OT_primitive_cylinder_add.end_fill_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Grid"),
     (('bpy.types.MESH_OT_primitive_grid_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a grid mesh"),
     (('bpy.types.MESH_OT_primitive_grid_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "X Subdivisions"),
     (('bpy.types.MESH_OT_primitive_grid_add.x_subdivisions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Y Subdivisions"),
     (('bpy.types.MESH_OT_primitive_grid_add.y_subdivisions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct an Icosphere mesh"),
     (('bpy.types.MESH_OT_primitive_ico_sphere_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Monkey"),
     (('bpy.types.MESH_OT_primitive_monkey_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Suzanne mesh"),
     (('bpy.types.MESH_OT_primitive_monkey_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Plane"),
     (('bpy.types.MESH_OT_primitive_plane_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a filled planar mesh with 4 vertices"),
     (('bpy.types.MESH_OT_primitive_plane_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Torus"),
     (('bpy.types.MESH_OT_primitive_torus_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a torus mesh"),
     (('bpy.types.MESH_OT_primitive_torus_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exterior Radius"),
     (('bpy.types.MESH_OT_primitive_torus_add.abso_major_rad',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Total Exterior Radius of the torus"),
     (('bpy.types.MESH_OT_primitive_torus_add.abso_major_rad',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interior Radius"),
     (('bpy.types.MESH_OT_primitive_torus_add.abso_minor_rad',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Total Interior Radius of the torus"),
     (('bpy.types.MESH_OT_primitive_torus_add.abso_minor_rad',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Major Radius"),
     (('bpy.types.MESH_OT_primitive_torus_add.major_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius from the origin to the center of the cross sections"),
     (('bpy.types.MESH_OT_primitive_torus_add.major_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Major Segments"),
     (('bpy.types.MESH_OT_primitive_torus_add.major_segments',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of segments for the main ring of the torus"),
     (('bpy.types.MESH_OT_primitive_torus_add.major_segments',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minor Radius"),
     (('bpy.types.MESH_OT_primitive_torus_add.minor_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius of the torus' cross section"),
     (('bpy.types.MESH_OT_primitive_torus_add.minor_radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minor Segments"),
     (('bpy.types.MESH_OT_primitive_torus_add.minor_segments',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of segments for the minor ring of the torus"),
     (('bpy.types.MESH_OT_primitive_torus_add.minor_segments',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dimensions Mode"),
     (('bpy.types.MESH_OT_primitive_torus_add.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Major/Minor"),
     (("bpy.types.MESH_OT_primitive_torus_add.mode:'MAJOR_MINOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the major/minor radii for torus dimensions"),
     (("bpy.types.MESH_OT_primitive_torus_add.mode:'MAJOR_MINOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exterior/Interior"),
     (("bpy.types.MESH_OT_primitive_torus_add.mode:'EXT_INT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the exterior/interior radii for torus dimensions"),
     (("bpy.types.MESH_OT_primitive_torus_add.mode:'EXT_INT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a UV sphere mesh"),
     (('bpy.types.MESH_OT_primitive_uv_sphere_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Boundary Loop"),
     (('bpy.types.MESH_OT_region_to_loop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select boundary edges around the selected faces"),
     (('bpy.types.MESH_OT_region_to_loop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge vertices based on their proximity"),
     (('bpy.types.MESH_OT_remove_doubles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sharp Edges"),
     (('bpy.types.MESH_OT_remove_doubles.use_sharp_edge_from_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate sharp edges using custom normal data (when available)"),
     (('bpy.types.MESH_OT_remove_doubles.use_sharp_edge_from_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge selected to other unselected vertices"),
     (('bpy.types.MESH_OT_remove_doubles.use_unselected',
       'bpy.types.UV_OT_remove_doubles.use_unselected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all hidden vertices, edges and faces"),
     (('bpy.types.MESH_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Screw"),
     (('bpy.types.MESH_OT_screw',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude selected vertices in screw-shaped rotation around the cursor in indicated viewport"),
     (('bpy.types.MESH_OT_screw',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turns"),
     (('bpy.types.MESH_OT_screw.turns',
       'bpy.types.MESH_OT_screw.turns'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Axis"),
     (('bpy.types.MESH_OT_select_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all data in the mesh on a single axis"),
     (('bpy.types.MESH_OT_select_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the axis to compare each vertex on"),
     (('bpy.types.MESH_OT_select_axis.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis Mode"),
     (('bpy.types.MESH_OT_select_axis.orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis orientation"),
     (('bpy.types.MESH_OT_select_axis.orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis Sign"),
     (('bpy.types.MESH_OT_select_axis.sign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Side to select"),
     (('bpy.types.MESH_OT_select_axis.sign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Positive Axis"),
     (("bpy.types.MESH_OT_select_axis.sign:'POS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Axis"),
     (("bpy.types.MESH_OT_select_axis.sign:'NEG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Aligned Axis"),
     (("bpy.types.MESH_OT_select_axis.sign:'ALIGN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select by Attribute"),
     (('bpy.types.MESH_OT_select_by_attribute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select elements based on the active boolean attribute"),
     (('bpy.types.MESH_OT_select_by_attribute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Faces by Sides"),
     (('bpy.types.MESH_OT_select_face_by_sides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select vertices or faces by the number of face sides"),
     (('bpy.types.MESH_OT_select_face_by_sides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of Vertices"),
     (('bpy.types.MESH_OT_select_face_by_sides.number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of comparison to make"),
     (('bpy.types.MESH_OT_select_face_by_sides.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Not Equal To"),
     (("bpy.types.MESH_OT_select_face_by_sides.type:'NOTEQUAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Interior Faces"),
     (('bpy.types.MESH_OT_select_interior_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select faces where all edges have more than 2 face users"),
     (('bpy.types.MESH_OT_select_interior_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect vertices, edges or faces at the boundary of each selection region"),
     (('bpy.types.MESH_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Step"),
     (('bpy.types.MESH_OT_select_less.use_face_step',
       'bpy.types.MESH_OT_select_more.use_face_step',
       'bpy.types.PAINT_OT_face_select_less.face_step',
       'bpy.types.PAINT_OT_face_select_more.face_step',
       'bpy.types.PAINT_OT_vert_select_less.face_step',
       'bpy.types.PAINT_OT_vert_select_more.face_step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connected faces (instead of edges)"),
     (('bpy.types.MESH_OT_select_less.use_face_step',
       'bpy.types.MESH_OT_select_more.use_face_step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all vertices connected to the current selection"),
     (('bpy.types.MESH_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Loose Geometry"),
     (('bpy.types.MESH_OT_select_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select loose geometry based on the selection mode"),
     (('bpy.types.MESH_OT_select_loose',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select mesh items at mirrored locations"),
     (('bpy.types.MESH_OT_select_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select more vertices, edges or faces connected to initial selection"),
     (('bpy.types.MESH_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Next Element"),
     (('bpy.types.MESH_OT_select_next_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the next element (using selection order)"),
     (('bpy.types.MESH_OT_select_next_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Non-Manifold"),
     (('bpy.types.MESH_OT_select_non_manifold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all non-manifold vertices or edges"),
     (('bpy.types.MESH_OT_select_non_manifold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Boundary edges"),
     (('bpy.types.MESH_OT_select_non_manifold.use_boundary',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Multiple Faces"),
     (('bpy.types.MESH_OT_select_non_manifold.use_multi_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edges shared by more than two faces"),
     (('bpy.types.MESH_OT_select_non_manifold.use_multi_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Non Contiguous"),
     (('bpy.types.MESH_OT_select_non_manifold.use_non_contiguous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edges between faces pointing in alternate directions"),
     (('bpy.types.MESH_OT_select_non_manifold.use_non_contiguous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertices connecting multiple face regions"),
     (('bpy.types.MESH_OT_select_non_manifold.use_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Wire edges"),
     (('bpy.types.MESH_OT_select_non_manifold.use_wire',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect every Nth element starting from the active vertex, edge or face"),
     (('bpy.types.MESH_OT_select_nth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Previous Element"),
     (('bpy.types.MESH_OT_select_prev_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the previous element (using selection order)"),
     (('bpy.types.MESH_OT_select_prev_item',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomly select vertices"),
     (('bpy.types.MESH_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar vertices, edges or faces by property types"),
     (('bpy.types.MESH_OT_select_similar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Type"),
     (('bpy.types.MESH_OT_select_similar.type',
       'bpy.types.UV_OT_select_similar.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Normal"),
     (("bpy.types.MESH_OT_select_similar.type:'VERT_NORMAL'",
       "bpy.types.MESH_OT_select_similar.type:'FACE_NORMAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Amount of Adjacent Faces"),
     (("bpy.types.MESH_OT_select_similar.type:'VERT_FACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Vertex Groups"),
     (("bpy.types.MESH_OT_select_similar.type:'VERT_GROUPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Amount of Connecting Edges"),
     (("bpy.types.MESH_OT_select_similar.type:'VERT_EDGES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Vertex Crease"),
     (("bpy.types.MESH_OT_select_similar.type:'VERT_CREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Length"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_LENGTH'",
       "bpy.types.UV_OT_select_similar.type:'LENGTH'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Direction"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_DIR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Amount of Faces Around an Edge"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_FACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Face Angles"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_FACE_ANGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Crease"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_CREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Bevel"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_BEVEL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Seam"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_SEAM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Sharpness"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_SHARP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Freestyle Edge Marks"),
     (("bpy.types.MESH_OT_select_similar.type:'EDGE_FREESTYLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Material"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_MATERIAL'",
       "bpy.types.UV_OT_select_similar.type:'MATERIAL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Polygon Sides"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_SIDES'",
       "bpy.types.UV_OT_select_similar.type:'SIDES'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Perimeter"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_PERIMETER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Coplanar"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_COPLANAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Flat/Smooth"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Freestyle Face Marks"),
     (("bpy.types.MESH_OT_select_similar.type:'FACE_FREESTYLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Similar Regions"),
     (('bpy.types.MESH_OT_select_similar_region',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar face regions to the current selection"),
     (('bpy.types.MESH_OT_select_similar_region',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate selected geometry into a new mesh"),
     (('bpy.types.MESH_OT_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Material"),
     (("bpy.types.MESH_OT_separate.type:'MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By Loose Parts"),
     (("bpy.types.MESH_OT_separate.type:'LOOSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Normals from Faces"),
     (('bpy.types.MESH_OT_set_normals_from_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the custom normals from the selected faces ones"),
     (('bpy.types.MESH_OT_set_normals_from_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Sharp Edges"),
     (('bpy.types.MESH_OT_set_normals_from_faces.keep_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not set sharp edges to face"),
     (('bpy.types.MESH_OT_set_normals_from_faces.keep_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shape Propagate"),
     (('bpy.types.MESH_OT_shape_propagate_to_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply selected vertex locations to all other shape keys"),
     (('bpy.types.MESH_OT_shape_propagate_to_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Shortest Path"),
     (('bpy.types.MESH_OT_shortest_path_select',
       'bpy.types.UV_OT_shortest_path_select'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected shortest path between two vertices/edges/faces"),
     (('bpy.types.MESH_OT_shortest_path_select',
       'bpy.types.UV_OT_shortest_path_select'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Normals Vectors"),
     (('bpy.types.MESH_OT_smooth_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth custom normals based on adjacent vertex normals"),
     (('bpy.types.MESH_OT_smooth_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specifies weight of smooth vs original normal"),
     (('bpy.types.MESH_OT_smooth_normals.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Solidify"),
     (('bpy.types.MESH_OT_solidify',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a solid skin by extruding, compensating for sharp angles"),
     (('bpy.types.MESH_OT_solidify',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sort Mesh Elements"),
     (('bpy.types.MESH_OT_sort_elements',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The order of selected vertices/edges/faces is modified, based on a given method"),
     (('bpy.types.MESH_OT_sort_elements',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which elements to affect (vertices, edges and/or faces)"),
     (('bpy.types.MESH_OT_sort_elements.elements',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reverse the sorting effect"),
     (('bpy.types.MESH_OT_sort_elements.reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Seed for random-based operations"),
     (('bpy.types.MESH_OT_sort_elements.seed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of reordering operation to apply"),
     (('bpy.types.MESH_OT_sort_elements.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View Z Axis"),
     (("bpy.types.MESH_OT_sort_elements.type:'VIEW_ZAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort selected elements from farthest to nearest one in current view"),
     (("bpy.types.MESH_OT_sort_elements.type:'VIEW_ZAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View X Axis"),
     (("bpy.types.MESH_OT_sort_elements.type:'VIEW_XAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort selected elements from left to right one in current view"),
     (("bpy.types.MESH_OT_sort_elements.type:'VIEW_XAXIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor Distance"),
     (("bpy.types.MESH_OT_sort_elements.type:'CURSOR_DISTANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort selected elements from nearest to farthest from 3D cursor"),
     (("bpy.types.MESH_OT_sort_elements.type:'CURSOR_DISTANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort selected faces from smallest to greatest material index"),
     (("bpy.types.MESH_OT_sort_elements.type:'MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move all selected elements in first places, preserving their relative order.\nWarning: This will affect unselected elements' indices as well"),
     (("bpy.types.MESH_OT_sort_elements.type:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize order of selected elements"),
     (("bpy.types.MESH_OT_sort_elements.type:'RANDOMIZE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reverse current order of selected elements"),
     (("bpy.types.MESH_OT_sort_elements.type:'REVERSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split off selected geometry from connected unselected geometry"),
     (('bpy.types.MESH_OT_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split Normals"),
     (('bpy.types.MESH_OT_split_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split custom normals of selected vertices"),
     (('bpy.types.MESH_OT_split_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivide selected edges"),
     (('bpy.types.MESH_OT_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fractal"),
     (('bpy.types.MESH_OT_subdivide.fractal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fractal randomness factor"),
     (('bpy.types.MESH_OT_subdivide.fractal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Along Normal"),
     (('bpy.types.MESH_OT_subdivide.fractal_along_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply fractal displacement along normal only"),
     (('bpy.types.MESH_OT_subdivide.fractal_along_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create N-Gons"),
     (('bpy.types.MESH_OT_subdivide.ngon',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When disabled, newly created faces are limited to 3 and 4 sided faces"),
     (('bpy.types.MESH_OT_subdivide.ngon',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quad Corner Type"),
     (('bpy.types.MESH_OT_subdivide.quadcorner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to subdivide quad corners (anything other than Straight Cut will prevent n-gons)"),
     (('bpy.types.MESH_OT_subdivide.quadcorner',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Inner Vert"),
     (("bpy.types.MESH_OT_subdivide.quadcorner:'INNERVERT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Straight Cut"),
     (("bpy.types.MESH_OT_subdivide.quadcorner:'STRAIGHT_CUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fan"),
     (("bpy.types.MESH_OT_subdivide.quadcorner:'FAN'",
       "bpy.types.UV_OT_cylinder_project.pole:'FAN'",
       "bpy.types.UV_OT_sphere_project.pole:'FAN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Subdivide Edge-Ring"),
     (('bpy.types.MESH_OT_subdivide_edgering',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivide perpendicular edges to the selected edge-ring"),
     (('bpy.types.MESH_OT_subdivide_edgering',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enforce symmetry (both form and topological) across an axis"),
     (('bpy.types.MESH_OT_symmetrize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which sides to copy from and to"),
     (('bpy.types.MESH_OT_symmetrize.direction',
       'bpy.types.MESH_OT_symmetry_snap.direction'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit for snap middle vertices to the axis center"),
     (('bpy.types.MESH_OT_symmetrize.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap to Symmetry"),
     (('bpy.types.MESH_OT_symmetry_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap vertex pairs to their mirrored locations"),
     (('bpy.types.MESH_OT_symmetry_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mix factor of the locations of the vertices"),
     (('bpy.types.MESH_OT_symmetry_snap.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Distance within which matching vertices are searched"),
     (('bpy.types.MESH_OT_symmetry_snap.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap middle vertices to the axis center"),
     (('bpy.types.MESH_OT_symmetry_snap.use_center',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Tris to Quads"),
     (('bpy.types.MESH_OT_tris_convert_to_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join triangles into quads"),
     (('bpy.types.MESH_OT_tris_convert_to_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Un-Subdivide"),
     (('bpy.types.MESH_OT_unsubdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Un-subdivide selected edges and faces"),
     (('bpy.types.MESH_OT_unsubdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times to un-subdivide"),
     (('bpy.types.MESH_OT_unsubdivide.iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add UV Map"),
     (('bpy.types.MESH_OT_uv_texture_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add UV map"),
     (('bpy.types.MESH_OT_uv_texture_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove UV Map"),
     (('bpy.types.MESH_OT_uv_texture_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove UV map"),
     (('bpy.types.MESH_OT_uv_texture_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reverse UVs"),
     (('bpy.types.MESH_OT_uvs_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip direction of UV coordinates inside faces"),
     (('bpy.types.MESH_OT_uvs_reverse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate UVs"),
     (('bpy.types.MESH_OT_uvs_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate UV coordinates inside faces"),
     (('bpy.types.MESH_OT_uvs_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Connect"),
     (('bpy.types.MESH_OT_vert_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect selected vertices of faces, splitting the face"),
     (('bpy.types.MESH_OT_vert_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split Concave Faces"),
     (('bpy.types.MESH_OT_vert_connect_concave',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make all faces convex"),
     (('bpy.types.MESH_OT_vert_connect_concave',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split Non-Planar Faces"),
     (('bpy.types.MESH_OT_vert_connect_nonplanar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split non-planar faces that exceed the angle threshold"),
     (('bpy.types.MESH_OT_vert_connect_nonplanar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Connect Path"),
     (('bpy.types.MESH_OT_vert_connect_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect vertices by their selection order, creating edges, splitting faces"),
     (('bpy.types.MESH_OT_vert_connect_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Laplacian Smooth Vertices"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Laplacian smooth of selected vertices"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lambda factor"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian.lambda_factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of iterations to smooth the mesh"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian.repeat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth X Axis"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian.use_x',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Y Axis"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian.use_y',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Z Axis"),
     (('bpy.types.MESH_OT_vertices_smooth_laplacian.use_z',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Wireframe"),
     (('bpy.types.MESH_OT_wireframe',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a solid wireframe from faces"),
     (('bpy.types.MESH_OT_wireframe',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Crease Weight"),
     (('bpy.types.MESH_OT_wireframe.crease_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Crease hub edges for an improved subdivision surface"),
     (('bpy.types.MESH_OT_wireframe.use_crease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove original faces"),
     (('bpy.types.MESH_OT_wireframe.use_replace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Push action down onto the top of the NLA stack as a new strip"),
     (('bpy.types.NLA_OT_action_pushdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Channel Index"),
     (('bpy.types.NLA_OT_action_pushdown.channel_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of NLA action channel to perform pushdown operation on"),
     (('bpy.types.NLA_OT_action_pushdown.channel_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sync Action Length"),
     (('bpy.types.NLA_OT_action_sync_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Synchronize the length of the referenced Action with the length used in the strip"),
     (('bpy.types.NLA_OT_action_sync_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active Strip Only"),
     (('bpy.types.NLA_OT_action_sync_length.active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only sync the active length for the active strip"),
     (('bpy.types.NLA_OT_action_sync_length.active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Action Strip"),
     (('bpy.types.NLA_OT_actionclip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an Action-Clip strip (i.e. an NLA Strip referencing an Action) to the active track"),
     (('bpy.types.NLA_OT_actionclip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Scale"),
     (('bpy.types.NLA_OT_apply_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply scaling of selected strips to their referenced Actions"),
     (('bpy.types.NLA_OT_apply_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Action"),
     (('bpy.types.NLA_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake all selected objects location/scale/rotation animation to an action"),
     (('bpy.types.NLA_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which data's transformations to bake"),
     (('bpy.types.NLA_OT_bake.bake_types',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake bones transformations"),
     (("bpy.types.NLA_OT_bake.bake_types:'POSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake object transformations"),
     (("bpy.types.NLA_OT_bake.bake_types:'OBJECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clean Curves"),
     (('bpy.types.NLA_OT_bake.clean_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "After baking curves, remove redundant keys"),
     (('bpy.types.NLA_OT_bake.clean_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Constraints"),
     (('bpy.types.NLA_OT_bake.clear_constraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all constraints from keyed object/bones, and do 'visual' keying"),
     (('bpy.types.NLA_OT_bake.clear_constraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Parents"),
     (('bpy.types.NLA_OT_bake.clear_parents',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake animation onto the object then clear parents (objects only)"),
     (('bpy.types.NLA_OT_bake.clear_parents',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "End frame for baking"),
     (('bpy.types.NLA_OT_bake.frame_end',
       'bpy.types.RIGIDBODY_OT_bake_to_keyframes.frame_end'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start frame for baking"),
     (('bpy.types.NLA_OT_bake.frame_start',
       'bpy.types.RIGIDBODY_OT_bake_to_keyframes.frame_start'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Selected Bones"),
     (('bpy.types.NLA_OT_bake.only_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only key selected bones (Pose baking only)"),
     (('bpy.types.NLA_OT_bake.only_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite Current Action"),
     (('bpy.types.NLA_OT_bake.use_current_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake animation into current action, instead of creating a new one (useful for baking only part of bones in an armature)"),
     (('bpy.types.NLA_OT_bake.use_current_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keyframe from the final transformations (with constraints applied)"),
     (('bpy.types.NLA_OT_bake.visual_keying',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset scaling of selected strips"),
     (('bpy.types.NLA_OT_clear_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Strips"),
     (('bpy.types.NLA_OT_delete',
       'bpy.types.SEQUENCER_OT_delete'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected strips"),
     (('bpy.types.NLA_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Strips"),
     (('bpy.types.NLA_OT_duplicate',
       'bpy.types.SEQUENCER_OT_duplicate',
       'bpy.types.SEQUENCER_OT_duplicate_move'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected NLA-Strips, adding the new strips to new track(s)"),
     (('bpy.types.NLA_OT_duplicate',
       'bpy.types.NLA_OT_duplicate_linked_move.NLA_OT_duplicate',
       'bpy.types.NLA_OT_duplicate_move',
       'bpy.types.NLA_OT_duplicate_move.NLA_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When duplicating strips, assign new copies of the actions they use"),
     (('bpy.types.NLA_OT_duplicate.linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Linked selected NLA-Strips, adding the new strips to new track(s)"),
     (('bpy.types.NLA_OT_duplicate_linked_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Strips"),
     (('bpy.types.NLA_OT_duplicate_linked_move.NLA_OT_duplicate',
       'bpy.types.NLA_OT_duplicate_move.NLA_OT_duplicate',
       'bpy.types.SEQUENCER_OT_duplicate_move.SEQUENCER_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add F-Modifier"),
     (('bpy.types.NLA_OT_fmodifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add F-Modifier to the active/selected NLA-Strips"),
     (('bpy.types.NLA_OT_fmodifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Action", "Only Active"),
     (('bpy.types.NLA_OT_fmodifier_add.only_active',
       'bpy.types.NLA_OT_fmodifier_paste.only_active'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only add a F-Modifier of the specified type to the active strip"),
     (('bpy.types.NLA_OT_fmodifier_add.only_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the F-Modifier(s) of the active NLA-Strip"),
     (('bpy.types.NLA_OT_fmodifier_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add copied F-Modifiers to the selected NLA-Strips"),
     (('bpy.types.NLA_OT_fmodifier_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only paste F-Modifiers on active strip"),
     (('bpy.types.NLA_OT_fmodifier_paste.only_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Single User"),
     (('bpy.types.NLA_OT_make_single_user',
       'bpy.types.OBJECT_OT_make_single_user'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ensure that each action is only used once in the set of strips selected"),
     (('bpy.types.NLA_OT_make_single_user',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Meta-Strips"),
     (('bpy.types.NLA_OT_meta_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new meta-strips incorporating the selected strips"),
     (('bpy.types.NLA_OT_meta_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Meta-Strips"),
     (('bpy.types.NLA_OT_meta_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate out the strips held by the selected meta-strips"),
     (('bpy.types.NLA_OT_meta_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Strips Down"),
     (('bpy.types.NLA_OT_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected strips down a track if there's room"),
     (('bpy.types.NLA_OT_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Strips Up"),
     (('bpy.types.NLA_OT_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected strips up a track if there's room"),
     (('bpy.types.NLA_OT_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Muting"),
     (('bpy.types.NLA_OT_mute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mute or un-mute selected strips"),
     (('bpy.types.NLA_OT_mute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Preview Range based on extends of selected strips"),
     (('bpy.types.NLA_OT_previewrange_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Include Selected Objects"),
     (('bpy.types.NLA_OT_selected_objects_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make selected objects appear in NLA Editor by adding Animation Data"),
     (('bpy.types.NLA_OT_selected_objects_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Strips"),
     (('bpy.types.NLA_OT_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move start of strips to specified time"),
     (('bpy.types.NLA_OT_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Sound Clip"),
     (('bpy.types.NLA_OT_soundclip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a strip for controlling when speaker plays its sound clip"),
     (('bpy.types.NLA_OT_soundclip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split selected strips at their midpoints"),
     (('bpy.types.NLA_OT_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Swap Strips"),
     (('bpy.types.NLA_OT_swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap order of selected strips within tracks"),
     (('bpy.types.NLA_OT_swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Tracks"),
     (('bpy.types.NLA_OT_tracks_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected NLA-Tracks and the strips they contain"),
     (('bpy.types.NLA_OT_tracks_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Transition"),
     (('bpy.types.NLA_OT_transition_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a transition strip between two adjacent selected strips"),
     (('bpy.types.NLA_OT_transition_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show full strips range"),
     (('bpy.types.NLA_OT_view_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset viewable area to show selected strips range"),
     (('bpy.types.NLA_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node Collection"),
     (('bpy.types.NODE_OT_add_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a collection info node to the current node editor"),
     (('bpy.types.NODE_OT_add_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add File Node"),
     (('bpy.types.NODE_OT_add_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a file node to the current node editor"),
     (('bpy.types.NODE_OT_add_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node Group"),
     (('bpy.types.NODE_OT_add_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an existing node group to the current node editor"),
     (('bpy.types.NODE_OT_add_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show the datablock selector in the node"),
     (('bpy.types.NODE_OT_add_group.show_datablock_in_node',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node Group Asset"),
     (('bpy.types.NODE_OT_add_group_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a node group asset to the active node tree"),
     (('bpy.types.NODE_OT_add_group_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Mask Node"),
     (('bpy.types.NODE_OT_add_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a mask node to the current node editor"),
     (('bpy.types.NODE_OT_add_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Material"),
     (('bpy.types.NODE_OT_add_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a material node to the current node editor"),
     (('bpy.types.NODE_OT_add_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node"),
     (('bpy.types.NODE_OT_add_node',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a node to the active tree"),
     (('bpy.types.NODE_OT_add_node',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Settings to be applied on the newly created node"),
     (('bpy.types.NODE_OT_add_node.settings',
       'bpy.types.NODE_OT_add_repeat_zone.settings',
       'bpy.types.NODE_OT_add_simulation_zone.settings'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Node Type"),
     (('bpy.types.NODE_OT_add_node.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Node type"),
     (('bpy.types.NODE_OT_add_node.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start transform operator after inserting the node"),
     (('bpy.types.NODE_OT_add_node.use_transform',
       'bpy.types.NODE_OT_add_repeat_zone.use_transform',
       'bpy.types.NODE_OT_add_simulation_zone.use_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node Object"),
     (('bpy.types.NODE_OT_add_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an object info node to the current node editor"),
     (('bpy.types.NODE_OT_add_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Repeat Zone"),
     (('bpy.types.NODE_OT_add_repeat_zone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a repeat zone that allows executing nodes a dynamic number of times"),
     (('bpy.types.NODE_OT_add_repeat_zone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset of nodes from the cursor when added"),
     (('bpy.types.NODE_OT_add_repeat_zone.offset',
       'bpy.types.NODE_OT_add_simulation_zone.offset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Reroute"),
     (('bpy.types.NODE_OT_add_reroute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a reroute node"),
     (('bpy.types.NODE_OT_add_reroute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Simulation Zone"),
     (('bpy.types.NODE_OT_add_simulation_zone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add simulation zone input and output nodes to the active tree"),
     (('bpy.types.NODE_OT_add_simulation_zone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Attach Nodes"),
     (('bpy.types.NODE_OT_attach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Background Image Fit"),
     (('bpy.types.NODE_OT_backimage_fit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fit the background image to the view"),
     (('bpy.types.NODE_OT_backimage_fit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Background Image Move"),
     (('bpy.types.NODE_OT_backimage_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move node backdrop"),
     (('bpy.types.NODE_OT_backimage_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Backimage Sample"),
     (('bpy.types.NODE_OT_backimage_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use mouse to sample background image"),
     (('bpy.types.NODE_OT_backimage_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Viewer Region"),
     (('bpy.types.NODE_OT_clear_viewer_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the boundaries for viewer operations"),
     (('bpy.types.NODE_OT_clear_viewer_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected nodes to the internal clipboard"),
     (('bpy.types.NODE_OT_clipboard_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste nodes from the internal clipboard to the active node tree"),
     (('bpy.types.NODE_OT_clipboard_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The 2D view location for the center of the new nodes, or unchanged if not set"),
     (('bpy.types.NODE_OT_clipboard_paste.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Collapse and Hide Unused Sockets"),
     (('bpy.types.NODE_OT_collapse_hide_unused_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle collapsed nodes and hide unused sockets"),
     (('bpy.types.NODE_OT_collapse_hide_unused_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Cryptomatte Socket"),
     (('bpy.types.NODE_OT_cryptomatte_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new input layer to a Cryptomatte node"),
     (('bpy.types.NODE_OT_cryptomatte_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Cryptomatte Socket"),
     (('bpy.types.NODE_OT_cryptomatte_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove layer from a Cryptomatte node"),
     (('bpy.types.NODE_OT_cryptomatte_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deactivate Viewer Node"),
     (('bpy.types.NODE_OT_deactivate_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deactivate selected viewer node in geometry nodes"),
     (('bpy.types.NODE_OT_deactivate_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected nodes"),
     (('bpy.types.NODE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete with Reconnect"),
     (('bpy.types.NODE_OT_delete_reconnect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove nodes and reconnect nodes as if deletion was muted"),
     (('bpy.types.NODE_OT_delete_reconnect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Detach Nodes"),
     (('bpy.types.NODE_OT_detach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detach selected nodes from parents"),
     (('bpy.types.NODE_OT_detach',
       'bpy.types.NODE_OT_detach_translate_attach.NODE_OT_detach'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Detach and Move"),
     (('bpy.types.NODE_OT_detach_translate_attach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detach nodes, move and attach to frame"),
     (('bpy.types.NODE_OT_detach_translate_attach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detach Nodes"),
     (('bpy.types.NODE_OT_detach_translate_attach.NODE_OT_detach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Nodes"),
     (('bpy.types.NODE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Inputs"),
     (('bpy.types.NODE_OT_duplicate.keep_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep the input links to duplicated nodes"),
     (('bpy.types.NODE_OT_duplicate.keep_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate node but not node trees, linking to the original data"),
     (('bpy.types.NODE_OT_duplicate.linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Find Node"),
     (('bpy.types.NODE_OT_find_node',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Search for a node by name and focus and select it"),
     (('bpy.types.NODE_OT_find_node',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "glTF Material Output"),
     (('bpy.types.NODE_OT_gltf_settings_node_operator',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a node to the active tree for glTF export"),
     (('bpy.types.NODE_OT_gltf_settings_node_operator',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Group Insert"),
     (('bpy.types.NODE_OT_group_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert selected nodes into a node group"),
     (('bpy.types.NODE_OT_group_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Group"),
     (('bpy.types.NODE_OT_group_make',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make group from selected nodes"),
     (('bpy.types.NODE_OT_group_make',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate selected nodes from the node group"),
     (('bpy.types.NODE_OT_group_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy to parent node tree, keep group intact"),
     (("bpy.types.NODE_OT_group_separate.type:'COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move to parent node tree, remove from group"),
     (("bpy.types.NODE_OT_group_separate.type:'MOVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Ungroup"),
     (('bpy.types.NODE_OT_group_ungroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ungroup selected nodes"),
     (('bpy.types.NODE_OT_group_ungroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Hidden Node Sockets"),
     (('bpy.types.NODE_OT_hide_socket_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle unused node socket display"),
     (('bpy.types.NODE_OT_hide_socket_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hide"),
     (('bpy.types.NODE_OT_hide_toggle',
       'bpy.types.OUTLINER_OT_hide'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle hiding of selected nodes"),
     (('bpy.types.NODE_OT_hide_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Offset"),
     (('bpy.types.NODE_OT_insert_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically offset nodes on insertion"),
     (('bpy.types.NODE_OT_insert_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Item"),
     (('bpy.types.NODE_OT_interface_item_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a copy of the active item to the interface"),
     (('bpy.types.NODE_OT_interface_item_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Item"),
     (('bpy.types.NODE_OT_interface_item_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new item to the interface"),
     (('bpy.types.NODE_OT_interface_item_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of the item to create"),
     (('bpy.types.NODE_OT_interface_item_new.item_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Item"),
     (('bpy.types.NODE_OT_interface_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove active item from the interface"),
     (('bpy.types.NODE_OT_interface_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join Nodes"),
     (('bpy.types.NODE_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attach selected nodes to a new common frame"),
     (('bpy.types.NODE_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link to Viewer Node"),
     (('bpy.types.NODE_OT_link_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link to viewer node"),
     (('bpy.types.NODE_OT_link_viewer',
       'bpy.types.NODE_OT_select_link_viewer.NODE_OT_link_viewer'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cut Links"),
     (('bpy.types.NODE_OT_links_cut',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the mouse to cut (remove) some links"),
     (('bpy.types.NODE_OT_links_cut',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Detach Links"),
     (('bpy.types.NODE_OT_links_detach',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mute Links"),
     (('bpy.types.NODE_OT_links_mute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the mouse to mute links"),
     (('bpy.types.NODE_OT_links_mute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Node Mute"),
     (('bpy.types.NODE_OT_mute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle muting of selected nodes"),
     (('bpy.types.NODE_OT_mute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign New Geometry Node Group"),
     (('bpy.types.NODE_OT_new_geometry_node_group_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new geometry node group and assign it to the active modifier"),
     (('bpy.types.NODE_OT_new_geometry_node_group_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Geometry Node Tool Group"),
     (('bpy.types.NODE_OT_new_geometry_node_group_tool',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new geometry node group for a tool"),
     (('bpy.types.NODE_OT_new_geometry_node_group_tool',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Geometry Node Modifier"),
     (('bpy.types.NODE_OT_new_geometry_nodes_modifier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new modifier with a new geometry node group"),
     (('bpy.types.NODE_OT_new_geometry_nodes_modifier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Node Tree"),
     (('bpy.types.NODE_OT_new_node_tree',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new node tree"),
     (('bpy.types.NODE_OT_new_node_tree',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Node Color Preset"),
     (('bpy.types.NODE_OT_node_color_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Node Color Preset"),
     (('bpy.types.NODE_OT_node_color_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy color to all selected nodes"),
     (('bpy.types.NODE_OT_node_copy_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Node Options"),
     (('bpy.types.NODE_OT_options_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle option buttons display for selected nodes"),
     (('bpy.types.NODE_OT_options_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add File Node Socket"),
     (('bpy.types.NODE_OT_output_file_add_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new input to a file output node"),
     (('bpy.types.NODE_OT_output_file_add_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subpath of the output file"),
     (('bpy.types.NODE_OT_output_file_add_socket.file_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move File Node Socket"),
     (('bpy.types.NODE_OT_output_file_move_active_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active input of a file output node up or down the list"),
     (('bpy.types.NODE_OT_output_file_move_active_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove File Node Socket"),
     (('bpy.types.NODE_OT_output_file_remove_active_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active input from a file output node"),
     (('bpy.types.NODE_OT_output_file_remove_active_socket',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attach selected nodes"),
     (('bpy.types.NODE_OT_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Node Preview"),
     (('bpy.types.NODE_OT_preview_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle preview display for selected nodes"),
     (('bpy.types.NODE_OT_preview_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Read View Layers"),
     (('bpy.types.NODE_OT_read_viewlayers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Read all render layers of all used scenes"),
     (('bpy.types.NODE_OT_read_viewlayers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Render Changed Layer"),
     (('bpy.types.NODE_OT_render_changed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render current scene, when input node's layer has been changed"),
     (('bpy.types.NODE_OT_render_changed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Repeat Item"),
     (('bpy.types.NODE_OT_repeat_zone_item_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a repeat item to the repeat zone"),
     (('bpy.types.NODE_OT_repeat_zone_item_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Repeat Item"),
     (('bpy.types.NODE_OT_repeat_zone_item_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move a repeat item up or down in the list"),
     (('bpy.types.NODE_OT_repeat_zone_item_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Repeat Item"),
     (('bpy.types.NODE_OT_repeat_zone_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a repeat item from the repeat zone"),
     (('bpy.types.NODE_OT_repeat_zone_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Resize Node"),
     (('bpy.types.NODE_OT_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resize a node"),
     (('bpy.types.NODE_OT_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Viewer"),
     (('bpy.types.NODE_OT_select_link_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select node and link it to a viewer node"),
     (('bpy.types.NODE_OT_select_link_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link to Viewer Node"),
     (('bpy.types.NODE_OT_select_link_viewer.NODE_OT_link_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Linked From"),
     (('bpy.types.NODE_OT_select_linked_from',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select nodes linked from the selected ones"),
     (('bpy.types.NODE_OT_select_linked_from',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Linked To"),
     (('bpy.types.NODE_OT_select_linked_to',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select nodes linked to the selected ones"),
     (('bpy.types.NODE_OT_select_linked_to',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Script Node Update"),
     (('bpy.types.NODE_OT_shader_script_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update shader script node with new sockets and options from the script"),
     (('bpy.types.NODE_OT_shader_script_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add State Item"),
     (('bpy.types.NODE_OT_simulation_zone_item_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a state item to the simulation zone"),
     (('bpy.types.NODE_OT_simulation_zone_item_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move State Item"),
     (('bpy.types.NODE_OT_simulation_zone_item_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move a simulation state item up or down in the list"),
     (('bpy.types.NODE_OT_simulation_zone_item_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove State Item"),
     (('bpy.types.NODE_OT_simulation_zone_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a state item from the simulation zone"),
     (('bpy.types.NODE_OT_simulation_zone_item_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Views"),
     (('bpy.types.NODE_OT_switch_view_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update views of selected node"),
     (('bpy.types.NODE_OT_switch_view_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Parent Node Tree"),
     (('bpy.types.NODE_OT_tree_path_parent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Go to parent node tree"),
     (('bpy.types.NODE_OT_tree_path_parent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resize view so you can see all nodes"),
     (('bpy.types.NODE_OT_view_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resize view so you can see selected nodes"),
     (('bpy.types.NODE_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Viewer Region"),
     (('bpy.types.NODE_OT_viewer_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the boundaries for viewer operations"),
     (('bpy.types.NODE_OT_viewer_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Object"),
     (('bpy.types.OBJECT_OT_add',
       'bpy.types.OBJECT_OT_add_named'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an object to the scene"),
     (('bpy.types.OBJECT_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Modifier"),
     (('bpy.types.OBJECT_OT_add_modifier_menu',
       'bpy.types.OBJECT_OT_gpencil_modifier_add',
       'bpy.types.OBJECT_OT_modifier_add',
       'bpy.types.OBJECT_OT_modifier_add_node_group'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add named object"),
     (('bpy.types.OBJECT_OT_add_named',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drop X"),
     (('bpy.types.OBJECT_OT_add_named.drop_x',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.drop_x',
       'bpy.types.OBJECT_OT_collection_instance_add.drop_x',
       'bpy.types.OBJECT_OT_data_instance_add.drop_x',
       'bpy.types.OBJECT_OT_transform_to_mouse.drop_x'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "X-coordinate (screen space) to place the new object under"),
     (('bpy.types.OBJECT_OT_add_named.drop_x',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.drop_x',
       'bpy.types.OBJECT_OT_collection_instance_add.drop_x',
       'bpy.types.OBJECT_OT_data_instance_add.drop_x',
       'bpy.types.OBJECT_OT_transform_to_mouse.drop_x'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drop Y"),
     (('bpy.types.OBJECT_OT_add_named.drop_y',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.drop_y',
       'bpy.types.OBJECT_OT_collection_instance_add.drop_y',
       'bpy.types.OBJECT_OT_data_instance_add.drop_y',
       'bpy.types.OBJECT_OT_transform_to_mouse.drop_y'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Y-coordinate (screen space) to place the new object under"),
     (('bpy.types.OBJECT_OT_add_named.drop_y',
       'bpy.types.OBJECT_OT_collection_external_asset_drop.drop_y',
       'bpy.types.OBJECT_OT_collection_instance_add.drop_y',
       'bpy.types.OBJECT_OT_data_instance_add.drop_y',
       'bpy.types.OBJECT_OT_transform_to_mouse.drop_y'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate object but not object data, linking to the original data"),
     (('bpy.types.OBJECT_OT_add_named.linked',
       'bpy.types.OBJECT_OT_duplicate.linked'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Align Objects"),
     (('bpy.types.OBJECT_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align objects"),
     (('bpy.types.OBJECT_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align to axis"),
     (('bpy.types.OBJECT_OT_align.align_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align Mode"),
     (('bpy.types.OBJECT_OT_align.align_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Side of object to use for alignment"),
     (('bpy.types.OBJECT_OT_align.align_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Sides"),
     (("bpy.types.OBJECT_OT_align.align_mode:'OPT_1'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Centers"),
     (("bpy.types.OBJECT_OT_align.align_mode:'OPT_2'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Positive Sides"),
     (("bpy.types.OBJECT_OT_align.align_mode:'OPT_3'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enables high quality but slow calculation of the bounding box for perfect results on complex shape meshes with rotation/scale"),
     (('bpy.types.OBJECT_OT_align.bb_quality',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative To"),
     (('bpy.types.OBJECT_OT_align.relative_to',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reference location to align to"),
     (('bpy.types.OBJECT_OT_align.relative_to',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scene Origin"),
     (("bpy.types.OBJECT_OT_align.relative_to:'OPT_1'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the scene origin as the position for the selected objects to align to"),
     (("bpy.types.OBJECT_OT_align.relative_to:'OPT_1'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the 3D cursor as the position for the selected objects to align to"),
     (("bpy.types.OBJECT_OT_align.relative_to:'OPT_2'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the selected objects as the position for the selected objects to align to"),
     (("bpy.types.OBJECT_OT_align.relative_to:'OPT_3'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the active object as the position for the selected objects to align to"),
     (("bpy.types.OBJECT_OT_align.relative_to:'OPT_4'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Animated Transforms to Deltas"),
     (('bpy.types.OBJECT_OT_anim_transforms_to_deltas',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert object animation for normal transforms to delta transforms"),
     (('bpy.types.OBJECT_OT_anim_transforms_to_deltas',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Armature"),
     (('bpy.types.OBJECT_OT_armature_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an armature object to the scene"),
     (('bpy.types.OBJECT_OT_armature_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign Custom Property Values as Default"),
     (('bpy.types.OBJECT_OT_assign_property_defaults',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign the current values of custom properties as their defaults, for use as part of the rest pose state in NLA track mixing"),
     (('bpy.types.OBJECT_OT_assign_property_defaults',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Process bone properties"),
     (('bpy.types.OBJECT_OT_assign_property_defaults.process_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Process data properties"),
     (('bpy.types.OBJECT_OT_assign_property_defaults.process_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake"),
     (('bpy.types.OBJECT_OT_bake',
       'bpy.types.OBJECT_OT_bake_image'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake image textures of selected objects"),
     (('bpy.types.OBJECT_OT_bake',
       'bpy.types.OBJECT_OT_bake_image'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object to use as cage, instead of calculating the cage from the active object with cage extrusion"),
     (('bpy.types.OBJECT_OT_bake.cage_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertical dimension of the baking map (external only)"),
     (('bpy.types.OBJECT_OT_bake.height',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which algorithm to use to generate the margin"),
     (('bpy.types.OBJECT_OT_bake.margin_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter to combined, diffuse, glossy, transmission and subsurface passes"),
     (('bpy.types.OBJECT_OT_bake.pass_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of pass to bake, some of them may not be supported by the current render engine"),
     (('bpy.types.OBJECT_OT_bake.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically name the output file with the pass type"),
     (('bpy.types.OBJECT_OT_bake.use_automatic_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear images before baking (only for internal saving)"),
     (('bpy.types.OBJECT_OT_bake.use_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split baked maps per material, using material name in output file (external only)"),
     (('bpy.types.OBJECT_OT_bake.use_split_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UV layer to override active"),
     (('bpy.types.OBJECT_OT_bake.uv_layer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Horizontal dimension of the baking map (external only)"),
     (('bpy.types.OBJECT_OT_bake.width',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Camera"),
     (('bpy.types.OBJECT_OT_camera_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a camera object to the scene"),
     (('bpy.types.OBJECT_OT_camera_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Library Override"),
     (('bpy.types.OBJECT_OT_clear_override_library',
       'bpy.types.UI_OT_override_idtemplate_clear'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the selected local overrides and relink their usages to the linked data-blocks if possible, else reset them and mark them as non editable"),
     (('bpy.types.OBJECT_OT_clear_override_library',
       "bpy.types.OUTLINER_OT_liboverride_operation.type:'OVERRIDE_LIBRARY_CLEAR_SINGLE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add to Collection"),
     (('bpy.types.OBJECT_OT_collection_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an object to a new collection"),
     (('bpy.types.OBJECT_OT_collection_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Collection"),
     (('bpy.types.OBJECT_OT_collection_external_asset_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add the dragged collection to the scene"),
     (('bpy.types.OBJECT_OT_collection_external_asset_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add the dropped collection as collection instance"),
     (('bpy.types.OBJECT_OT_collection_external_asset_drop.use_instance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Collection Instance"),
     (('bpy.types.OBJECT_OT_collection_instance_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a collection instance"),
     (('bpy.types.OBJECT_OT_collection_instance_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collection name to add"),
     (('bpy.types.OBJECT_OT_collection_instance_add.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link to Collection"),
     (('bpy.types.OBJECT_OT_collection_link',
       'bpy.types.OBJECT_OT_link_to_collection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an object to an existing collection"),
     (('bpy.types.OBJECT_OT_collection_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Objects in Collection"),
     (('bpy.types.OBJECT_OT_collection_objects_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all objects in collection"),
     (('bpy.types.OBJECT_OT_collection_objects_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Collection"),
     (('bpy.types.OBJECT_OT_collection_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active object from this collection"),
     (('bpy.types.OBJECT_OT_collection_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlink Collection"),
     (('bpy.types.OBJECT_OT_collection_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink the collection from all objects"),
     (('bpy.types.OBJECT_OT_collection_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Constraint"),
     (('bpy.types.OBJECT_OT_constraint_add',
       'bpy.types.POSE_OT_constraint_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a constraint to the active object"),
     (('bpy.types.OBJECT_OT_constraint_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Constraint (with Targets)"),
     (('bpy.types.OBJECT_OT_constraint_add_with_targets',
       'bpy.types.POSE_OT_constraint_add_with_targets'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a constraint to the active object, with target (where applicable) set to the selected objects/bones"),
     (('bpy.types.OBJECT_OT_constraint_add_with_targets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Object Constraints"),
     (('bpy.types.OBJECT_OT_constraints_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all constraints from the selected objects"),
     (('bpy.types.OBJECT_OT_constraints_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Constraints to Selected Objects"),
     (('bpy.types.OBJECT_OT_constraints_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy constraints to other selected objects"),
     (('bpy.types.OBJECT_OT_constraints_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert To"),
     (('bpy.types.OBJECT_OT_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert selected objects to another type"),
     (('bpy.types.OBJECT_OT_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Object", "Keep Original"),
     (('bpy.types.OBJECT_OT_convert.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original objects instead of replacing them"),
     (('bpy.types.OBJECT_OT_convert.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge UV coordinates that share a vertex to account for imprecision in some modifiers"),
     (('bpy.types.OBJECT_OT_convert.merge_customdata',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of object to convert to"),
     (('bpy.types.OBJECT_OT_convert.target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curve from Mesh or Text objects"),
     (("bpy.types.OBJECT_OT_convert.target:'CURVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mesh from Curve, Surface, Metaball, or Text objects"),
     (("bpy.types.OBJECT_OT_convert.target:'MESH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grease Pencil from Curve or Mesh objects"),
     (("bpy.types.OBJECT_OT_convert.target:'GPENCIL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curves from evaluated curve data"),
     (("bpy.types.OBJECT_OT_convert.target:'CURVES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Corrective Smooth Bind"),
     (('bpy.types.OBJECT_OT_correctivesmooth_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bind base pose in Corrective Smooth modifier"),
     (('bpy.types.OBJECT_OT_correctivesmooth_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Empty Curves"),
     (('bpy.types.OBJECT_OT_curves_empty_hair_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an empty curve object to the scene with the selected mesh as surface"),
     (('bpy.types.OBJECT_OT_curves_empty_hair_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Random Curves"),
     (('bpy.types.OBJECT_OT_curves_random_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a curves object with random curves to the scene"),
     (('bpy.types.OBJECT_OT_curves_random_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Object Data Instance"),
     (('bpy.types.OBJECT_OT_data_instance_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an object data instance"),
     (('bpy.types.OBJECT_OT_data_instance_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transfer Mesh Data"),
     (('bpy.types.OBJECT_OT_data_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer data layer(s) (weights, edge sharp, etc.) from active to selected meshes"),
     (('bpy.types.OBJECT_OT_data_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which data to transfer"),
     (('bpy.types.OBJECT_OT_data_transfer.data_type',
       'bpy.types.OBJECT_OT_datalayout_transfer.data_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex Group(s)"),
     (("bpy.types.OBJECT_OT_data_transfer.data_type:'VGROUP_WEIGHTS'",
       "bpy.types.OBJECT_OT_datalayout_transfer.data_type:'VGROUP_WEIGHTS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivision Crease"),
     (("bpy.types.OBJECT_OT_data_transfer.data_type:'CREASE'",
       "bpy.types.OBJECT_OT_datalayout_transfer.data_type:'CREASE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer crease values"),
     (("bpy.types.OBJECT_OT_data_transfer.data_type:'CREASE'",
       "bpy.types.OBJECT_OT_datalayout_transfer.data_type:'CREASE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Factor controlling precision of islands handling (the higher, the better the results)"),
     (('bpy.types.OBJECT_OT_data_transfer.islands_precision',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Factor to use when applying data to destination (exact behavior depends on mix mode)"),
     (('bpy.types.OBJECT_OT_data_transfer.mix_factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Auto Transform"),
     (('bpy.types.OBJECT_OT_data_transfer.use_auto_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically compute transformation to get the best possible match between source and destination meshes.\nWarning: Results will never be as good as manual matching of objects"),
     (('bpy.types.OBJECT_OT_data_transfer.use_auto_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Data"),
     (('bpy.types.OBJECT_OT_data_transfer.use_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add data layers on destination meshes if needed"),
     (('bpy.types.OBJECT_OT_data_transfer.use_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Freeze Operator"),
     (('bpy.types.OBJECT_OT_data_transfer.use_freeze',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to settings to re-run the operator, handy to change several things at once with heavy geometry"),
     (('bpy.types.OBJECT_OT_data_transfer.use_freeze',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reverse Transfer"),
     (('bpy.types.OBJECT_OT_data_transfer.use_reverse_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer from selected objects to active one"),
     (('bpy.types.OBJECT_OT_data_transfer.use_reverse_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transfer Mesh Data Layout"),
     (('bpy.types.OBJECT_OT_datalayout_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer layout of data layer(s) from active to selected meshes"),
     (('bpy.types.OBJECT_OT_datalayout_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exact Match"),
     (('bpy.types.OBJECT_OT_datalayout_transfer.use_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Also delete some data layers from destination if necessary, so that it matches exactly source"),
     (('bpy.types.OBJECT_OT_datalayout_transfer.use_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Geometry Node Group on Object"),
     (('bpy.types.OBJECT_OT_drop_geometry_nodes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Session UUID of the geometry node group being dropped"),
     (('bpy.types.OBJECT_OT_drop_geometry_nodes.session_uuid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show the datablock selector in the modifier"),
     (('bpy.types.OBJECT_OT_drop_geometry_nodes.show_datablock_in_modifier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Empty Image/Drop Image to Empty"),
     (('bpy.types.OBJECT_OT_drop_named_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an empty image type to scene with data"),
     (('bpy.types.OBJECT_OT_drop_named_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filepath"),
     (('bpy.types.OBJECT_OT_drop_named_image.filepath',
       'bpy.types.TEXT_OT_jump_to_file_at_point.filepath',
       'bpy.types.WORKSPACE_OT_append_activate.filepath'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to image file"),
     (('bpy.types.OBJECT_OT_drop_named_image.filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Named Material on Object"),
     (('bpy.types.OBJECT_OT_drop_named_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Instances Real"),
     (('bpy.types.OBJECT_OT_duplicates_make_real',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make instanced objects attached to this object real"),
     (('bpy.types.OBJECT_OT_duplicates_make_real',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Parent newly created objects to the original instancer"),
     (('bpy.types.OBJECT_OT_duplicates_make_real.use_base_parent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Hierarchy"),
     (('bpy.types.OBJECT_OT_duplicates_make_real.use_hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maintain parent child relationships"),
     (('bpy.types.OBJECT_OT_duplicates_make_real.use_hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Edit Mode"),
     (('bpy.types.OBJECT_OT_editmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle object's edit mode"),
     (('bpy.types.OBJECT_OT_editmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Effector"),
     (('bpy.types.OBJECT_OT_effector_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an empty object with a physics effector to the scene"),
     (('bpy.types.OBJECT_OT_effector_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Empty"),
     (('bpy.types.OBJECT_OT_empty_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an empty object to the scene"),
     (('bpy.types.OBJECT_OT_empty_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Explode Refresh"),
     (('bpy.types.OBJECT_OT_explode_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refresh data in the Explode modifier"),
     (('bpy.types.OBJECT_OT_explode_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Force Field"),
     (('bpy.types.OBJECT_OT_forcefield_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle object's force field"),
     (('bpy.types.OBJECT_OT_forcefield_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Geometry Node Group"),
     (('bpy.types.OBJECT_OT_geometry_node_tree_copy_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the active geometry node group and assign it to the active modifier"),
     (('bpy.types.OBJECT_OT_geometry_node_tree_copy_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Input Attribute Toggle"),
     (('bpy.types.OBJECT_OT_geometry_nodes_input_attribute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch between an attribute and a single value to define the data for every element"),
     (('bpy.types.OBJECT_OT_geometry_nodes_input_attribute_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Input Name"),
     (('bpy.types.OBJECT_OT_geometry_nodes_input_attribute_toggle.input_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move to Nodes"),
     (('bpy.types.OBJECT_OT_geometry_nodes_move_to_nodes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move inputs and outputs from in the modifier to a new node group"),
     (('bpy.types.OBJECT_OT_geometry_nodes_move_to_nodes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Grease Pencil"),
     (('bpy.types.OBJECT_OT_gpencil_add',
       'bpy.types.OBJECT_OT_grease_pencil_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Grease Pencil object to the scene"),
     (('bpy.types.OBJECT_OT_gpencil_add',
       'bpy.types.OBJECT_OT_grease_pencil_add'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stroke offset for the line art modifier"),
     (('bpy.types.OBJECT_OT_gpencil_add.stroke_depth_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an empty grease pencil object"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'EMPTY'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'EMPTY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a simple stroke with basic colors"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'STROKE'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'STROKE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Monkey"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'MONKEY'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'MONKEY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Suzanne grease pencil object"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'MONKEY'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'MONKEY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scene Line Art"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'LRT_SCENE'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'LRT_SCENE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quickly set up line art for the entire scene"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'LRT_SCENE'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'LRT_SCENE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collection Line Art"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'LRT_COLLECTION'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'LRT_COLLECTION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quickly set up line art for the active collection"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'LRT_COLLECTION'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'LRT_COLLECTION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quickly set up line art for the active object"),
     (("bpy.types.OBJECT_OT_gpencil_add.type:'LRT_OBJECT'",
       "bpy.types.OBJECT_OT_grease_pencil_add.type:'LRT_OBJECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show In Front"),
     (('bpy.types.OBJECT_OT_gpencil_add.use_in_front',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show line art grease pencil in front of everything"),
     (('bpy.types.OBJECT_OT_gpencil_add.use_in_front',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use lights for this grease pencil object"),
     (('bpy.types.OBJECT_OT_gpencil_add.use_lights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a procedural operation/effect to the active grease pencil object"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Modifier"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_copy',
       'bpy.types.OBJECT_OT_modifier_copy',
       'bpy.types.SCENE_OT_freestyle_modifier_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate modifier at the same position in the stack"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_copy',
       'bpy.types.OBJECT_OT_modifier_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Modifier to Selected"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_copy_to_selected',
       'bpy.types.OBJECT_OT_modifier_copy_to_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the modifier from the active object to all selected objects"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_copy_to_selected',
       'bpy.types.OBJECT_OT_modifier_copy_to_selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Modifier"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_down',
       'bpy.types.OBJECT_OT_modifier_move_down'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move modifier down in the stack"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_down',
       'bpy.types.OBJECT_OT_modifier_move_down',
       "bpy.types.SEQUENCER_OT_strip_modifier_move.direction:'DOWN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Active Modifier to Index"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_to_index',
       'bpy.types.OBJECT_OT_modifier_move_to_index'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the modifier's position in the list so it evaluates after the set number of others"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The index to move the modifier to"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_to_index.index',
       'bpy.types.OBJECT_OT_modifier_move_to_index.index'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Modifier"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_up',
       'bpy.types.OBJECT_OT_modifier_move_up'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move modifier up in the stack"),
     (('bpy.types.OBJECT_OT_gpencil_modifier_move_up',
       'bpy.types.OBJECT_OT_modifier_move_up',
       "bpy.types.SEQUENCER_OT_strip_modifier_move.direction:'UP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear All Restrict Render"),
     (('bpy.types.OBJECT_OT_hide_render_clear_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all render objects by setting the hide render flag"),
     (('bpy.types.OBJECT_OT_hide_render_clear_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Hidden Objects"),
     (('bpy.types.OBJECT_OT_hide_view_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal temporarily hidden objects"),
     (('bpy.types.OBJECT_OT_hide_view_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hook to New Object"),
     (('bpy.types.OBJECT_OT_hook_add_newob',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hook selected vertices to a newly created object"),
     (('bpy.types.OBJECT_OT_hook_add_newob',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hook to Selected Object"),
     (('bpy.types.OBJECT_OT_hook_add_selob',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hook selected vertices to the first selected object"),
     (('bpy.types.OBJECT_OT_hook_add_selob',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign the hook to the hook object's active bone"),
     (('bpy.types.OBJECT_OT_hook_add_selob.use_bone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign to Hook"),
     (('bpy.types.OBJECT_OT_hook_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign the selected vertices to a hook"),
     (('bpy.types.OBJECT_OT_hook_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modifier number to assign to"),
     (('bpy.types.OBJECT_OT_hook_assign.modifier',
       'bpy.types.OBJECT_OT_hook_recenter.modifier',
       'bpy.types.OBJECT_OT_hook_reset.modifier'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recenter Hook"),
     (('bpy.types.OBJECT_OT_hook_recenter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set hook center to cursor position"),
     (('bpy.types.OBJECT_OT_hook_recenter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Hook"),
     (('bpy.types.OBJECT_OT_hook_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a hook from the active object"),
     (('bpy.types.OBJECT_OT_hook_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modifier number to remove"),
     (('bpy.types.OBJECT_OT_hook_remove.modifier',
       'bpy.types.OBJECT_OT_hook_select.modifier'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Hook"),
     (('bpy.types.OBJECT_OT_hook_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate and clear offset transformation"),
     (('bpy.types.OBJECT_OT_hook_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Hook"),
     (('bpy.types.OBJECT_OT_hook_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select affected vertices on mesh"),
     (('bpy.types.OBJECT_OT_hook_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Offset from Cursor"),
     (('bpy.types.OBJECT_OT_instance_offset_from_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set offset used for collection instances based on cursor position"),
     (('bpy.types.OBJECT_OT_instance_offset_from_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Offset from Object"),
     (('bpy.types.OBJECT_OT_instance_offset_from_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set offset used for collection instances based on the active object position"),
     (('bpy.types.OBJECT_OT_instance_offset_from_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Cursor to Offset"),
     (('bpy.types.OBJECT_OT_instance_offset_to_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set cursor position to the offset used for collection instances"),
     (('bpy.types.OBJECT_OT_instance_offset_to_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Restrict Render Unselected"),
     (('bpy.types.OBJECT_OT_isolate_type_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide unselected render objects of same type as active by setting the hide render flag"),
     (('bpy.types.OBJECT_OT_isolate_type_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join"),
     (('bpy.types.OBJECT_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join selected objects into active object"),
     (('bpy.types.OBJECT_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join as Shapes"),
     (('bpy.types.OBJECT_OT_join_shapes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the current resulting shape of another selected object to this one"),
     (('bpy.types.OBJECT_OT_join_shapes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transfer UV Maps"),
     (('bpy.types.OBJECT_OT_join_uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer UV Maps from active to selected objects (needs matching geometry)"),
     (('bpy.types.OBJECT_OT_join_uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Laplacian Deform Bind"),
     (('bpy.types.OBJECT_OT_laplaciandeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bind mesh to system in laplacian deform modifier"),
     (('bpy.types.OBJECT_OT_laplaciandeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Light"),
     (('bpy.types.OBJECT_OT_light_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a light object to the scene"),
     (('bpy.types.OBJECT_OT_light_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Light Linking Collection"),
     (('bpy.types.OBJECT_OT_light_linking_blocker_collection_new',
       'bpy.types.OBJECT_OT_light_linking_receiver_collection_new'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new light linking collection used by the active emitter"),
     (('bpy.types.OBJECT_OT_light_linking_blocker_collection_new',
       'bpy.types.OBJECT_OT_light_linking_receiver_collection_new'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Blockers to Emitter"),
     (('bpy.types.OBJECT_OT_light_linking_blockers_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Light link selected blockers to the active emitter object"),
     (('bpy.types.OBJECT_OT_light_linking_blockers_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "State of the shadow linking"),
     (('bpy.types.OBJECT_OT_light_linking_blockers_link.link_state',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include selected blockers to cast shadows from the active emitter"),
     (("bpy.types.OBJECT_OT_light_linking_blockers_link.link_state:'INCLUDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exclude selected blockers from casting shadows from the active emitter"),
     (("bpy.types.OBJECT_OT_light_linking_blockers_link.link_state:'EXCLUDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Light Linking Blockers"),
     (('bpy.types.OBJECT_OT_light_linking_blockers_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all objects which block light from this emitter"),
     (('bpy.types.OBJECT_OT_light_linking_blockers_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Receivers to Emitter"),
     (('bpy.types.OBJECT_OT_light_linking_receivers_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Light link selected receivers to the active emitter object"),
     (('bpy.types.OBJECT_OT_light_linking_receivers_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "State of the light linking"),
     (('bpy.types.OBJECT_OT_light_linking_receivers_link.link_state',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include selected receivers to receive light from the active emitter"),
     (("bpy.types.OBJECT_OT_light_linking_receivers_link.link_state:'INCLUDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exclude selected receivers from receiving light from the active emitter"),
     (("bpy.types.OBJECT_OT_light_linking_receivers_link.link_state:'EXCLUDE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Light Linking Receivers"),
     (('bpy.types.OBJECT_OT_light_linking_receivers_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all objects which receive light from this emitter"),
     (('bpy.types.OBJECT_OT_light_linking_receivers_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove From Light Linking Collection"),
     (('bpy.types.OBJECT_OT_light_linking_unlink_from_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove this object or collection from the light linking collection"),
     (('bpy.types.OBJECT_OT_light_linking_unlink_from_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Light Probe"),
     (('bpy.types.OBJECT_OT_lightprobe_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a light probe object"),
     (('bpy.types.OBJECT_OT_lightprobe_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reflection probe with spherical or cubic attenuation"),
     (("bpy.types.OBJECT_OT_lightprobe_add.type:'CUBEMAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Planar reflection probe"),
     (("bpy.types.OBJECT_OT_lightprobe_add.type:'PLANAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Irradiance probe to capture diffuse indirect lighting"),
     (("bpy.types.OBJECT_OT_lightprobe_add.type:'GRID'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Light Cache"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_bake',
       'bpy.types.SCENE_OT_light_cache_bake'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake irradiance volume light cache"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delay in millisecond before baking starts"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_bake.delay',
       'bpy.types.SCENE_OT_light_cache_bake.delay'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subset of probes to update"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_bake.subset',
       'bpy.types.OBJECT_OT_lightprobe_cache_free.subset',
       'bpy.types.SCENE_OT_light_cache_bake.subset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Light Probes"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'ALL'",
       "bpy.types.OBJECT_OT_lightprobe_cache_free.subset:'ALL'",
       "bpy.types.SCENE_OT_light_cache_bake.subset:'ALL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake all light probes"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dirty Only"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'DIRTY'",
       "bpy.types.SCENE_OT_light_cache_bake.subset:'DIRTY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only bake light probes that are marked as dirty"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'DIRTY'",
       "bpy.types.SCENE_OT_light_cache_bake.subset:'DIRTY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Only"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'SELECTED'",
       "bpy.types.OBJECT_OT_lightprobe_cache_free.subset:'SELECTED'",
       'bpy.types.POSE_OT_armature_apply.selected'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only bake selected light probes"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only bake the active light probe"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_bake.subset:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Light Cache"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_free',
       'bpy.types.SCENE_OT_light_cache_free'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete cached indirect lighting"),
     (('bpy.types.OBJECT_OT_lightprobe_cache_free',
       'bpy.types.SCENE_OT_light_cache_free'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all light probes' baked lighting data"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_free.subset:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only delete selected light probes' baked lighting data"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_free.subset:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only delete the active light probe's baked lighting data"),
     (("bpy.types.OBJECT_OT_lightprobe_cache_free.subset:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Line Art"),
     (('bpy.types.OBJECT_OT_lineart_bake_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake Line Art for current GPencil object"),
     (('bpy.types.OBJECT_OT_lineart_bake_strokes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Line Art (All)"),
     (('bpy.types.OBJECT_OT_lineart_bake_strokes_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake all Grease Pencil objects that have a line art modifier"),
     (('bpy.types.OBJECT_OT_lineart_bake_strokes_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Baked Line Art"),
     (('bpy.types.OBJECT_OT_lineart_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all strokes in current GPencil object"),
     (('bpy.types.OBJECT_OT_lineart_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Baked Line Art (All)"),
     (('bpy.types.OBJECT_OT_lineart_clear_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all strokes in all Grease Pencil objects that have a line art modifier"),
     (('bpy.types.OBJECT_OT_lineart_clear_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link objects to a collection"),
     (('bpy.types.OBJECT_OT_link_to_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of the collection to move to"),
     (('bpy.types.OBJECT_OT_link_to_collection.collection_index',
       'bpy.types.OBJECT_OT_move_to_collection.collection_index'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move objects to a new collection"),
     (('bpy.types.OBJECT_OT_link_to_collection.is_new',
       'bpy.types.OBJECT_OT_move_to_collection.is_new'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the newly added collection"),
     (('bpy.types.OBJECT_OT_link_to_collection.new_collection_name',
       'bpy.types.OBJECT_OT_move_to_collection.new_collection_name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Background Image"),
     (('bpy.types.OBJECT_OT_load_background_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a reference image into the background behind objects"),
     (('bpy.types.OBJECT_OT_load_background_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align to View"),
     (('bpy.types.OBJECT_OT_load_background_image.view_align',
       'bpy.types.OBJECT_OT_load_reference_image.view_align'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Reference Image"),
     (('bpy.types.OBJECT_OT_load_reference_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a reference image into the scene between objects"),
     (('bpy.types.OBJECT_OT_load_reference_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Instance Face"),
     (('bpy.types.OBJECT_OT_make_dupli_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert objects into instanced faces"),
     (('bpy.types.OBJECT_OT_make_dupli_face',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link/Transfer Data"),
     (('bpy.types.OBJECT_OT_make_links_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer data from active object to selected objects"),
     (('bpy.types.OBJECT_OT_make_links_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Object Data"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'OBDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace assigned Object Data"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'OBDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Materials"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace assigned Materials"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Animation Data"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'ANIMATION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace assigned Animation Data"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'ANIMATION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Collections"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'GROUPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace assigned Collections"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'GROUPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Instance Collection"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'DUPLICOLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace assigned Collection Instance"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'DUPLICOLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link Fonts to Text"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'FONTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace Text object Fonts"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'FONTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Modifiers"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'MODIFIERS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace Modifiers"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'MODIFIERS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Grease Pencil Effects"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'EFFECTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace Grease Pencil Effects"),
     (("bpy.types.OBJECT_OT_make_links_data.type:'EFFECTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Objects to Scene"),
     (('bpy.types.OBJECT_OT_make_links_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link selection to another scene"),
     (('bpy.types.OBJECT_OT_make_links_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Local"),
     (('bpy.types.OBJECT_OT_make_local',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make library linked data-blocks local to this file"),
     (('bpy.types.OBJECT_OT_make_local',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Objects and Data"),
     (("bpy.types.OBJECT_OT_make_local.type:'SELECT_OBDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Objects, Data and Materials"),
     (("bpy.types.OBJECT_OT_make_local.type:'SELECT_OBDATA_MATERIAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Library Override"),
     (('bpy.types.OBJECT_OT_make_override_library',
       'bpy.types.UI_OT_override_idtemplate_make'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a local override of the selected linked objects, and their hierarchy of dependencies"),
     (('bpy.types.OBJECT_OT_make_override_library',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Override Collection"),
     (('bpy.types.OBJECT_OT_make_override_library.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Session UUID of the directly linked collection containing the selected object, to make an override from"),
     (('bpy.types.OBJECT_OT_make_override_library.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make linked data local to each object"),
     (('bpy.types.OBJECT_OT_make_single_user',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object Animation"),
     (('bpy.types.OBJECT_OT_make_single_user.animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make object animation data local to each object"),
     (('bpy.types.OBJECT_OT_make_single_user.animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make materials local to each data-block"),
     (('bpy.types.OBJECT_OT_make_single_user.material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make single user object data"),
     (('bpy.types.OBJECT_OT_make_single_user.obdata',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object Data Animation"),
     (('bpy.types.OBJECT_OT_make_single_user.obdata_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make object data (mesh, curve etc.) animation data local to each object"),
     (('bpy.types.OBJECT_OT_make_single_user.obdata_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make single user objects"),
     (('bpy.types.OBJECT_OT_make_single_user.object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Material Slot"),
     (('bpy.types.OBJECT_OT_material_slot_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new material slot"),
     (('bpy.types.OBJECT_OT_material_slot_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign Material Slot"),
     (('bpy.types.OBJECT_OT_material_slot_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign active material slot to selection"),
     (('bpy.types.OBJECT_OT_material_slot_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Material to Selected"),
     (('bpy.types.OBJECT_OT_material_slot_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy material to selected objects"),
     (('bpy.types.OBJECT_OT_material_slot_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deselect Material Slot"),
     (('bpy.types.OBJECT_OT_material_slot_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect by active material slot"),
     (('bpy.types.OBJECT_OT_material_slot_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Material"),
     (('bpy.types.OBJECT_OT_material_slot_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active material up/down in the list"),
     (('bpy.types.OBJECT_OT_material_slot_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the active material towards"),
     (('bpy.types.OBJECT_OT_material_slot_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Material Slot"),
     (('bpy.types.OBJECT_OT_material_slot_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected material slot"),
     (('bpy.types.OBJECT_OT_material_slot_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Unused Slots"),
     (('bpy.types.OBJECT_OT_material_slot_remove_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove unused material slots"),
     (('bpy.types.OBJECT_OT_material_slot_remove_unused',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Material Slot"),
     (('bpy.types.OBJECT_OT_material_slot_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select by active material slot"),
     (('bpy.types.OBJECT_OT_material_slot_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mesh Deform Bind"),
     (('bpy.types.OBJECT_OT_meshdeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bind mesh to cage in mesh deform modifier"),
     (('bpy.types.OBJECT_OT_meshdeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Metaball"),
     (('bpy.types.OBJECT_OT_metaball_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an metaball object to the scene"),
     (('bpy.types.OBJECT_OT_metaball_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Object Mode with Sub-mode"),
     (('bpy.types.OBJECT_OT_mode_set_with_submode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mesh Mode"),
     (('bpy.types.OBJECT_OT_mode_set_with_submode.mesh_select_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a procedural operation/effect to the active object"),
     (('bpy.types.OBJECT_OT_modifier_add',
       'bpy.types.OBJECT_OT_modifier_add_node_group'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Modifier as Shape Key"),
     (('bpy.types.OBJECT_OT_modifier_apply_as_shapekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifier as a new shape key and remove from the stack"),
     (('bpy.types.OBJECT_OT_modifier_apply_as_shapekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Modifier"),
     (('bpy.types.OBJECT_OT_modifier_apply_as_shapekey.keep_modifier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not remove the modifier from stack"),
     (('bpy.types.OBJECT_OT_modifier_apply_as_shapekey.keep_modifier',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Particles to Mesh"),
     (('bpy.types.OBJECT_OT_modifier_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert particles to a mesh object"),
     (('bpy.types.OBJECT_OT_modifier_convert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the modifier's index in the stack so it evaluates after the set number of others"),
     (('bpy.types.OBJECT_OT_modifier_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Modifier"),
     (('bpy.types.OBJECT_OT_modifier_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Activate the modifier to use as the context"),
     (('bpy.types.OBJECT_OT_modifier_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move objects to a collection"),
     (('bpy.types.OBJECT_OT_move_to_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multires Apply Base"),
     (('bpy.types.OBJECT_OT_multires_base_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify the base mesh to conform to the displaced mesh"),
     (('bpy.types.OBJECT_OT_multires_base_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multires Pack External"),
     (('bpy.types.OBJECT_OT_multires_external_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack displacements from an external file"),
     (('bpy.types.OBJECT_OT_multires_external_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multires Save External"),
     (('bpy.types.OBJECT_OT_multires_external_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save displacements to an external file"),
     (('bpy.types.OBJECT_OT_multires_external_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Higher Levels"),
     (('bpy.types.OBJECT_OT_multires_higher_levels_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deletes the higher resolution mesh, potential loss of detail"),
     (('bpy.types.OBJECT_OT_multires_higher_levels_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rebuild Lower Subdivisions"),
     (('bpy.types.OBJECT_OT_multires_rebuild_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuilds all possible subdivisions levels to generate a lower resolution base mesh"),
     (('bpy.types.OBJECT_OT_multires_rebuild_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multires Reshape"),
     (('bpy.types.OBJECT_OT_multires_reshape',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy vertex coordinates from other object"),
     (('bpy.types.OBJECT_OT_multires_reshape',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Multires Subdivide"),
     (('bpy.types.OBJECT_OT_multires_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new level of subdivision"),
     (('bpy.types.OBJECT_OT_multires_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivision Mode"),
     (('bpy.types.OBJECT_OT_multires_subdivide.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How the mesh is going to be subdivided to create a new level"),
     (('bpy.types.OBJECT_OT_multires_subdivide.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new level using Catmull-Clark subdivisions"),
     (("bpy.types.OBJECT_OT_multires_subdivide.mode:'CATMULL_CLARK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new level using simple subdivisions"),
     (("bpy.types.OBJECT_OT_multires_subdivide.mode:'SIMPLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new level using linear interpolation of the sculpted displacement"),
     (("bpy.types.OBJECT_OT_multires_subdivide.mode:'LINEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unsubdivide"),
     (('bpy.types.OBJECT_OT_multires_unsubdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuild a lower subdivision level of the current base mesh"),
     (('bpy.types.OBJECT_OT_multires_unsubdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Ocean"),
     (('bpy.types.OBJECT_OT_ocean_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake an image sequence of ocean data"),
     (('bpy.types.OBJECT_OT_ocean_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free the bake, rather than generating it"),
     (('bpy.types.OBJECT_OT_ocean_bake.free',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Origin"),
     (('bpy.types.OBJECT_OT_origin_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the object's origin"),
     (('bpy.types.OBJECT_OT_origin_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the object's origin, by either moving the data, or set to center of data, or use 3D cursor"),
     (('bpy.types.OBJECT_OT_origin_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Median Center"),
     (("bpy.types.OBJECT_OT_origin_set.center:'MEDIAN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bounds Center"),
     (("bpy.types.OBJECT_OT_origin_set.center:'BOUNDS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Geometry to Origin"),
     (("bpy.types.OBJECT_OT_origin_set.type:'GEOMETRY_ORIGIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move object geometry to object origin"),
     (("bpy.types.OBJECT_OT_origin_set.type:'GEOMETRY_ORIGIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Origin to Geometry"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_GEOMETRY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate the center of geometry based on the current pivot point (median, otherwise bounding box)"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_GEOMETRY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Origin to 3D Cursor"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CURSOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move object origin to position of the 3D cursor"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CURSOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Origin to Center of Mass (Surface)"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CENTER_OF_MASS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate the center of mass from the surface area"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CENTER_OF_MASS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Origin to Center of Mass (Volume)"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CENTER_OF_VOLUME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate the center of mass from the volume (must be manifold geometry with consistent normals)"),
     (("bpy.types.OBJECT_OT_origin_set.type:'ORIGIN_CENTER_OF_VOLUME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the object's parenting"),
     (('bpy.types.OBJECT_OT_parent_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Completely clear the parenting relationship, including involved modifiers if any"),
     (("bpy.types.OBJECT_OT_parent_clear.type:'CLEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear and Keep Transformation"),
     (("bpy.types.OBJECT_OT_parent_clear.type:'CLEAR_KEEP_TRANSFORM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "As 'Clear Parent', but keep the current visual transformations of the object"),
     (("bpy.types.OBJECT_OT_parent_clear.type:'CLEAR_KEEP_TRANSFORM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Parent Inverse"),
     (("bpy.types.OBJECT_OT_parent_clear.type:'CLEAR_INVERSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the transform corrections applied to the parenting relationship, does not remove parenting itself"),
     (("bpy.types.OBJECT_OT_parent_clear.type:'CLEAR_INVERSE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Parent Inverse"),
     (('bpy.types.OBJECT_OT_parent_inverse_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the object's parent inverse to its data"),
     (('bpy.types.OBJECT_OT_parent_inverse_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Parent without Inverse"),
     (('bpy.types.OBJECT_OT_parent_no_inverse_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the object's parenting without setting the inverse parent correction"),
     (('bpy.types.OBJECT_OT_parent_no_inverse_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Transform"),
     (('bpy.types.OBJECT_OT_parent_no_inverse_set.keep_transform',
       'bpy.types.OBJECT_OT_parent_set.keep_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve the world transform throughout parenting"),
     (('bpy.types.OBJECT_OT_parent_no_inverse_set.keep_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the object's parenting"),
     (('bpy.types.OBJECT_OT_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply transformation before parenting"),
     (('bpy.types.OBJECT_OT_parent_set.keep_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Armature Deform"),
     (("bpy.types.OBJECT_OT_parent_set.type:'ARMATURE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "   With Empty Groups"),
     (("bpy.types.OBJECT_OT_parent_set.type:'ARMATURE_NAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "   With Automatic Weights"),
     (("bpy.types.OBJECT_OT_parent_set.type:'ARMATURE_AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "   With Envelope Weights"),
     (("bpy.types.OBJECT_OT_parent_set.type:'ARMATURE_ENVELOPE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bone Relative"),
     (("bpy.types.OBJECT_OT_parent_set.type:'BONE_RELATIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curve Deform"),
     (("bpy.types.OBJECT_OT_parent_set.type:'CURVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path Constraint"),
     (("bpy.types.OBJECT_OT_parent_set.type:'PATH_CONST'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lattice Deform"),
     (("bpy.types.OBJECT_OT_parent_set.type:'LATTICE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex (Triangle)"),
     (("bpy.types.OBJECT_OT_parent_set.type:'VERTEX_TRI'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "X Mirror"),
     (('bpy.types.OBJECT_OT_parent_set.xmirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply weights symmetrically along X axis, for Envelope/Automatic vertex groups creation"),
     (('bpy.types.OBJECT_OT_parent_set.xmirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Particle System Slot"),
     (('bpy.types.OBJECT_OT_particle_system_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a particle system"),
     (('bpy.types.OBJECT_OT_particle_system_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Particle System Slot"),
     (('bpy.types.OBJECT_OT_particle_system_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected particle system"),
     (('bpy.types.OBJECT_OT_particle_system_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Calculate Object Motion Paths"),
     (('bpy.types.OBJECT_OT_paths_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate motion paths for the selected objects"),
     (('bpy.types.OBJECT_OT_paths_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display type"),
     (('bpy.types.OBJECT_OT_paths_calculate.display_type',
       'bpy.types.POSE_OT_paths_calculate.display_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Computation Range"),
     (('bpy.types.OBJECT_OT_paths_calculate.range',
       'bpy.types.POSE_OT_paths_calculate.range'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Object Paths"),
     (('bpy.types.OBJECT_OT_paths_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only clear motion paths of selected objects"),
     (('bpy.types.OBJECT_OT_paths_clear.only_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Object Paths"),
     (('bpy.types.OBJECT_OT_paths_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate motion paths for selected objects"),
     (('bpy.types.OBJECT_OT_paths_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update All Object Paths"),
     (('bpy.types.OBJECT_OT_paths_update_visible',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate all visible motion paths for objects and poses"),
     (('bpy.types.OBJECT_OT_paths_update_visible',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Point Cloud"),
     (('bpy.types.OBJECT_OT_pointcloud_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a point cloud object to the scene"),
     (('bpy.types.OBJECT_OT_pointcloud_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Pose Mode"),
     (('bpy.types.OBJECT_OT_posemode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable or disable posing/selecting bones"),
     (('bpy.types.OBJECT_OT_posemode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "QuadriFlow Remesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new quad based mesh using the surface data of the current mesh. All data layers will be lost"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Old Object Face Area"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.mesh_area',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "This property is only used to cache the object area for later calculations"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.mesh_area',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to specify the amount of detail for the new mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specify target number of faces relative to the current mesh"),
     (("bpy.types.OBJECT_OT_quadriflow_remesh.mode:'RATIO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Input target edge length in the new mesh"),
     (("bpy.types.OBJECT_OT_quadriflow_remesh.mode:'EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Input target number of faces in the new mesh"),
     (("bpy.types.OBJECT_OT_quadriflow_remesh.mode:'FACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reproject the paint mask onto the new mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.preserve_paint_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Random seed to use with the solver. Different seeds will cause the remesher to come up with different quad layouts on the mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.seed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Normals"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.smooth_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the output mesh normals to smooth"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.smooth_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target edge length in the new mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.target_edge_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of Faces"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.target_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Approximate number of faces (quads) in the new mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.target_faces',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative number of faces compared to the current mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.target_ratio',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Mesh Symmetry"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_mesh_symmetry',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generates a symmetrical mesh using the mesh symmetry configuration"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_mesh_symmetry',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve Mesh Boundary"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_preserve_boundary',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to preserve mesh boundary on the mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_preserve_boundary',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve Sharp"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_preserve_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to preserve sharp features on the mesh"),
     (('bpy.types.OBJECT_OT_quadriflow_remesh.use_preserve_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quick Explode"),
     (('bpy.types.OBJECT_OT_quick_explode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make selected objects explode"),
     (('bpy.types.OBJECT_OT_quick_explode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of Pieces"),
     (('bpy.types.OBJECT_OT_quick_explode.amount',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade the pieces over time"),
     (('bpy.types.OBJECT_OT_quick_explode.fade',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Explode Style"),
     (('bpy.types.OBJECT_OT_quick_explode.style',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Outwards Velocity"),
     (('bpy.types.OBJECT_OT_quick_explode.velocity',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quick Fur"),
     (('bpy.types.OBJECT_OT_quick_fur',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a fur setup to the selected objects"),
     (('bpy.types.OBJECT_OT_quick_fur',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Hair Guides"),
     (('bpy.types.OBJECT_OT_quick_fur.apply_hair_guides',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hair Radius"),
     (('bpy.types.OBJECT_OT_quick_fur.radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frizz"),
     (('bpy.types.OBJECT_OT_quick_fur.use_frizz',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View Percentage"),
     (('bpy.types.OBJECT_OT_quick_fur.view_percentage',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quick Liquid"),
     (('bpy.types.OBJECT_OT_quick_liquid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make selected objects liquid"),
     (('bpy.types.OBJECT_OT_quick_liquid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render Liquid Objects"),
     (('bpy.types.OBJECT_OT_quick_liquid.show_flows',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep the liquid objects visible during rendering"),
     (('bpy.types.OBJECT_OT_quick_liquid.show_flows',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quick Smoke"),
     (('bpy.types.OBJECT_OT_quick_smoke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use selected objects as smoke emitters"),
     (('bpy.types.OBJECT_OT_quick_smoke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render Smoke Objects"),
     (('bpy.types.OBJECT_OT_quick_smoke.show_flows',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep the smoke objects visible during rendering"),
     (('bpy.types.OBJECT_OT_quick_smoke.show_flows',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smoke Style"),
     (('bpy.types.OBJECT_OT_quick_smoke.style',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smoke & Fire"),
     (("bpy.types.OBJECT_OT_quick_smoke.style:'BOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Randomize Transform"),
     (('bpy.types.OBJECT_OT_randomize_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize objects location, rotation, and scale"),
     (('bpy.types.OBJECT_OT_randomize_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum distance the objects can spread over each axis"),
     (('bpy.types.OBJECT_OT_randomize_transform.loc',
       'bpy.types.UV_OT_randomize_uv_transform.loc'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Seed value for the random generator"),
     (('bpy.types.OBJECT_OT_randomize_transform.random_seed',
       'bpy.types.UV_OT_randomize_uv_transform.random_seed'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum rotation over each axis"),
     (('bpy.types.OBJECT_OT_randomize_transform.rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum scale randomization over each axis"),
     (('bpy.types.OBJECT_OT_randomize_transform.scale',
       'bpy.types.UV_OT_randomize_uv_transform.scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale Even"),
     (('bpy.types.OBJECT_OT_randomize_transform.scale_even',
       'bpy.types.UV_OT_randomize_uv_transform.scale_even'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the same scale value for all axis"),
     (('bpy.types.OBJECT_OT_randomize_transform.scale_even',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transform Delta"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_delta',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize delta transform values instead of regular transform"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_delta',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize Location"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_loc',
       'bpy.types.UV_OT_randomize_uv_transform.use_loc'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the location values"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_loc',
       'bpy.types.UV_OT_randomize_uv_transform.use_loc'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize Rotation"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_rot',
       'bpy.types.UV_OT_randomize_uv_transform.use_rot'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the rotation values"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize Scale"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_scale',
       'bpy.types.UV_OT_randomize_uv_transform.use_scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the scale values"),
     (('bpy.types.OBJECT_OT_randomize_transform.use_scale',
       'bpy.types.UV_OT_randomize_uv_transform.use_scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Library Override"),
     (('bpy.types.OBJECT_OT_reset_override_library',
       'bpy.types.UI_OT_override_idtemplate_reset'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the selected local overrides to their linked references values"),
     (('bpy.types.OBJECT_OT_reset_override_library',
       "bpy.types.OUTLINER_OT_liboverride_operation.type:'OVERRIDE_LIBRARY_RESET'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select by Type"),
     (('bpy.types.OBJECT_OT_select_by_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all visible objects that are of a type"),
     (('bpy.types.OBJECT_OT_select_by_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Camera"),
     (('bpy.types.OBJECT_OT_select_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the active camera"),
     (('bpy.types.OBJECT_OT_select_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all visible objects grouped by various properties"),
     (('bpy.types.OBJECT_OT_select_grouped',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared parent"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'SIBLINGS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared object type"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'TYPE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared collection"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render pass index"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'PASS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object color"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Objects included in active Keying Set"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'KEYINGSET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Light Type"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'LIGHT_TYPE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Matching light types"),
     (("bpy.types.OBJECT_OT_select_grouped.type:'LIGHT_TYPE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect objects at the boundaries of parent/child relationships"),
     (('bpy.types.OBJECT_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all visible objects that are linked"),
     (('bpy.types.OBJECT_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Instanced Collection"),
     (("bpy.types.OBJECT_OT_select_linked.type:'DUPGROUP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library (Object Data)"),
     (("bpy.types.OBJECT_OT_select_linked.type:'LIBRARY_OBDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select the mirror objects of the selected object e.g. \\"L.sword\\" and \\"R.sword\\""),
     (('bpy.types.OBJECT_OT_select_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select connected parent/child objects"),
     (('bpy.types.OBJECT_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Pattern"),
     (('bpy.types.OBJECT_OT_select_pattern',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select objects matching a naming pattern"),
     (('bpy.types.OBJECT_OT_select_pattern',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do a case sensitive compare"),
     (('bpy.types.OBJECT_OT_select_pattern.case_sensitive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name filter using '*', '?' and '[abc]' unix style wildcards"),
     (('bpy.types.OBJECT_OT_select_pattern.pattern',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select or deselect random visible objects"),
     (('bpy.types.OBJECT_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Same Collection"),
     (('bpy.types.OBJECT_OT_select_same_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select object in the same collection"),
     (('bpy.types.OBJECT_OT_select_same_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the collection to select"),
     (('bpy.types.OBJECT_OT_select_same_collection.collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render and display faces uniform, using Face Normals"),
     (('bpy.types.OBJECT_OT_shade_flat',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render and display faces smooth, using interpolated Vertex Normals"),
     (('bpy.types.OBJECT_OT_shade_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable automatic smooth based on smooth/sharp faces/edges and angle between faces"),
     (('bpy.types.OBJECT_OT_shade_smooth.use_auto_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Effect"),
     (('bpy.types.OBJECT_OT_shaderfx_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a visual effect to the active object"),
     (('bpy.types.OBJECT_OT_shaderfx_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Effect"),
     (('bpy.types.OBJECT_OT_shaderfx_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate effect at the same position in the stack"),
     (('bpy.types.OBJECT_OT_shaderfx_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Effect"),
     (('bpy.types.OBJECT_OT_shaderfx_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move effect down in the stack"),
     (('bpy.types.OBJECT_OT_shaderfx_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Effect to Index"),
     (('bpy.types.OBJECT_OT_shaderfx_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the effect's position in the list so it evaluates after the set number of others"),
     (('bpy.types.OBJECT_OT_shaderfx_move_to_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The index to move the effect to"),
     (('bpy.types.OBJECT_OT_shaderfx_move_to_index.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Effect"),
     (('bpy.types.OBJECT_OT_shaderfx_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move effect up in the stack"),
     (('bpy.types.OBJECT_OT_shaderfx_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Shape Key"),
     (('bpy.types.OBJECT_OT_shape_key_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add shape key to the object"),
     (('bpy.types.OBJECT_OT_shape_key_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Mix"),
     (('bpy.types.OBJECT_OT_shape_key_add.from_mix',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create the new shape key from the existing mix of keys"),
     (('bpy.types.OBJECT_OT_shape_key_add.from_mix',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Shape Keys"),
     (('bpy.types.OBJECT_OT_shape_key_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear weights for all shape keys"),
     (('bpy.types.OBJECT_OT_shape_key_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mirror Shape Key"),
     (('bpy.types.OBJECT_OT_shape_key_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror the current shape key along the local X axis"),
     (('bpy.types.OBJECT_OT_shape_key_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Shape Key"),
     (('bpy.types.OBJECT_OT_shape_key_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active shape key up/down in the list"),
     (('bpy.types.OBJECT_OT_shape_key_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Shape Key"),
     (('bpy.types.OBJECT_OT_shape_key_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove shape key from the object"),
     (('bpy.types.OBJECT_OT_shape_key_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all shape keys"),
     (('bpy.types.OBJECT_OT_shape_key_remove.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Mix"),
     (('bpy.types.OBJECT_OT_shape_key_remove.apply_mix',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply current mix of shape keys to the geometry before removing them"),
     (('bpy.types.OBJECT_OT_shape_key_remove.apply_mix',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Re-Time Shape Keys"),
     (('bpy.types.OBJECT_OT_shape_key_retime',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resets the timing for absolute shape keys"),
     (('bpy.types.OBJECT_OT_shape_key_retime',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transfer Shape Key"),
     (('bpy.types.OBJECT_OT_shape_key_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the active shape key of another selected object to this one"),
     (('bpy.types.OBJECT_OT_shape_key_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transformation Mode"),
     (('bpy.types.OBJECT_OT_shape_key_transfer.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative shape positions to the new shape method"),
     (('bpy.types.OBJECT_OT_shape_key_transfer.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the relative positional offset"),
     (("bpy.types.OBJECT_OT_shape_key_transfer.mode:'OFFSET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative Face"),
     (("bpy.types.OBJECT_OT_shape_key_transfer.mode:'RELATIVE_FACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate relative position (using faces)"),
     (("bpy.types.OBJECT_OT_shape_key_transfer.mode:'RELATIVE_FACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relative Edge"),
     (("bpy.types.OBJECT_OT_shape_key_transfer.mode:'RELATIVE_EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate relative position (using edges)"),
     (("bpy.types.OBJECT_OT_shape_key_transfer.mode:'RELATIVE_EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clamp Offset"),
     (('bpy.types.OBJECT_OT_shape_key_transfer.use_clamp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clamp the transformation to the distance each vertex moves in the original shape"),
     (('bpy.types.OBJECT_OT_shape_key_transfer.use_clamp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Simulation"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake simulations in geometry nodes modifiers"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake cache on all selected objects"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Single Simulation Zone"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake a single simulation zone"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake ID"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single.bake_id',
       'bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single.bake_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Nested node id of the node to bake"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single.bake_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the modifier that contains the node to bake"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_bake_single.modifier_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Calculate Simulation to Frame"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_calculate_to_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate simulations in geometry nodes modifiers from the start to current frame"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_calculate_to_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate all selected objects instead of just the active object"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_calculate_to_frame.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Cached Simulation"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete cached/baked simulations in geometry nodes modifiers"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete cache on all selected objects"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Single Cached Simulation"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete simulation data of a single simulation zone"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Nested node id of the bake to delete"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single.bake_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the modifier that contains the node"),
     (('bpy.types.OBJECT_OT_simulation_nodes_cache_delete_single.modifier_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Skin Armature Create"),
     (('bpy.types.OBJECT_OT_skin_armature_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an armature that parallels the skin layout"),
     (('bpy.types.OBJECT_OT_skin_armature_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Skin Mark/Clear Loose"),
     (('bpy.types.OBJECT_OT_skin_loose_mark_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark/clear selected vertices as loose"),
     (('bpy.types.OBJECT_OT_skin_loose_mark_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark"),
     (("bpy.types.OBJECT_OT_skin_loose_mark_clear.action:'MARK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark selected vertices as loose"),
     (("bpy.types.OBJECT_OT_skin_loose_mark_clear.action:'MARK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set selected vertices as not loose"),
     (("bpy.types.OBJECT_OT_skin_loose_mark_clear.action:'CLEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Skin Radii Equalize"),
     (('bpy.types.OBJECT_OT_skin_radii_equalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make skin radii of selected vertices equal on each axis"),
     (('bpy.types.OBJECT_OT_skin_radii_equalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Skin Root Mark"),
     (('bpy.types.OBJECT_OT_skin_root_mark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark selected vertices as roots"),
     (('bpy.types.OBJECT_OT_skin_root_mark',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Speaker"),
     (('bpy.types.OBJECT_OT_speaker_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a speaker object to the scene"),
     (('bpy.types.OBJECT_OT_speaker_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Surface Deform Bind"),
     (('bpy.types.OBJECT_OT_surfacedeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bind mesh to target in surface deform modifier"),
     (('bpy.types.OBJECT_OT_surfacedeform_bind',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Text"),
     (('bpy.types.OBJECT_OT_text_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a text object to the scene"),
     (('bpy.types.OBJECT_OT_text_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Track"),
     (('bpy.types.OBJECT_OT_track_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear tracking constraint or flag from object"),
     (('bpy.types.OBJECT_OT_track_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Track"),
     (("bpy.types.OBJECT_OT_track_clear.type:'CLEAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear and Keep Transformation (Clear Track)"),
     (("bpy.types.OBJECT_OT_track_clear.type:'CLEAR_KEEP_TRANSFORM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Track"),
     (('bpy.types.OBJECT_OT_track_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make the object track another object, using various methods/constraints"),
     (('bpy.types.OBJECT_OT_track_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Track to Constraint"),
     (("bpy.types.OBJECT_OT_track_set.type:'TRACKTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Track Constraint"),
     (("bpy.types.OBJECT_OT_track_set.type:'LOCKTRACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transfer Mode"),
     (('bpy.types.OBJECT_OT_transfer_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switches the active object and assigns the same mode to a new one under the mouse cursor, leaving the active mode in the current one"),
     (('bpy.types.OBJECT_OT_transfer_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flash On Transfer"),
     (('bpy.types.OBJECT_OT_transfer_mode.use_flash_on_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flash the target object when transferring the mode"),
     (('bpy.types.OBJECT_OT_transfer_mode.use_flash_on_transfer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Object Transform"),
     (('bpy.types.OBJECT_OT_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the object's transformation to its data"),
     (('bpy.types.OBJECT_OT_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Isolate Multi User Data"),
     (('bpy.types.OBJECT_OT_transform_apply.isolate_users',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create new object-data users if needed"),
     (('bpy.types.OBJECT_OT_transform_apply.isolate_users',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Properties"),
     (('bpy.types.OBJECT_OT_transform_apply.properties',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify properties such as curve vertex radius, font size and bone envelope"),
     (('bpy.types.OBJECT_OT_transform_apply.properties',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Interactive Light Track to Cursor"),
     (('bpy.types.OBJECT_OT_transform_axis_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively point cameras and lights to a location (Ctrl translates)"),
     (('bpy.types.OBJECT_OT_transform_axis_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Place Object Under Mouse"),
     (('bpy.types.OBJECT_OT_transform_to_mouse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected item(s) to the mouse location"),
     (('bpy.types.OBJECT_OT_transform_to_mouse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object name to place (uses the active object when this and 'session_uuid' are unset)"),
     (('bpy.types.OBJECT_OT_transform_to_mouse.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Session UUID of the object to place (uses the active object when this and 'name' are unset)"),
     (('bpy.types.OBJECT_OT_transform_to_mouse.session_uuid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transforms to Deltas"),
     (('bpy.types.OBJECT_OT_transforms_to_deltas',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert normal object transforms to delta transforms, any existing delta transforms will be included as well"),
     (('bpy.types.OBJECT_OT_transforms_to_deltas',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which transforms to transfer"),
     (('bpy.types.OBJECT_OT_transforms_to_deltas.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Transforms"),
     (("bpy.types.OBJECT_OT_transforms_to_deltas.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer location, rotation, and scale transforms"),
     (("bpy.types.OBJECT_OT_transforms_to_deltas.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer location transforms only"),
     (("bpy.types.OBJECT_OT_transforms_to_deltas.mode:'LOC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer rotation transforms only"),
     (("bpy.types.OBJECT_OT_transforms_to_deltas.mode:'ROT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transfer scale transforms only"),
     (("bpy.types.OBJECT_OT_transforms_to_deltas.mode:'SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset Values"),
     (('bpy.types.OBJECT_OT_transforms_to_deltas.reset_values',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear transform values after transferring to deltas"),
     (('bpy.types.OBJECT_OT_transforms_to_deltas.reset_values',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new vertex group to the active object"),
     (('bpy.types.OBJECT_OT_vertex_group_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign to New Group"),
     (('bpy.types.OBJECT_OT_vertex_group_assign_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign the selected vertices to a new vertex group"),
     (('bpy.types.OBJECT_OT_vertex_group_assign_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Vertex Group Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_clean',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove vertex group assignments which are not required"),
     (('bpy.types.OBJECT_OT_vertex_group_clean',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Define which subset of groups shall be used"),
     (('bpy.types.OBJECT_OT_vertex_group_clean.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_invert.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_levels.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_limit_total.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_normalize_all.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_quantize.group_select_mode',
       'bpy.types.OBJECT_OT_vertex_group_smooth.group_select_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Single"),
     (('bpy.types.OBJECT_OT_vertex_group_clean.keep_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep verts assigned to at least one group when cleaning"),
     (('bpy.types.OBJECT_OT_vertex_group_clean.keep_single',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove vertices which weight is below or equal to this limit"),
     (('bpy.types.OBJECT_OT_vertex_group_clean.limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a copy of the active vertex group"),
     (('bpy.types.OBJECT_OT_vertex_group_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Vertex Group to Selected"),
     (('bpy.types.OBJECT_OT_vertex_group_copy_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace vertex groups of selected objects by vertex groups of active object"),
     (('bpy.types.OBJECT_OT_vertex_group_copy_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert active vertex group's weights"),
     (('bpy.types.OBJECT_OT_vertex_group_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_invert.auto_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add vertices from groups that have zero weight before inverting"),
     (('bpy.types.OBJECT_OT_vertex_group_invert.auto_assign',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_invert.auto_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove vertices from groups that have zero weight after inverting"),
     (('bpy.types.OBJECT_OT_vertex_group_invert.auto_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Group Levels"),
     (('bpy.types.OBJECT_OT_vertex_group_levels',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add some offset and multiply with some gain the weights of the active vertex group"),
     (('bpy.types.OBJECT_OT_vertex_group_levels',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value to multiply weights by"),
     (('bpy.types.OBJECT_OT_vertex_group_levels.gain',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value to add to weights"),
     (('bpy.types.OBJECT_OT_vertex_group_levels.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Limit Number of Weights per Vertex"),
     (('bpy.types.OBJECT_OT_vertex_group_limit_total',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit deform weights associated with a vertex to a specified number by removing lowest weights"),
     (('bpy.types.OBJECT_OT_vertex_group_limit_total',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum number of deform weights"),
     (('bpy.types.OBJECT_OT_vertex_group_limit_total.limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change the Lock On Vertex Groups"),
     (('bpy.types.OBJECT_OT_vertex_group_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the lock state of all or some vertex groups of active object"),
     (('bpy.types.OBJECT_OT_vertex_group_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock action to execute on vertex groups"),
     (('bpy.types.OBJECT_OT_vertex_group_lock.action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlock all vertex groups if there is at least one locked group, lock all in other case"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.action:'TOGGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock all vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.action:'LOCK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlock all vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.action:'UNLOCK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert the lock state of all vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.action:'INVERT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the action based on vertex group selection"),
     (('bpy.types.OBJECT_OT_vertex_group_lock.mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply action to all vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.mask:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply to selected vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.mask:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply to unselected vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.mask:'UNSELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert Unselected"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.mask:'INVERT_UNSELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the opposite of Lock/Unlock to unselected vertex groups"),
     (("bpy.types.OBJECT_OT_vertex_group_lock.mask:'INVERT_UNSELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mirror Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror vertex group, flip weights and/or names, editing only selected vertices, flipping when both sides are selected otherwise copy from unselected"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Groups"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.all_groups',
       'bpy.types.OBJECT_OT_vertex_group_remove_from.use_all_groups'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror all vertex groups weights"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.all_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip Group Names"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.flip_group_names',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip vertex group names"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.flip_group_names',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.mirror_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror weights"),
     (('bpy.types.OBJECT_OT_vertex_group_mirror.mirror_weights',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active vertex group up/down in the list"),
     (('bpy.types.OBJECT_OT_vertex_group_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize weights of the active vertex group, so that the highest ones are now 1.0"),
     (('bpy.types.OBJECT_OT_vertex_group_normalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize All Vertex Groups"),
     (('bpy.types.OBJECT_OT_vertex_group_normalize_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quantize Vertex Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_quantize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set weights to a fixed number of steps"),
     (('bpy.types.OBJECT_OT_vertex_group_quantize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of steps between 0 and 1"),
     (('bpy.types.OBJECT_OT_vertex_group_quantize.steps',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the active or all vertex groups from the active object"),
     (('bpy.types.OBJECT_OT_vertex_group_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all vertex groups"),
     (('bpy.types.OBJECT_OT_vertex_group_remove.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Unlocked"),
     (('bpy.types.OBJECT_OT_vertex_group_remove.all_unlocked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all unlocked vertex groups"),
     (('bpy.types.OBJECT_OT_vertex_group_remove.all_unlocked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove from all groups"),
     (('bpy.types.OBJECT_OT_vertex_group_remove_from.use_all_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the active group"),
     (('bpy.types.OBJECT_OT_vertex_group_remove_from.use_all_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Vertex Group"),
     (('bpy.types.OBJECT_OT_vertex_group_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the active vertex group"),
     (('bpy.types.OBJECT_OT_vertex_group_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex group to set as active"),
     (('bpy.types.OBJECT_OT_vertex_group_set_active.group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Vertex Weights"),
     (('bpy.types.OBJECT_OT_vertex_group_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth weights for selected vertices"),
     (('bpy.types.OBJECT_OT_vertex_group_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expand/Contract"),
     (('bpy.types.OBJECT_OT_vertex_group_smooth.expand',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expand/contract weights"),
     (('bpy.types.OBJECT_OT_vertex_group_smooth.expand',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sort Vertex Groups"),
     (('bpy.types.OBJECT_OT_vertex_group_sort',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort vertex groups"),
     (('bpy.types.OBJECT_OT_vertex_group_sort',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort Type"),
     (('bpy.types.OBJECT_OT_vertex_group_sort.sort_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort type"),
     (('bpy.types.OBJECT_OT_vertex_group_sort.sort_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bone Hierarchy"),
     (("bpy.types.OBJECT_OT_vertex_group_sort.sort_type:'BONE_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Vertex Parent"),
     (('bpy.types.OBJECT_OT_vertex_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Parent selected objects to the selected vertices"),
     (('bpy.types.OBJECT_OT_vertex_parent_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Active"),
     (('bpy.types.OBJECT_OT_vertex_weight_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy weights from active to selected"),
     (('bpy.types.OBJECT_OT_vertex_weight_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Weight"),
     (('bpy.types.OBJECT_OT_vertex_weight_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete this weight from the vertex (disabled if vertex group is locked)"),
     (('bpy.types.OBJECT_OT_vertex_weight_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weight Index"),
     (('bpy.types.OBJECT_OT_vertex_weight_delete.weight_group',
       'bpy.types.OBJECT_OT_vertex_weight_paste.weight_group',
       'bpy.types.OBJECT_OT_vertex_weight_set_active.weight_group'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of source weight in active vertex group"),
     (('bpy.types.OBJECT_OT_vertex_weight_delete.weight_group',
       'bpy.types.OBJECT_OT_vertex_weight_paste.weight_group',
       'bpy.types.OBJECT_OT_vertex_weight_set_active.weight_group'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Normalize Active"),
     (('bpy.types.OBJECT_OT_vertex_weight_normalize_active_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize active vertex's weights"),
     (('bpy.types.OBJECT_OT_vertex_weight_normalize_active_vertex',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Weight to Selected"),
     (('bpy.types.OBJECT_OT_vertex_weight_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy this group's weight to other selected vertices (disabled if vertex group is locked)"),
     (('bpy.types.OBJECT_OT_vertex_weight_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Group"),
     (('bpy.types.OBJECT_OT_vertex_weight_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set as active vertex group"),
     (('bpy.types.OBJECT_OT_vertex_weight_set_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Visual Transform"),
     (('bpy.types.OBJECT_OT_visual_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the object's visual transformation to its data"),
     (('bpy.types.OBJECT_OT_visual_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Volume"),
     (('bpy.types.OBJECT_OT_volume_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a volume object to the scene"),
     (('bpy.types.OBJECT_OT_volume_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import OpenVDB Volume"),
     (('bpy.types.OBJECT_OT_volume_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import OpenVDB volume file"),
     (('bpy.types.OBJECT_OT_volume_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically detect animated sequences in selected volume files (based on file names)"),
     (('bpy.types.OBJECT_OT_volume_import.use_sequence_detection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Voxel Remesh"),
     (('bpy.types.OBJECT_OT_voxel_remesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculates a new manifold mesh based on the volume of the current mesh. All data layers will be lost"),
     (('bpy.types.OBJECT_OT_voxel_remesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Voxel Size"),
     (('bpy.types.OBJECT_OT_voxel_size_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify the mesh voxel size interactively used in the voxel remesher"),
     (('bpy.types.OBJECT_OT_voxel_size_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Set Action"),
     (('bpy.types.OUTLINER_OT_action_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the active action used"),
     (('bpy.types.OUTLINER_OT_action_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Animation Data Operation"),
     (('bpy.types.OUTLINER_OT_animdata_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation Operation"),
     (('bpy.types.OUTLINER_OT_animdata_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Animation Data"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'CLEAR_ANIMDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove this animation data container"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'CLEAR_ANIMDATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Action"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'SET_ACT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink Action"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'CLEAR_ACT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refresh Drivers"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'REFRESH_DRIVERS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Drivers"),
     (("bpy.types.OUTLINER_OT_animdata_operation.type:'CLEAR_DRIVERS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Color Tag"),
     (('bpy.types.OUTLINER_OT_collection_color_tag_set',
       'bpy.types.SEQUENCER_OT_strip_color_tag_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set a color tag for the selected collections"),
     (('bpy.types.OUTLINER_OT_collection_color_tag_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable Collection"),
     (('bpy.types.OUTLINER_OT_collection_disable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disable viewport display in the view layers"),
     (('bpy.types.OUTLINER_OT_collection_disable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable Collection in Render"),
     (('bpy.types.OUTLINER_OT_collection_disable_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not render this collection"),
     (('bpy.types.OUTLINER_OT_collection_disable_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag to move to collection in Outliner"),
     (('bpy.types.OUTLINER_OT_collection_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Collection"),
     (('bpy.types.OUTLINER_OT_collection_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recursively duplicate the collection, all its children, objects and object data"),
     (('bpy.types.OUTLINER_OT_collection_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Linked Collection"),
     (('bpy.types.OUTLINER_OT_collection_duplicate_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recursively duplicate the collection, all its children and objects, with linked object data"),
     (('bpy.types.OUTLINER_OT_collection_duplicate_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Enable Collection"),
     (('bpy.types.OUTLINER_OT_collection_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable viewport display in the view layers"),
     (('bpy.types.OUTLINER_OT_collection_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Enable Collection in Render"),
     (('bpy.types.OUTLINER_OT_collection_enable_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render the collection"),
     (('bpy.types.OUTLINER_OT_collection_enable_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Enable in View Layer"),
     (('bpy.types.OUTLINER_OT_collection_exclude_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include collection in the active view layer"),
     (('bpy.types.OUTLINER_OT_collection_exclude_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disable from View Layer"),
     (('bpy.types.OUTLINER_OT_collection_exclude_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exclude collection from the active view layer"),
     (('bpy.types.OUTLINER_OT_collection_exclude_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide the collection in this view layer"),
     (('bpy.types.OUTLINER_OT_collection_hide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Hide Inside Collection"),
     (('bpy.types.OUTLINER_OT_collection_hide_inside',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide all the objects and collections inside the collection"),
     (('bpy.types.OUTLINER_OT_collection_hide_inside',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Hierarchy"),
     (('bpy.types.OUTLINER_OT_collection_hierarchy_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected collection hierarchies"),
     (('bpy.types.OUTLINER_OT_collection_hierarchy_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Holdout"),
     (('bpy.types.OUTLINER_OT_collection_holdout_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear masking of collection in the active view layer"),
     (('bpy.types.OUTLINER_OT_collection_holdout_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Holdout"),
     (('bpy.types.OUTLINER_OT_collection_holdout_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mask collection in the active view layer"),
     (('bpy.types.OUTLINER_OT_collection_holdout_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Indirect Only"),
     (('bpy.types.OUTLINER_OT_collection_indirect_only_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear collection contributing only indirectly in the view layer"),
     (('bpy.types.OUTLINER_OT_collection_indirect_only_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Indirect Only"),
     (('bpy.types.OUTLINER_OT_collection_indirect_only_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set collection to only contribute indirectly (through shadows and reflections) in the view layer"),
     (('bpy.types.OUTLINER_OT_collection_indirect_only_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Instance Collection"),
     (('bpy.types.OUTLINER_OT_collection_instance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Instance selected collections to active scene"),
     (('bpy.types.OUTLINER_OT_collection_instance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Isolate Collection"),
     (('bpy.types.OUTLINER_OT_collection_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide all but this collection and its parents"),
     (('bpy.types.OUTLINER_OT_collection_isolate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extend current visible collections"),
     (('bpy.types.OUTLINER_OT_collection_isolate.extend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link Collection"),
     (('bpy.types.OUTLINER_OT_collection_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link selected collections to active scene"),
     (('bpy.types.OUTLINER_OT_collection_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deselect Objects"),
     (('bpy.types.OUTLINER_OT_collection_objects_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect objects in collection"),
     (('bpy.types.OUTLINER_OT_collection_objects_deselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Objects"),
     (('bpy.types.OUTLINER_OT_collection_objects_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select objects in collection"),
     (('bpy.types.OUTLINER_OT_collection_objects_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Collection"),
     (('bpy.types.OUTLINER_OT_collection_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show the collection in this view layer"),
     (('bpy.types.OUTLINER_OT_collection_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Inside Collection"),
     (('bpy.types.OUTLINER_OT_collection_show_inside',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show all the objects and collections inside the collection"),
     (('bpy.types.OUTLINER_OT_collection_show_inside',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Constraint Operation"),
     (('bpy.types.OUTLINER_OT_constraint_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Constraint Operation"),
     (('bpy.types.OUTLINER_OT_constraint_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Data Operation"),
     (('bpy.types.OUTLINER_OT_data_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Data Operation"),
     (('bpy.types.OUTLINER_OT_data_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Data Stack Drop"),
     (('bpy.types.OUTLINER_OT_datastack_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy or reorder modifiers, constraints, and effects"),
     (('bpy.types.OUTLINER_OT_datastack_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected objects and collections"),
     (('bpy.types.OUTLINER_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete child objects and collections"),
     (('bpy.types.OUTLINER_OT_delete.hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Drivers for Selected"),
     (('bpy.types.OUTLINER_OT_drivers_add_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add drivers to selected items"),
     (('bpy.types.OUTLINER_OT_drivers_add_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Drivers for Selected"),
     (('bpy.types.OUTLINER_OT_drivers_delete_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete drivers assigned to selected items"),
     (('bpy.types.OUTLINER_OT_drivers_delete_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Expand/Collapse All"),
     (('bpy.types.OUTLINER_OT_expanded_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expand/Collapse all items"),
     (('bpy.types.OUTLINER_OT_expanded_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hide selected objects and collections"),
     (('bpy.types.OUTLINER_OT_hide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Highlight"),
     (('bpy.types.OUTLINER_OT_highlight_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update the item highlight based on the current mouse position"),
     (('bpy.types.OUTLINER_OT_highlight_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner ID Data Copy"),
     (('bpy.types.OUTLINER_OT_id_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected data-blocks to the internal clipboard"),
     (('bpy.types.OUTLINER_OT_id_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Data-Block"),
     (('bpy.types.OUTLINER_OT_id_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the ID under cursor"),
     (('bpy.types.OUTLINER_OT_id_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner ID Data Operation"),
     (('bpy.types.OUTLINER_OT_id_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "General data-block management operations"),
     (('bpy.types.OUTLINER_OT_id_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ID Data Operation"),
     (('bpy.types.OUTLINER_OT_id_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'UNLINK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make Local"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remap Users"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'REMAP'",
       "bpy.types.OUTLINER_OT_object_operation.type:'REMAP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make all users of selected data-blocks to use instead current (clicked) one"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'REMAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'PASTE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Fake User"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'ADD_FAKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ensure data-block gets saved even if it isn't in use (e.g. for motion and material libraries)"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'ADD_FAKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Fake User"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'CLEAR_FAKE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rename"),
     (("bpy.types.OUTLINER_OT_id_operation.type:'RENAME'",
       "bpy.types.OUTLINER_OT_object_operation.type:'RENAME'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner ID Data Paste"),
     (('bpy.types.OUTLINER_OT_id_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste data-blocks from the internal clipboard"),
     (('bpy.types.OUTLINER_OT_id_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner ID Data Remap"),
     (('bpy.types.OUTLINER_OT_id_remap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New ID"),
     (('bpy.types.OUTLINER_OT_id_remap.new_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New ID to remap all selected IDs' users to"),
     (('bpy.types.OUTLINER_OT_id_remap.new_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Old ID"),
     (('bpy.types.OUTLINER_OT_id_remap.old_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Old ID to replace"),
     (('bpy.types.OUTLINER_OT_id_remap.old_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drag and Drop"),
     (('bpy.types.OUTLINER_OT_item_drag_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag and drop element to another place"),
     (('bpy.types.OUTLINER_OT_item_drag_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Keying Set Add Selected"),
     (('bpy.types.OUTLINER_OT_keyingset_add_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected items (blue-gray rows) to active Keying Set"),
     (('bpy.types.OUTLINER_OT_keyingset_add_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Keying Set Remove Selected"),
     (('bpy.types.OUTLINER_OT_keyingset_remove_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected items (blue-gray rows) from active Keying Set"),
     (('bpy.types.OUTLINER_OT_keyingset_remove_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Library Operation"),
     (('bpy.types.OUTLINER_OT_lib_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library Operation"),
     (('bpy.types.OUTLINER_OT_lib_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete this library and all its items.\nWarning: No undo"),
     (("bpy.types.OUTLINER_OT_lib_operation.type:'DELETE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relocate"),
     (("bpy.types.OUTLINER_OT_lib_operation.type:'RELOCATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select a new path for this library, and reload all its data"),
     (("bpy.types.OUTLINER_OT_lib_operation.type:'RELOCATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload all data from this library"),
     (("bpy.types.OUTLINER_OT_lib_operation.type:'RELOAD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Relocate Library"),
     (('bpy.types.OUTLINER_OT_lib_relocate',
       'bpy.types.WM_OT_lib_relocate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relocate the library under cursor"),
     (('bpy.types.OUTLINER_OT_lib_relocate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Library Override Operation"),
     (('bpy.types.OUTLINER_OT_liboverride_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create, reset or clear library override hierarchies"),
     (('bpy.types.OUTLINER_OT_liboverride_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selection Set"),
     (('bpy.types.OUTLINER_OT_liboverride_operation.selection_set',
       'bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Over which part of the tree items to apply the operation"),
     (('bpy.types.OUTLINER_OT_liboverride_operation.selection_set',
       'bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the operation over selected data-blocks only"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.selection_set:'SELECTED'",
       "bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set:'SELECTED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Content"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.selection_set:'CONTENT'",
       "bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set:'CONTENT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the operation over content of the selected items only (the data-blocks in their sub-tree)"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.selection_set:'CONTENT'",
       "bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set:'CONTENT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected & Content"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.selection_set:'SELECTED_AND_CONTENT'",
       "bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set:'SELECTED_AND_CONTENT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the operation over selected data-blocks and all their dependencies"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.selection_set:'SELECTED_AND_CONTENT'",
       "bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.selection_set:'SELECTED_AND_CONTENT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library Override Operation"),
     (('bpy.types.OUTLINER_OT_liboverride_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.type:'OVERRIDE_LIBRARY_CREATE_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a local override of the selected linked data-blocks, and their hierarchy of dependencies"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.type:'OVERRIDE_LIBRARY_CREATE_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset"),
     (("bpy.types.OUTLINER_OT_liboverride_operation.type:'OVERRIDE_LIBRARY_RESET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Library Override Troubleshoot Operation"),
     (('bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Advanced operations over library override to help fix broken hierarchies"),
     (('bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library Override Troubleshoot Operation"),
     (('bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resync"),
     (("bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type:'OVERRIDE_LIBRARY_RESYNC_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies"),
     (("bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type:'OVERRIDE_LIBRARY_RESYNC_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resync Enforce"),
     (("bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type:'OVERRIDE_LIBRARY_RESYNC_HIERARCHY_ENFORCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies, enforcing these hierarchies to match the linked data (i.e. ignoring existing overrides on data-blocks pointer properties)"),
     (("bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type:'OVERRIDE_LIBRARY_RESYNC_HIERARCHY_ENFORCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the selected local overrides (including their hierarchies of override dependencies) and relink their usages to the linked data-blocks"),
     (("bpy.types.OUTLINER_OT_liboverride_troubleshoot_operation.type:'OVERRIDE_LIBRARY_DELETE_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Material on Object"),
     (('bpy.types.OUTLINER_OT_material_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag material to object in Outliner"),
     (('bpy.types.OUTLINER_OT_material_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Modifier Operation"),
     (('bpy.types.OUTLINER_OT_modifier_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modifier Operation"),
     (('bpy.types.OUTLINER_OT_modifier_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Viewport Use"),
     (("bpy.types.OUTLINER_OT_modifier_operation.type:'TOGVIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Render Use"),
     (("bpy.types.OUTLINER_OT_modifier_operation.type:'TOGREN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Object Operation"),
     (('bpy.types.OUTLINER_OT_object_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object Operation"),
     (('bpy.types.OUTLINER_OT_object_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select Hierarchy"),
     (("bpy.types.OUTLINER_OT_object_operation.type:'SELECT_HIERARCHY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make all users of selected data-blocks to use instead a new chosen one"),
     (("bpy.types.OUTLINER_OT_object_operation.type:'REMAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Context menu for item operations"),
     (('bpy.types.OUTLINER_OT_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Purge All"),
     (('bpy.types.OUTLINER_OT_orphans_purge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all orphaned data-blocks without any users from the file"),
     (('bpy.types.OUTLINER_OT_orphans_purge',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Linked Data-blocks"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_linked_ids',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include unused linked data-blocks into deletion"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_linked_ids',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Local Data-blocks"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_local_ids',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include unused local data-blocks into deletion"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_local_ids',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recursive Delete"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_recursive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recursively check for indirectly unused data-blocks, ensuring that no orphaned data-blocks remain after execution"),
     (('bpy.types.OUTLINER_OT_orphans_purge.do_recursive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop to Clear Parent (hold Alt to keep transforms)"),
     (('bpy.types.OUTLINER_OT_parent_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag to clear parent in Outliner"),
     (('bpy.types.OUTLINER_OT_parent_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop to Set Parent (hold Alt to keep transforms)"),
     (('bpy.types.OUTLINER_OT_parent_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag to parent in Outliner"),
     (('bpy.types.OUTLINER_OT_parent_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Object to Scene"),
     (('bpy.types.OUTLINER_OT_scene_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag object to scene in Outliner"),
     (('bpy.types.OUTLINER_OT_scene_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Outliner Scene Operation"),
     (('bpy.types.OUTLINER_OT_scene_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Context menu for scene operations"),
     (('bpy.types.OUTLINER_OT_scene_operation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scene Operation"),
     (('bpy.types.OUTLINER_OT_scene_operation.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Active"),
     (('bpy.types.OUTLINER_OT_show_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open up the tree and adjust the view so that the active object is shown centered"),
     (('bpy.types.OUTLINER_OT_show_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Hierarchy"),
     (('bpy.types.OUTLINER_OT_show_hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open all object entries and close all others"),
     (('bpy.types.OUTLINER_OT_show_hierarchy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unhide All"),
     (('bpy.types.OUTLINER_OT_unhide_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unhide all objects and collections"),
     (('bpy.types.OUTLINER_OT_unhide_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Paint Curve Point"),
     (('bpy.types.PAINTCURVE_OT_add_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add New Paint Curve Point"),
     (('bpy.types.PAINTCURVE_OT_add_point',
       'bpy.types.PAINTCURVE_OT_add_point_slide.PAINTCURVE_OT_add_point',
       'bpy.types.PAINTCURVE_OT_add_point_slide.PAINTCURVE_OT_add_point'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Curve Point and Slide"),
     (('bpy.types.PAINTCURVE_OT_add_point_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new curve point and slide it"),
     (('bpy.types.PAINTCURVE_OT_add_point_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slide Paint Curve Point"),
     (('bpy.types.PAINTCURVE_OT_add_point_slide.PAINTCURVE_OT_slide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Place Cursor"),
     (('bpy.types.PAINTCURVE_OT_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Place cursor"),
     (('bpy.types.PAINTCURVE_OT_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Paint Curve Point"),
     (('bpy.types.PAINTCURVE_OT_delete_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Paint Curve Point"),
     (('bpy.types.PAINTCURVE_OT_delete_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw curve"),
     (('bpy.types.PAINTCURVE_OT_draw',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Paint Curve"),
     (('bpy.types.PAINTCURVE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new paint curve"),
     (('bpy.types.PAINTCURVE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Simple UVs"),
     (('bpy.types.PAINT_OT_add_simple_uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add cube map UVs on mesh"),
     (('bpy.types.PAINT_OT_add_simple_uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Paint Slot"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a paint slot"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name for new paint slot source"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slot Type"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot.slot_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of new paint slot"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot.slot_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Material Layer Type"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Material layer type of new paint slot"),
     (('bpy.types.PAINT_OT_add_texture_paint_slot.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Base Color"),
     (("bpy.types.PAINT_OT_add_texture_paint_slot.type:'BASE_COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specular IOR Level"),
     (("bpy.types.PAINT_OT_add_texture_paint_slot.type:'SPECULAR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Swap Colors"),
     (('bpy.types.PAINT_OT_brush_colors_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap primary and secondary brush colors"),
     (('bpy.types.PAINT_OT_brush_colors_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect Faces connected to existing selection"),
     (('bpy.types.PAINT_OT_face_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Also deselect faces that only touch on a corner"),
     (('bpy.types.PAINT_OT_face_select_less.face_step',
       'bpy.types.PAINT_OT_vert_select_less.face_step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select linked faces"),
     (('bpy.types.PAINT_OT_face_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select Faces connected to existing selection"),
     (('bpy.types.PAINT_OT_face_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Also select faces that only touch on a corner"),
     (('bpy.types.PAINT_OT_face_select_more.face_step',
       'bpy.types.PAINT_OT_vert_select_more.face_step'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reveal Faces/Vertices"),
     (('bpy.types.PAINT_OT_face_vert_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal hidden faces and vertices"),
     (('bpy.types.PAINT_OT_face_vert_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specifies whether the newly revealed geometry should be selected"),
     (('bpy.types.PAINT_OT_face_vert_reveal.select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Grab Clone"),
     (('bpy.types.PAINT_OT_grab_clone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the clone source image"),
     (('bpy.types.PAINT_OT_grab_clone',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delta offset of clone image in 0.0 to 1.0 coordinates"),
     (('bpy.types.PAINT_OT_grab_clone.delta',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Image from View"),
     (('bpy.types.PAINT_OT_image_from_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make an image from biggest 3D view for reprojection"),
     (('bpy.types.PAINT_OT_image_from_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the file"),
     (('bpy.types.PAINT_OT_image_from_view.filepath',
       'bpy.types.WM_OT_append.filename',
       'bpy.types.WM_OT_lib_reload.filename',
       'bpy.types.WM_OT_lib_relocate.filename',
       'bpy.types.WM_OT_link.filename'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Project Image"),
     (('bpy.types.PAINT_OT_project_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project an edited render from the active camera back onto the object"),
     (('bpy.types.PAINT_OT_project_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the mouse to sample a color in the image"),
     (('bpy.types.PAINT_OT_sample_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample Merged"),
     (('bpy.types.PAINT_OT_sample_color.merged',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample the output display color"),
     (('bpy.types.PAINT_OT_sample_color.merged',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add to Palette"),
     (('bpy.types.PAINT_OT_sample_color.palette',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Texture Paint Toggle"),
     (('bpy.types.PAINT_OT_texture_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle texture paint mode in 3D view"),
     (('bpy.types.PAINT_OT_texture_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect Vertices connected to existing selection"),
     (('bpy.types.PAINT_OT_vert_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Linked Vertices"),
     (('bpy.types.PAINT_OT_vert_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select linked vertices"),
     (('bpy.types.PAINT_OT_vert_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select Vertices connected to existing selection"),
     (('bpy.types.PAINT_OT_vert_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dirty Vertex Colors"),
     (('bpy.types.PAINT_OT_vertex_color_dirt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate a dirt map gradient based on cavity"),
     (('bpy.types.PAINT_OT_vertex_color_dirt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blur Iterations"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.blur_iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times to blur the colors (higher blurs more)"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.blur_iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blur Strength"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.blur_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blur strength per iteration"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.blur_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Highlight Angle"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.clean_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Less than 90 limits the angle used in the tonal range"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.clean_angle',
       'bpy.types.PAINT_OT_vertex_color_dirt.dirt_angle'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dirt Angle"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.dirt_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dirt Only"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.dirt_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't calculate cleans for convex areas"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.dirt_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Normalize the colors, increasing the contrast"),
     (('bpy.types.PAINT_OT_vertex_color_dirt.normalize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Color from Weight"),
     (('bpy.types.PAINT_OT_vertex_color_from_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert active weight into gray scale vertex colors"),
     (('bpy.types.PAINT_OT_vertex_color_from_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust vertex color Hue/Saturation/Value"),
     (('bpy.types.PAINT_OT_vertex_color_hsv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Vertex Colors"),
     (('bpy.types.PAINT_OT_vertex_color_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill the active vertex color layer with the current paint color"),
     (('bpy.types.PAINT_OT_vertex_color_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set color completely opaque instead of reusing existing alpha"),
     (('bpy.types.PAINT_OT_vertex_color_set.use_alpha',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth Vertex Colors"),
     (('bpy.types.PAINT_OT_vertex_color_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth colors across vertices"),
     (('bpy.types.PAINT_OT_vertex_color_smooth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Paint Mode"),
     (('bpy.types.PAINT_OT_vertex_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle the vertex paint mode in 3D view"),
     (('bpy.types.PAINT_OT_vertex_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight from Bones"),
     (('bpy.types.PAINT_OT_weight_from_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the weights of the groups matching the attached armature's selected bones, using the distance between the vertices and the bones"),
     (('bpy.types.PAINT_OT_weight_from_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method to use for assigning weights"),
     (('bpy.types.PAINT_OT_weight_from_bones.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatic weights from bones"),
     (("bpy.types.PAINT_OT_weight_from_bones.type:'AUTOMATIC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Envelopes"),
     (("bpy.types.PAINT_OT_weight_from_bones.type:'ENVELOPES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weights from envelopes with user defined radius"),
     (("bpy.types.PAINT_OT_weight_from_bones.type:'ENVELOPES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight Paint Mode"),
     (('bpy.types.PAINT_OT_weight_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle weight paint mode in 3D view"),
     (('bpy.types.PAINT_OT_weight_paint_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight Paint Sample Group"),
     (('bpy.types.PAINT_OT_weight_sample_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select one of the vertex groups available under current mouse position"),
     (('bpy.types.PAINT_OT_weight_sample_group',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Weight"),
     (('bpy.types.PAINT_OT_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill the active vertex group with the current paint weight"),
     (('bpy.types.PAINT_OT_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Palette Color"),
     (('bpy.types.PALETTE_OT_color_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new color to active palette"),
     (('bpy.types.PALETTE_OT_color_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Palette Color"),
     (('bpy.types.PALETTE_OT_color_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove active color from palette"),
     (('bpy.types.PALETTE_OT_color_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Palette Color"),
     (('bpy.types.PALETTE_OT_color_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the active Color up/down in the list"),
     (('bpy.types.PALETTE_OT_color_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extract Palette from Image"),
     (('bpy.types.PALETTE_OT_extract_from_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extract all colors used in Image and create a Palette"),
     (('bpy.types.PALETTE_OT_extract_from_image',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join Palette Swatches"),
     (('bpy.types.PALETTE_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join Palette Swatches"),
     (('bpy.types.PALETTE_OT_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the Palette"),
     (('bpy.types.PALETTE_OT_join.palette',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Palette"),
     (('bpy.types.PALETTE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new palette"),
     (('bpy.types.PALETTE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sort Palette"),
     (('bpy.types.PALETTE_OT_sort',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort Palette Colors"),
     (('bpy.types.PALETTE_OT_sort',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Hue, Saturation, Value"),
     (("bpy.types.PALETTE_OT_sort.type:'HSV'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Saturation, Value, Hue"),
     (("bpy.types.PALETTE_OT_sort.type:'SVH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value, Hue, Saturation"),
     (("bpy.types.PALETTE_OT_sort.type:'VHS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Brush Edit"),
     (('bpy.types.PARTICLE_OT_brush_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply a stroke of brush to the particles"),
     (('bpy.types.PARTICLE_OT_brush_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Connect Hair"),
     (('bpy.types.PARTICLE_OT_connect_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect hair to the emitter mesh"),
     (('bpy.types.PARTICLE_OT_connect_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Hair"),
     (('bpy.types.PARTICLE_OT_connect_hair.all',
       'bpy.types.PARTICLE_OT_disconnect_hair.all'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect all hair systems to the emitter mesh"),
     (('bpy.types.PARTICLE_OT_connect_hair.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Particle Systems"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy particle systems from the active object to selected objects"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Target Particles"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems.remove_target_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove particle systems on the target objects"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems.remove_target_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Space transform for copying from one object to another"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems.space',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy inside each object's local space"),
     (("bpy.types.PARTICLE_OT_copy_particle_systems.space:'OBJECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy in world space"),
     (("bpy.types.PARTICLE_OT_copy_particle_systems.space:'WORLD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the active particle system from the context"),
     (('bpy.types.PARTICLE_OT_copy_particle_systems.use_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected particles or keys"),
     (('bpy.types.PARTICLE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete a full particle or only keys"),
     (('bpy.types.PARTICLE_OT_delete.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Disconnect Hair"),
     (('bpy.types.PARTICLE_OT_disconnect_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disconnect hair from the emitter mesh"),
     (('bpy.types.PARTICLE_OT_disconnect_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disconnect all hair systems from the emitter mesh"),
     (('bpy.types.PARTICLE_OT_disconnect_hair.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Particle System"),
     (('bpy.types.PARTICLE_OT_duplicate_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate particle system within the active object"),
     (('bpy.types.PARTICLE_OT_duplicate_particle_system',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate Settings"),
     (('bpy.types.PARTICLE_OT_duplicate_particle_system.use_duplicate_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate settings as well, so the new particle system uses its own settings"),
     (('bpy.types.PARTICLE_OT_duplicate_particle_system.use_duplicate_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Particle Instance Object"),
     (('bpy.types.PARTICLE_OT_dupliob_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate the current instance object"),
     (('bpy.types.PARTICLE_OT_dupliob_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Instance Object"),
     (('bpy.types.PARTICLE_OT_dupliob_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move instance object down in the list"),
     (('bpy.types.PARTICLE_OT_dupliob_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Instance Object"),
     (('bpy.types.PARTICLE_OT_dupliob_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move instance object up in the list"),
     (('bpy.types.PARTICLE_OT_dupliob_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh Instance Objects"),
     (('bpy.types.PARTICLE_OT_dupliob_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refresh list of instance objects and their weights"),
     (('bpy.types.PARTICLE_OT_dupliob_refresh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Particle Instance Object"),
     (('bpy.types.PARTICLE_OT_dupliob_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected instance object"),
     (('bpy.types.PARTICLE_OT_dupliob_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Edited"),
     (('bpy.types.PARTICLE_OT_edited_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo all edition performed on the particle system"),
     (('bpy.types.PARTICLE_OT_edited_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Hair Dynamics Preset"),
     (('bpy.types.PARTICLE_OT_hair_dynamics_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Hair Dynamics Preset"),
     (('bpy.types.PARTICLE_OT_hair_dynamics_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mirror"),
     (('bpy.types.PARTICLE_OT_mirror',
       'bpy.types.TRANSFORM_OT_mirror'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate and mirror the selected particles along the local X axis"),
     (('bpy.types.PARTICLE_OT_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Particle Settings"),
     (('bpy.types.PARTICLE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new particle settings"),
     (('bpy.types.PARTICLE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Particle Target"),
     (('bpy.types.PARTICLE_OT_new_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new particle target"),
     (('bpy.types.PARTICLE_OT_new_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Particle Edit Toggle"),
     (('bpy.types.PARTICLE_OT_particle_edit_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle particle edit mode"),
     (('bpy.types.PARTICLE_OT_particle_edit_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rekey"),
     (('bpy.types.PARTICLE_OT_rekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the number of keys of selected particles (root and tip keys included)"),
     (('bpy.types.PARTICLE_OT_rekey',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of Keys"),
     (('bpy.types.PARTICLE_OT_rekey.keys_number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Doubles"),
     (('bpy.types.PARTICLE_OT_remove_doubles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected particles close enough of others"),
     (('bpy.types.PARTICLE_OT_remove_doubles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Threshold distance within which particles are removed"),
     (('bpy.types.PARTICLE_OT_remove_doubles.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reveal"),
     (('bpy.types.PARTICLE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show hidden particles"),
     (('bpy.types.PARTICLE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect boundary selected keys of each particle"),
     (('bpy.types.PARTICLE_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all keys linked to already selected ones"),
     (('bpy.types.PARTICLE_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select keys linked to boundary selected keys of each particle"),
     (('bpy.types.PARTICLE_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select a randomly distributed set of hair or points"),
     (('bpy.types.PARTICLE_OT_select_random',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select either hair or points"),
     (('bpy.types.PARTICLE_OT_select_random.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Roots"),
     (('bpy.types.PARTICLE_OT_select_roots',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select roots of all visible particles"),
     (('bpy.types.PARTICLE_OT_select_roots',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Tips"),
     (('bpy.types.PARTICLE_OT_select_tips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select tips of all visible particles"),
     (('bpy.types.PARTICLE_OT_select_tips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shape Cut"),
     (('bpy.types.PARTICLE_OT_shape_cut',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cut hair to conform to the set shape object"),
     (('bpy.types.PARTICLE_OT_shape_cut',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subdivide selected particles segments (adds keys)"),
     (('bpy.types.PARTICLE_OT_subdivide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Down Target"),
     (('bpy.types.PARTICLE_OT_target_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move particle target down in the list"),
     (('bpy.types.PARTICLE_OT_target_move_down',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Up Target"),
     (('bpy.types.PARTICLE_OT_target_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move particle target up in the list"),
     (('bpy.types.PARTICLE_OT_target_move_up',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Particle Target"),
     (('bpy.types.PARTICLE_OT_target_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected particle target"),
     (('bpy.types.PARTICLE_OT_target_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unify Length"),
     (('bpy.types.PARTICLE_OT_unify_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make selected hair the same length"),
     (('bpy.types.PARTICLE_OT_unify_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weight Set"),
     (('bpy.types.PARTICLE_OT_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the weight of selected keys"),
     (('bpy.types.PARTICLE_OT_weight_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolation factor between current brush weight, and keys' weights"),
     (('bpy.types.PARTICLE_OT_weight_set.factor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Pose Asset"),
     (('bpy.types.POSELIB_OT_apply_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the given Pose Action to the rig"),
     (('bpy.types.POSELIB_OT_apply_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount that the pose is applied on top of the existing poses. A negative value will subtract the pose instead of adding it"),
     (('bpy.types.POSELIB_OT_apply_pose_asset.blend_factor',
       'bpy.types.POSELIB_OT_blend_pose_asset.blend_factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Flipped"),
     (('bpy.types.POSELIB_OT_apply_pose_asset.flipped',
       'bpy.types.POSELIB_OT_blend_pose_asset.flipped'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When enabled, applies the pose flipped over the X-axis"),
     (('bpy.types.POSELIB_OT_apply_pose_asset.flipped',
       'bpy.types.POSELIB_OT_blend_pose_asset.flipped'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend Pose Asset"),
     (('bpy.types.POSELIB_OT_blend_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend the given Pose Action to the rig"),
     (('bpy.types.POSELIB_OT_blend_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Legacy Pose Library"),
     (('bpy.types.POSELIB_OT_convert_old_object_poselib',
       'bpy.types.POSELIB_OT_convert_old_poselib'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a pose asset for each pose marker in this legacy pose library data-block"),
     (('bpy.types.POSELIB_OT_convert_old_object_poselib',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a pose asset for each pose marker in the current action"),
     (('bpy.types.POSELIB_OT_convert_old_poselib',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Pose as Asset"),
     (('bpy.types.POSELIB_OT_copy_as_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new pose asset on the clipboard, to be pasted into an Asset Browser"),
     (('bpy.types.POSELIB_OT_copy_as_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Pose Asset"),
     (('bpy.types.POSELIB_OT_create_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new Action that contains the pose of the selected bones, and mark it as Asset. The asset will be stored in the current blend file"),
     (('bpy.types.POSELIB_OT_create_pose_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Activate New Action"),
     (('bpy.types.POSELIB_OT_create_pose_asset.activate_new_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pose Name"),
     (('bpy.types.POSELIB_OT_create_pose_asset.pose_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste as New Asset"),
     (('bpy.types.POSELIB_OT_paste_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste the Asset that was previously copied using Copy As Asset"),
     (('bpy.types.POSELIB_OT_paste_asset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Bones"),
     (('bpy.types.POSELIB_OT_pose_asset_select_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select those bones that are used in this pose"),
     (('bpy.types.POSELIB_OT_pose_asset_select_bones',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Restore Previous Action"),
     (('bpy.types.POSELIB_OT_restore_previous_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch back to the previous Action, after creating a pose asset"),
     (('bpy.types.POSELIB_OT_restore_previous_action',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Pose as Rest Pose"),
     (('bpy.types.POSE_OT_armature_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the current pose as the new rest pose"),
     (('bpy.types.POSE_OT_armature_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only apply the selected bones (with propagation to children)"),
     (('bpy.types.POSE_OT_armature_apply.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend from current position to previous or next keyframe"),
     (('bpy.types.POSE_OT_blend_to_neighbor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis Lock"),
     (('bpy.types.POSE_OT_blend_to_neighbor.axis_lock',
       'bpy.types.POSE_OT_blend_with_rest.axis_lock',
       'bpy.types.POSE_OT_breakdown.axis_lock',
       'bpy.types.POSE_OT_push.axis_lock',
       'bpy.types.POSE_OT_relax.axis_lock'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transform axis to restrict effects to"),
     (('bpy.types.POSE_OT_blend_to_neighbor.axis_lock',
       'bpy.types.POSE_OT_blend_with_rest.axis_lock',
       'bpy.types.POSE_OT_breakdown.axis_lock',
       'bpy.types.POSE_OT_push.axis_lock',
       'bpy.types.POSE_OT_relax.axis_lock'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All axes are affected"),
     (("bpy.types.POSE_OT_blend_to_neighbor.axis_lock:'FREE'",
       "bpy.types.POSE_OT_blend_with_rest.axis_lock:'FREE'",
       "bpy.types.POSE_OT_breakdown.axis_lock:'FREE'",
       "bpy.types.POSE_OT_push.axis_lock:'FREE'",
       "bpy.types.POSE_OT_relax.axis_lock:'FREE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only X-axis transforms are affected"),
     (("bpy.types.POSE_OT_blend_to_neighbor.axis_lock:'X'",
       "bpy.types.POSE_OT_blend_with_rest.axis_lock:'X'",
       "bpy.types.POSE_OT_breakdown.axis_lock:'X'",
       "bpy.types.POSE_OT_push.axis_lock:'X'",
       "bpy.types.POSE_OT_relax.axis_lock:'X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Y-axis transforms are affected"),
     (("bpy.types.POSE_OT_blend_to_neighbor.axis_lock:'Y'",
       "bpy.types.POSE_OT_blend_with_rest.axis_lock:'Y'",
       "bpy.types.POSE_OT_breakdown.axis_lock:'Y'",
       "bpy.types.POSE_OT_push.axis_lock:'Y'",
       "bpy.types.POSE_OT_relax.axis_lock:'Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Z-axis transforms are affected"),
     (("bpy.types.POSE_OT_blend_to_neighbor.axis_lock:'Z'",
       "bpy.types.POSE_OT_blend_with_rest.axis_lock:'Z'",
       "bpy.types.POSE_OT_breakdown.axis_lock:'Z'",
       "bpy.types.POSE_OT_push.axis_lock:'Z'",
       "bpy.types.POSE_OT_relax.axis_lock:'Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set of properties that are affected"),
     (('bpy.types.POSE_OT_blend_to_neighbor.channels',
       'bpy.types.POSE_OT_blend_with_rest.channels',
       'bpy.types.POSE_OT_breakdown.channels',
       'bpy.types.POSE_OT_push.channels',
       'bpy.types.POSE_OT_relax.channels'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Properties"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'ALL'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'ALL'",
       "bpy.types.POSE_OT_breakdown.channels:'ALL'",
       "bpy.types.POSE_OT_push.channels:'ALL'",
       "bpy.types.POSE_OT_relax.channels:'ALL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All properties, including transforms, bendy bone shape, and custom properties"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'ALL'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'ALL'",
       "bpy.types.POSE_OT_breakdown.channels:'ALL'",
       "bpy.types.POSE_OT_push.channels:'ALL'",
       "bpy.types.POSE_OT_relax.channels:'ALL'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Location only"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'LOC'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'LOC'",
       "bpy.types.POSE_OT_breakdown.channels:'LOC'",
       "bpy.types.POSE_OT_push.channels:'LOC'",
       "bpy.types.POSE_OT_relax.channels:'LOC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotation only"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'ROT'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'ROT'",
       "bpy.types.POSE_OT_breakdown.channels:'ROT'",
       "bpy.types.POSE_OT_push.channels:'ROT'",
       "bpy.types.POSE_OT_relax.channels:'ROT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale only"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'SIZE'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'SIZE'",
       "bpy.types.POSE_OT_breakdown.channels:'SIZE'",
       "bpy.types.POSE_OT_push.channels:'SIZE'",
       "bpy.types.POSE_OT_relax.channels:'SIZE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bendy Bone"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'BBONE'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'BBONE'",
       "bpy.types.POSE_OT_breakdown.channels:'BBONE'",
       "bpy.types.POSE_OT_push.channels:'BBONE'",
       "bpy.types.POSE_OT_relax.channels:'BBONE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bendy Bone shape properties"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'BBONE'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'BBONE'",
       "bpy.types.POSE_OT_breakdown.channels:'BBONE'",
       "bpy.types.POSE_OT_push.channels:'BBONE'",
       "bpy.types.POSE_OT_relax.channels:'BBONE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Custom properties"),
     (("bpy.types.POSE_OT_blend_to_neighbor.channels:'CUSTOM'",
       "bpy.types.POSE_OT_blend_with_rest.channels:'CUSTOM'",
       "bpy.types.POSE_OT_breakdown.channels:'CUSTOM'",
       "bpy.types.POSE_OT_push.channels:'CUSTOM'",
       "bpy.types.POSE_OT_relax.channels:'CUSTOM'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weighting factor for which keyframe is favored more"),
     (('bpy.types.POSE_OT_blend_to_neighbor.factor',
       'bpy.types.POSE_OT_blend_with_rest.factor',
       'bpy.types.POSE_OT_breakdown.factor',
       'bpy.types.POSE_OT_push.factor',
       'bpy.types.POSE_OT_relax.factor'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame number of keyframe immediately after the current frame"),
     (('bpy.types.POSE_OT_blend_to_neighbor.next_frame',
       'bpy.types.POSE_OT_blend_with_rest.next_frame',
       'bpy.types.POSE_OT_breakdown.next_frame',
       'bpy.types.POSE_OT_push.next_frame',
       'bpy.types.POSE_OT_relax.next_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Previous Keyframe"),
     (('bpy.types.POSE_OT_blend_to_neighbor.prev_frame',
       'bpy.types.POSE_OT_blend_with_rest.prev_frame',
       'bpy.types.POSE_OT_breakdown.prev_frame',
       'bpy.types.POSE_OT_push.prev_frame',
       'bpy.types.POSE_OT_relax.prev_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame number of keyframe immediately before the current frame"),
     (('bpy.types.POSE_OT_blend_to_neighbor.prev_frame',
       'bpy.types.POSE_OT_blend_with_rest.prev_frame',
       'bpy.types.POSE_OT_breakdown.prev_frame',
       'bpy.types.POSE_OT_push.prev_frame',
       'bpy.types.POSE_OT_relax.prev_frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Blend Pose with Rest Pose"),
     (('bpy.types.POSE_OT_blend_with_rest',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make the current pose more similar to, or further away from, the rest pose"),
     (('bpy.types.POSE_OT_blend_with_rest',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pose Breakdowner"),
     (('bpy.types.POSE_OT_breakdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a suitable breakdown pose on the current frame"),
     (('bpy.types.POSE_OT_breakdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a constraint to the active bone"),
     (('bpy.types.POSE_OT_constraint_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a constraint to the active bone, with target (where applicable) set to the selected Objects/Bones"),
     (('bpy.types.POSE_OT_constraint_add_with_targets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Pose Constraints"),
     (('bpy.types.POSE_OT_constraints_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all constraints from the selected bones"),
     (('bpy.types.POSE_OT_constraints_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Constraints to Selected Bones"),
     (('bpy.types.POSE_OT_constraints_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy constraints to other selected bones"),
     (('bpy.types.POSE_OT_constraints_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Pose"),
     (('bpy.types.POSE_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the current pose of the selected bones to the internal clipboard"),
     (('bpy.types.POSE_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add IK to Bone"),
     (('bpy.types.POSE_OT_ik_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add IK Constraint to the active Bone"),
     (('bpy.types.POSE_OT_ik_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "With Targets"),
     (('bpy.types.POSE_OT_ik_add.with_targets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assign IK Constraint with targets derived from the select bones/objects"),
     (('bpy.types.POSE_OT_ik_add.with_targets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove IK"),
     (('bpy.types.POSE_OT_ik_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all IK Constraints from selected bones"),
     (('bpy.types.POSE_OT_ik_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Pose Location"),
     (('bpy.types.POSE_OT_loc_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset locations of selected bones to their default values"),
     (('bpy.types.POSE_OT_loc_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Calculate Bone Paths"),
     (('bpy.types.POSE_OT_paths_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Calculate paths for the selected bones"),
     (('bpy.types.POSE_OT_paths_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which point on the bones is used when calculating paths"),
     (('bpy.types.POSE_OT_paths_calculate.bake_location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Bone Paths"),
     (('bpy.types.POSE_OT_paths_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only clear motion paths of selected bones"),
     (('bpy.types.POSE_OT_paths_clear.only_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Range from Scene"),
     (('bpy.types.POSE_OT_paths_range_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update frame range for motion paths from the Scene's current frame range"),
     (('bpy.types.POSE_OT_paths_range_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Bone Paths"),
     (('bpy.types.POSE_OT_paths_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate paths for bones that already have them"),
     (('bpy.types.POSE_OT_paths_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Propagate Pose"),
     (('bpy.types.POSE_OT_propagate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected aspects of the current pose to subsequent poses already keyframed"),
     (('bpy.types.POSE_OT_propagate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame to stop propagating frames to (for 'Before Frame' mode)"),
     (('bpy.types.POSE_OT_propagate.end_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Terminate Mode"),
     (('bpy.types.POSE_OT_propagate.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used to determine when to stop propagating pose to keyframes"),
     (('bpy.types.POSE_OT_propagate.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To Next Keyframe"),
     (("bpy.types.POSE_OT_propagate.mode:'NEXT_KEY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to first keyframe following the current frame only"),
     (("bpy.types.POSE_OT_propagate.mode:'NEXT_KEY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To Last Keyframe"),
     (("bpy.types.POSE_OT_propagate.mode:'LAST_KEY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to the last keyframe only (i.e. making action cyclic)"),
     (("bpy.types.POSE_OT_propagate.mode:'LAST_KEY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Before Frame"),
     (("bpy.types.POSE_OT_propagate.mode:'BEFORE_FRAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to all keyframes between current frame and 'Frame' property"),
     (("bpy.types.POSE_OT_propagate.mode:'BEFORE_FRAME'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Before Last Keyframe"),
     (("bpy.types.POSE_OT_propagate.mode:'BEFORE_END'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to all keyframes from current frame until no more are found"),
     (("bpy.types.POSE_OT_propagate.mode:'BEFORE_END'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to all selected keyframes"),
     (("bpy.types.POSE_OT_propagate.mode:'SELECTED_KEYS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Propagate pose to all keyframes occurring on frames with Scene Markers after the current frame"),
     (("bpy.types.POSE_OT_propagate.mode:'SELECTED_MARKERS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Push Pose from Breakdown"),
     (('bpy.types.POSE_OT_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exaggerate the current pose in regards to the breakdown pose"),
     (('bpy.types.POSE_OT_push',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Quats"),
     (('bpy.types.POSE_OT_quaternions_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip quaternion values to achieve desired rotations, while maintaining the same orientations"),
     (('bpy.types.POSE_OT_quaternions_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Relax Pose to Breakdown"),
     (('bpy.types.POSE_OT_relax',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make the current pose more similar to its breakdown pose"),
     (('bpy.types.POSE_OT_relax',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reveal Selected"),
     (('bpy.types.POSE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all bones hidden in Pose Mode"),
     (('bpy.types.POSE_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Pose Rotation"),
     (('bpy.types.POSE_OT_rot_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset rotations of selected bones to their default values"),
     (('bpy.types.POSE_OT_rot_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Rotation Mode"),
     (('bpy.types.POSE_OT_rotation_mode_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the rotation representation used by selected bones"),
     (('bpy.types.POSE_OT_rotation_mode_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Pose Scale"),
     (('bpy.types.POSE_OT_scale_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset scaling of selected bones to their default values"),
     (('bpy.types.POSE_OT_scale_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Constraint Target"),
     (('bpy.types.POSE_OT_select_constraint_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select bones used as targets for the currently selected bones"),
     (('bpy.types.POSE_OT_select_constraint_target',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all visible bones grouped by similar properties"),
     (('bpy.types.POSE_OT_select_grouped',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Same collections as the active bone"),
     (("bpy.types.POSE_OT_select_grouped.type:'COLLECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Same color as the active bone"),
     (("bpy.types.POSE_OT_select_grouped.type:'COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All bones affected by active Keying Set"),
     (("bpy.types.POSE_OT_select_grouped.type:'KEYINGSET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Connected"),
     (('bpy.types.POSE_OT_select_linked',
       'bpy.types.POSE_OT_select_linked_pick'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select bones linked by parent/child connections under the mouse cursor"),
     (('bpy.types.POSE_OT_select_linked_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Parent Bone"),
     (('bpy.types.POSE_OT_select_parent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select bones that are parents of the currently selected bones"),
     (('bpy.types.POSE_OT_select_parent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Pose Transforms"),
     (('bpy.types.POSE_OT_transforms_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset location, rotation, and scaling of selected bones to their default values"),
     (('bpy.types.POSE_OT_transforms_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear User Transforms"),
     (('bpy.types.POSE_OT_user_transforms_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset pose bone transforms to keyframed state"),
     (('bpy.types.POSE_OT_user_transforms_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only visible/selected bones"),
     (('bpy.types.POSE_OT_user_transforms_clear.only_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Apply Visual Transform to Pose"),
     (('bpy.types.POSE_OT_visual_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply final constrained position of pose bones to their transform"),
     (('bpy.types.POSE_OT_visual_transform_apply',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Add-on"),
     (('bpy.types.PREFERENCES_OT_addon_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the add-on from the file system"),
     (('bpy.types.PREFERENCES_OT_addon_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Module name of the add-on to remove"),
     (('bpy.types.PREFERENCES_OT_addon_remove.module',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show add-on preferences"),
     (('bpy.types.PREFERENCES_OT_addon_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Install Template from File..."),
     (('bpy.types.PREFERENCES_OT_app_template_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install an application template"),
     (('bpy.types.PREFERENCES_OT_app_template_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove existing template with the same ID"),
     (('bpy.types.PREFERENCES_OT_app_template_install.overwrite',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Asset Library"),
     (('bpy.types.PREFERENCES_OT_asset_library_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a directory to be used by the Asset Browser as source of assets"),
     (('bpy.types.PREFERENCES_OT_asset_library_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Asset Library"),
     (('bpy.types.PREFERENCES_OT_asset_library_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a path to a .blend file, so the Asset Browser will not attempt to show it anymore"),
     (('bpy.types.PREFERENCES_OT_asset_library_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Register File Association"),
     (('bpy.types.PREFERENCES_OT_associate_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use this installation for .blend files and to display thumbnails"),
     (('bpy.types.PREFERENCES_OT_associate_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Auto-Execution Path"),
     (('bpy.types.PREFERENCES_OT_autoexec_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add path to exclude from auto-execution"),
     (('bpy.types.PREFERENCES_OT_autoexec_path_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Auto-Execution Path"),
     (('bpy.types.PREFERENCES_OT_autoexec_path_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove path to exclude from auto-execution"),
     (('bpy.types.PREFERENCES_OT_autoexec_path_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Previous Settings"),
     (('bpy.types.PREFERENCES_OT_copy_prev',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy settings from previous version"),
     (('bpy.types.PREFERENCES_OT_copy_prev',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Extension Repository"),
     (('bpy.types.PREFERENCES_OT_extension_repo_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a directory to be used as a local extension repository"),
     (('bpy.types.PREFERENCES_OT_extension_repo_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Extension Repository"),
     (('bpy.types.PREFERENCES_OT_extension_repo_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove an extension repository"),
     (('bpy.types.PREFERENCES_OT_extension_repo_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Activate Keyconfig"),
     (('bpy.types.PREFERENCES_OT_keyconfig_activate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export Key Configuration..."),
     (('bpy.types.PREFERENCES_OT_keyconfig_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export key configuration to a Python script"),
     (('bpy.types.PREFERENCES_OT_keyconfig_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Keymaps"),
     (('bpy.types.PREFERENCES_OT_keyconfig_export.all',
       'bpy.types.PREFERENCES_OT_keymap_restore.all'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write all keymaps (not just user modified)"),
     (('bpy.types.PREFERENCES_OT_keyconfig_export.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import Key Configuration..."),
     (('bpy.types.PREFERENCES_OT_keyconfig_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import key configuration from a Python script"),
     (('bpy.types.PREFERENCES_OT_keyconfig_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Original"),
     (('bpy.types.PREFERENCES_OT_keyconfig_import.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep original file after copying to configuration folder"),
     (('bpy.types.PREFERENCES_OT_keyconfig_import.keep_original',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Key Config"),
     (('bpy.types.PREFERENCES_OT_keyconfig_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove key config"),
     (('bpy.types.PREFERENCES_OT_keyconfig_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Test Key Configuration for Conflicts"),
     (('bpy.types.PREFERENCES_OT_keyconfig_test',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Test key configuration for conflicts"),
     (('bpy.types.PREFERENCES_OT_keyconfig_test',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Key Map Item"),
     (('bpy.types.PREFERENCES_OT_keyitem_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add key map item"),
     (('bpy.types.PREFERENCES_OT_keyitem_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Key Map Item"),
     (('bpy.types.PREFERENCES_OT_keyitem_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove key map item"),
     (('bpy.types.PREFERENCES_OT_keyitem_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Item Identifier"),
     (('bpy.types.PREFERENCES_OT_keyitem_remove.item_id',
       'bpy.types.PREFERENCES_OT_keyitem_restore.item_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of the item to remove"),
     (('bpy.types.PREFERENCES_OT_keyitem_remove.item_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Restore Key Map Item"),
     (('bpy.types.PREFERENCES_OT_keyitem_restore',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore key map item"),
     (('bpy.types.PREFERENCES_OT_keyitem_restore',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of the item to restore"),
     (('bpy.types.PREFERENCES_OT_keyitem_restore.item_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Restore Key Map(s)"),
     (('bpy.types.PREFERENCES_OT_keymap_restore',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore key map(s)"),
     (('bpy.types.PREFERENCES_OT_keymap_restore',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore all keymaps to default"),
     (('bpy.types.PREFERENCES_OT_keymap_restore.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset to Default Theme"),
     (('bpy.types.PREFERENCES_OT_reset_default_theme',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset to the default theme colors"),
     (('bpy.types.PREFERENCES_OT_reset_default_theme',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Python Script Directory"),
     (('bpy.types.PREFERENCES_OT_script_directory_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter Folders"),
     (('bpy.types.PREFERENCES_OT_script_directory_add.filter_folder',
       'bpy.types.PREFERENCES_OT_studiolight_install.filter_folder'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Python Script Directory"),
     (('bpy.types.PREFERENCES_OT_script_directory_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of the script directory to remove"),
     (('bpy.types.PREFERENCES_OT_script_directory_remove.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Studio Light Settings"),
     (('bpy.types.PREFERENCES_OT_studiolight_copy_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Studio Light settings to the Studio Light editor"),
     (('bpy.types.PREFERENCES_OT_studiolight_copy_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Install Light"),
     (('bpy.types.PREFERENCES_OT_studiolight_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install a user defined light"),
     (('bpy.types.PREFERENCES_OT_studiolight_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install custom MatCaps"),
     (("bpy.types.PREFERENCES_OT_studiolight_install.type:'MATCAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install custom HDRIs"),
     (("bpy.types.PREFERENCES_OT_studiolight_install.type:'WORLD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Install custom Studio Lights"),
     (("bpy.types.PREFERENCES_OT_studiolight_install.type:'STUDIO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Custom Studio Light"),
     (('bpy.types.PREFERENCES_OT_studiolight_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save custom studio light from the studio light editor settings"),
     (('bpy.types.PREFERENCES_OT_studiolight_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show light preferences"),
     (('bpy.types.PREFERENCES_OT_studiolight_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Uninstall Studio Light"),
     (('bpy.types.PREFERENCES_OT_studiolight_uninstall',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete Studio Light"),
     (('bpy.types.PREFERENCES_OT_studiolight_uninstall',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Install Theme..."),
     (('bpy.types.PREFERENCES_OT_theme_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load and apply a Blender XML theme file"),
     (('bpy.types.PREFERENCES_OT_theme_install',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove existing theme file if exists"),
     (('bpy.types.PREFERENCES_OT_theme_install.overwrite',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove File Association"),
     (('bpy.types.PREFERENCES_OT_unassociate_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove this installation's associations with .blend files"),
     (('bpy.types.PREFERENCES_OT_unassociate_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add New Cache"),
     (('bpy.types.PTCACHE_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new cache"),
     (('bpy.types.PTCACHE_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake Physics"),
     (('bpy.types.PTCACHE_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake physics"),
     (('bpy.types.PTCACHE_OT_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake All Physics"),
     (('bpy.types.PTCACHE_OT_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake all physics"),
     (('bpy.types.PTCACHE_OT_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake from Cache"),
     (('bpy.types.PTCACHE_OT_bake_from_cache',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake from cache"),
     (('bpy.types.PTCACHE_OT_bake_from_cache',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Physics Bake"),
     (('bpy.types.PTCACHE_OT_free_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete physics bake"),
     (('bpy.types.PTCACHE_OT_free_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete All Physics Bakes"),
     (('bpy.types.PTCACHE_OT_free_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete all baked caches of all objects in the current scene"),
     (('bpy.types.PTCACHE_OT_free_bake_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Current Cache"),
     (('bpy.types.PTCACHE_OT_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete current cache"),
     (('bpy.types.PTCACHE_OT_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Integrator Preset"),
     (('bpy.types.RENDER_OT_cycles_integrator_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an Integrator Preset"),
     (('bpy.types.RENDER_OT_cycles_integrator_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Performance Preset"),
     (('bpy.types.RENDER_OT_cycles_performance_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an Performance Preset"),
     (('bpy.types.RENDER_OT_cycles_performance_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Sampling Preset"),
     (('bpy.types.RENDER_OT_cycles_sampling_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Sampling Preset"),
     (('bpy.types.RENDER_OT_cycles_sampling_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Viewport Sampling Preset"),
     (('bpy.types.RENDER_OT_cycles_viewport_sampling_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Viewport Sampling Preset"),
     (('bpy.types.RENDER_OT_cycles_viewport_sampling_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Viewport Render"),
     (('bpy.types.RENDER_OT_opengl',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Take a snapshot of the active viewport"),
     (('bpy.types.RENDER_OT_opengl',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render Keyframes Only"),
     (('bpy.types.RENDER_OT_opengl.render_keyed_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render only those frames where selected objects have a key in their animation data. Only used when rendering animation"),
     (('bpy.types.RENDER_OT_opengl.render_keyed_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Render using the sequencer's OpenGL display"),
     (('bpy.types.RENDER_OT_opengl.sequencer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View Context"),
     (('bpy.types.RENDER_OT_opengl.view_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the current 3D view for rendering, else use scene settings"),
     (('bpy.types.RENDER_OT_opengl.view_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Play Rendered Animation"),
     (('bpy.types.RENDER_OT_play_rendered_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Play back rendered frames/movies using an external player"),
     (('bpy.types.RENDER_OT_play_rendered_anim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Render Preset"),
     (('bpy.types.RENDER_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Render Preset"),
     (('bpy.types.RENDER_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Shutter Curve Preset"),
     (('bpy.types.RENDER_OT_shutter_curve_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set shutter curve"),
     (('bpy.types.RENDER_OT_shutter_curve_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cancel Render View"),
     (('bpy.types.RENDER_OT_view_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cancel show render view"),
     (('bpy.types.RENDER_OT_view_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show/Hide Render View"),
     (('bpy.types.RENDER_OT_view_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle show render view"),
     (('bpy.types.RENDER_OT_view_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Bake to Keyframes"),
     (('bpy.types.RIGIDBODY_OT_bake_to_keyframes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake rigid body transformations of selected objects to keyframes"),
     (('bpy.types.RIGIDBODY_OT_bake_to_keyframes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Connect Rigid Bodies"),
     (('bpy.types.RIGIDBODY_OT_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create rigid body constraints between selected rigid bodies"),
     (('bpy.types.RIGIDBODY_OT_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of generated constraint"),
     (('bpy.types.RIGIDBODY_OT_connect.con_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connection Pattern"),
     (('bpy.types.RIGIDBODY_OT_connect.connection_pattern',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pattern used to connect objects"),
     (('bpy.types.RIGIDBODY_OT_connect.connection_pattern',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect selected objects to the active object"),
     (("bpy.types.RIGIDBODY_OT_connect.connection_pattern:'SELECTED_TO_ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Chain by Distance"),
     (("bpy.types.RIGIDBODY_OT_connect.connection_pattern:'CHAIN_DISTANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Connect objects as a chain based on distance, starting at the active object"),
     (("bpy.types.RIGIDBODY_OT_connect.connection_pattern:'CHAIN_DISTANCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Constraint pivot location"),
     (('bpy.types.RIGIDBODY_OT_connect.pivot_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pivot location is between the constrained rigid bodies"),
     (("bpy.types.RIGIDBODY_OT_connect.pivot_type:'CENTER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pivot location is at the active object position"),
     (("bpy.types.RIGIDBODY_OT_connect.pivot_type:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pivot location is at the selected object position"),
     (("bpy.types.RIGIDBODY_OT_connect.pivot_type:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Rigid Body Constraint"),
     (('bpy.types.RIGIDBODY_OT_constraint_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Rigid Body Constraint to active object"),
     (('bpy.types.RIGIDBODY_OT_constraint_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rigid Body Constraint Type"),
     (('bpy.types.RIGIDBODY_OT_constraint_add.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Rigid Body Constraint"),
     (('bpy.types.RIGIDBODY_OT_constraint_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Rigid Body Constraint from Object"),
     (('bpy.types.RIGIDBODY_OT_constraint_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Calculate Mass"),
     (('bpy.types.RIGIDBODY_OT_mass_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically calculate mass values for Rigid Body Objects based on volume"),
     (('bpy.types.RIGIDBODY_OT_mass_calculate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Density value (kg/m^3), allows custom value if the 'Custom' preset is used"),
     (('bpy.types.RIGIDBODY_OT_mass_calculate.density',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Material Preset"),
     (('bpy.types.RIGIDBODY_OT_mass_calculate.material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of material that objects are made of (determines material density)"),
     (('bpy.types.RIGIDBODY_OT_mass_calculate.material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Rigid Body"),
     (('bpy.types.RIGIDBODY_OT_object_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add active object as Rigid Body"),
     (('bpy.types.RIGIDBODY_OT_object_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rigid Body Type"),
     (('bpy.types.RIGIDBODY_OT_object_add.type',
       'bpy.types.RIGIDBODY_OT_objects_add.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Rigid Body"),
     (('bpy.types.RIGIDBODY_OT_object_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Rigid Body settings from Object"),
     (('bpy.types.RIGIDBODY_OT_object_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Rigid Body Settings"),
     (('bpy.types.RIGIDBODY_OT_object_settings_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Rigid Body settings from active object to selected"),
     (('bpy.types.RIGIDBODY_OT_object_settings_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Rigid Bodies"),
     (('bpy.types.RIGIDBODY_OT_objects_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add selected objects as Rigid Bodies"),
     (('bpy.types.RIGIDBODY_OT_objects_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Rigid Bodies"),
     (('bpy.types.RIGIDBODY_OT_objects_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove selected objects from Rigid Body simulation"),
     (('bpy.types.RIGIDBODY_OT_objects_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Collision Shape"),
     (('bpy.types.RIGIDBODY_OT_shape_change',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change collision shapes for selected Rigid Body Objects"),
     (('bpy.types.RIGIDBODY_OT_shape_change',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rigid Body Shape"),
     (('bpy.types.RIGIDBODY_OT_shape_change.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Rigid Body World"),
     (('bpy.types.RIGIDBODY_OT_world_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add Rigid Body simulation world to the current scene"),
     (('bpy.types.RIGIDBODY_OT_world_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Rigid Body World"),
     (('bpy.types.RIGIDBODY_OT_world_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Rigid Body simulation world from the current scene"),
     (('bpy.types.RIGIDBODY_OT_world_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Scene"),
     (('bpy.types.SCENE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete active scene"),
     (('bpy.types.SCENE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Edge Marks to Keying Set"),
     (('bpy.types.SCENE_OT_freestyle_add_edge_marks_to_keying_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add the data paths to the Freestyle Edge Mark property of selected edges to the active keying set"),
     (('bpy.types.SCENE_OT_freestyle_add_edge_marks_to_keying_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Face Marks to Keying Set"),
     (('bpy.types.SCENE_OT_freestyle_add_face_marks_to_keying_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add the data paths to the Freestyle Face Mark property of selected polygons to the active keying set"),
     (('bpy.types.SCENE_OT_freestyle_add_face_marks_to_keying_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Alpha Transparency Modifier"),
     (('bpy.types.SCENE_OT_freestyle_alpha_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an alpha transparency modifier to the line style associated with the active lineset"),
     (('bpy.types.SCENE_OT_freestyle_alpha_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Line Color Modifier"),
     (('bpy.types.SCENE_OT_freestyle_color_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a line color modifier to the line style associated with the active lineset"),
     (('bpy.types.SCENE_OT_freestyle_color_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fill Range by Selection"),
     (('bpy.types.SCENE_OT_freestyle_fill_range_by_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill the Range Min/Max entries by the min/max distance between selected mesh objects and the source object (either a user-specified object or the active camera)"),
     (('bpy.types.SCENE_OT_freestyle_fill_range_by_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the modifier to work on"),
     (('bpy.types.SCENE_OT_freestyle_fill_range_by_selection.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of the modifier to work on"),
     (('bpy.types.SCENE_OT_freestyle_fill_range_by_selection.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Color modifier type"),
     (("bpy.types.SCENE_OT_freestyle_fill_range_by_selection.type:'COLOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alpha modifier type"),
     (("bpy.types.SCENE_OT_freestyle_fill_range_by_selection.type:'ALPHA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Thickness modifier type"),
     (("bpy.types.SCENE_OT_freestyle_fill_range_by_selection.type:'THICKNESS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Stroke Geometry Modifier"),
     (('bpy.types.SCENE_OT_freestyle_geometry_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a stroke geometry modifier to the line style associated with the active lineset"),
     (('bpy.types.SCENE_OT_freestyle_geometry_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Line Set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a line set into the list of line sets"),
     (('bpy.types.SCENE_OT_freestyle_lineset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Line Set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the active line set to the internal clipboard"),
     (('bpy.types.SCENE_OT_freestyle_lineset_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Line Set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the position of the active line set within the list of line sets"),
     (('bpy.types.SCENE_OT_freestyle_lineset_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the active line set towards"),
     (('bpy.types.SCENE_OT_freestyle_lineset_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Line Set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste the internal clipboard content to the active line set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Line Set"),
     (('bpy.types.SCENE_OT_freestyle_lineset_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the active line set from the list of line sets"),
     (('bpy.types.SCENE_OT_freestyle_lineset_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Line Style"),
     (('bpy.types.SCENE_OT_freestyle_linestyle_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new line style, reusable by multiple line sets"),
     (('bpy.types.SCENE_OT_freestyle_linestyle_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate the modifier within the list of modifiers"),
     (('bpy.types.SCENE_OT_freestyle_modifier_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Modifier"),
     (('bpy.types.SCENE_OT_freestyle_modifier_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the modifier within the list of modifiers"),
     (('bpy.types.SCENE_OT_freestyle_modifier_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the chosen modifier towards"),
     (('bpy.types.SCENE_OT_freestyle_modifier_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the modifier from the list of modifiers"),
     (('bpy.types.SCENE_OT_freestyle_modifier_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Freestyle Module"),
     (('bpy.types.SCENE_OT_freestyle_module_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a style module into the list of modules"),
     (('bpy.types.SCENE_OT_freestyle_module_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Freestyle Module"),
     (('bpy.types.SCENE_OT_freestyle_module_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the position of the style module within in the list of style modules"),
     (('bpy.types.SCENE_OT_freestyle_module_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction to move the chosen style module towards"),
     (('bpy.types.SCENE_OT_freestyle_module_move.direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Style Module File"),
     (('bpy.types.SCENE_OT_freestyle_module_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a style module file"),
     (('bpy.types.SCENE_OT_freestyle_module_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make internal"),
     (('bpy.types.SCENE_OT_freestyle_module_open.make_internal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make module file internal after loading"),
     (('bpy.types.SCENE_OT_freestyle_module_open.make_internal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Freestyle Module"),
     (('bpy.types.SCENE_OT_freestyle_module_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the style module from the stack"),
     (('bpy.types.SCENE_OT_freestyle_module_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Freestyle Stroke Material"),
     (('bpy.types.SCENE_OT_freestyle_stroke_material_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Freestyle stroke material for testing"),
     (('bpy.types.SCENE_OT_freestyle_stroke_material_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Line Thickness Modifier"),
     (('bpy.types.SCENE_OT_freestyle_thickness_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a line thickness modifier to the line style associated with the active lineset"),
     (('bpy.types.SCENE_OT_freestyle_thickness_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Grease Pencil Brush Preset"),
     (('bpy.types.SCENE_OT_gpencil_brush_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove grease pencil brush preset"),
     (('bpy.types.SCENE_OT_gpencil_brush_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Grease Pencil Material Preset"),
     (('bpy.types.SCENE_OT_gpencil_material_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove grease pencil material preset"),
     (('bpy.types.SCENE_OT_gpencil_material_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake the active view layer lighting"),
     (('bpy.types.SCENE_OT_light_cache_bake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bake both irradiance grids and reflection cubemaps"),
     (("bpy.types.SCENE_OT_light_cache_bake.subset:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cubemaps Only"),
     (("bpy.types.SCENE_OT_light_cache_bake.subset:'CUBEMAPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to only bake reflection cubemaps if irradiance grids are up to date"),
     (("bpy.types.SCENE_OT_light_cache_bake.subset:'CUBEMAPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Scene"),
     (('bpy.types.SCENE_OT_new',
       'bpy.types.SCENE_OT_new_sequencer'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new scene by type"),
     (('bpy.types.SCENE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Scene", "Type"),
     (('bpy.types.SCENE_OT_new.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Scene", "New"),
     (("bpy.types.SCENE_OT_new.type:'NEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new, empty scene with default settings"),
     (("bpy.types.SCENE_OT_new.type:'NEW'",
       "bpy.types.SCENE_OT_new_sequencer.type:'NEW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Scene", "Copy Settings"),
     (("bpy.types.SCENE_OT_new.type:'EMPTY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new, empty scene, and copy settings from the current scene"),
     (("bpy.types.SCENE_OT_new.type:'EMPTY'",
       "bpy.types.SCENE_OT_new_sequencer.type:'EMPTY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Scene", "Linked Copy"),
     (("bpy.types.SCENE_OT_new.type:'LINK_COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link in the collections from the current scene (shallow copy)"),
     (("bpy.types.SCENE_OT_new.type:'LINK_COPY'",
       "bpy.types.SCENE_OT_new_sequencer.type:'LINK_COPY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Scene", "Full Copy"),
     (("bpy.types.SCENE_OT_new.type:'FULL_COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make a full copy of the current scene"),
     (("bpy.types.SCENE_OT_new.type:'FULL_COPY'",
       "bpy.types.SCENE_OT_new_sequencer.type:'FULL_COPY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new scene by type in the sequence editor and assign to active strip"),
     (('bpy.types.SCENE_OT_new_sequencer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy Settings"),
     (("bpy.types.SCENE_OT_new_sequencer.type:'EMPTY'",
       "bpy.types.SCENE_OT_view_layer_add.type:'COPY'",
       "bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'EMPTY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Linked Copy"),
     (("bpy.types.SCENE_OT_new_sequencer.type:'LINK_COPY'",
       "bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'LINK_COPY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Full Copy"),
     (("bpy.types.SCENE_OT_new_sequencer.type:'FULL_COPY'",
       "bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'FULL_COPY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Render View"),
     (('bpy.types.SCENE_OT_render_view_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a render view"),
     (('bpy.types.SCENE_OT_render_view_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Render View"),
     (('bpy.types.SCENE_OT_render_view_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected render view"),
     (('bpy.types.SCENE_OT_render_view_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add View Layer"),
     (('bpy.types.SCENE_OT_view_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a view layer"),
     (('bpy.types.SCENE_OT_view_layer_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new view layer"),
     (("bpy.types.SCENE_OT_view_layer_add.type:'NEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy settings of current view layer"),
     (("bpy.types.SCENE_OT_view_layer_add.type:'COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new view layer with all collections disabled"),
     (("bpy.types.SCENE_OT_view_layer_add.type:'EMPTY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add AOV"),
     (('bpy.types.SCENE_OT_view_layer_add_aov',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Shader AOV"),
     (('bpy.types.SCENE_OT_view_layer_add_aov',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Lightgroup"),
     (('bpy.types.SCENE_OT_view_layer_add_lightgroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Light Group"),
     (('bpy.types.SCENE_OT_view_layer_add_lightgroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of newly created lightgroup"),
     (('bpy.types.SCENE_OT_view_layer_add_lightgroup.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Used Lightgroups"),
     (('bpy.types.SCENE_OT_view_layer_add_used_lightgroups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add all used Light Groups"),
     (('bpy.types.SCENE_OT_view_layer_add_used_lightgroups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove View Layer"),
     (('bpy.types.SCENE_OT_view_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected view layer"),
     (('bpy.types.SCENE_OT_view_layer_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove AOV"),
     (('bpy.types.SCENE_OT_view_layer_remove_aov',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Active AOV"),
     (('bpy.types.SCENE_OT_view_layer_remove_aov',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Lightgroup"),
     (('bpy.types.SCENE_OT_view_layer_remove_lightgroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove Active Lightgroup"),
     (('bpy.types.SCENE_OT_view_layer_remove_lightgroup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Unused Lightgroups"),
     (('bpy.types.SCENE_OT_view_layer_remove_unused_lightgroups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all unused Light Groups"),
     (('bpy.types.SCENE_OT_view_layer_remove_unused_lightgroups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cancel Animation"),
     (('bpy.types.SCREEN_OT_animation_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cancel animation, returning to the original frame"),
     (('bpy.types.SCREEN_OT_animation_cancel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore Frame"),
     (('bpy.types.SCREEN_OT_animation_cancel.restore_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Restore the frame when animation was initialized"),
     (('bpy.types.SCREEN_OT_animation_cancel.restore_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Animation Step"),
     (('bpy.types.SCREEN_OT_animation_step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Step through animation by position"),
     (('bpy.types.SCREEN_OT_animation_step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Close Area"),
     (('bpy.types.SCREEN_OT_area_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Close selected area"),
     (('bpy.types.SCREEN_OT_area_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Area into New Window"),
     (('bpy.types.SCREEN_OT_area_dupli',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected area into new window"),
     (('bpy.types.SCREEN_OT_area_dupli',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Join Area"),
     (('bpy.types.SCREEN_OT_area_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join selected areas into new window"),
     (('bpy.types.SCREEN_OT_area_join',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Area Edges"),
     (('bpy.types.SCREEN_OT_area_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected area edges"),
     (('bpy.types.SCREEN_OT_area_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Area Options"),
     (('bpy.types.SCREEN_OT_area_options',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Operations for splitting and merging"),
     (('bpy.types.SCREEN_OT_area_options',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Split Area"),
     (('bpy.types.SCREEN_OT_area_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split selected area into new windows"),
     (('bpy.types.SCREEN_OT_area_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Swap Areas"),
     (('bpy.types.SCREEN_OT_area_swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap selected areas screen positions"),
     (('bpy.types.SCREEN_OT_area_swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Back to Previous Screen"),
     (('bpy.types.SCREEN_OT_back_to_previous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Revert back to the original screen layout, before fullscreen area overlay"),
     (('bpy.types.SCREEN_OT_back_to_previous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Screen"),
     (('bpy.types.SCREEN_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete active screen"),
     (('bpy.types.SCREEN_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Drivers Editor"),
     (('bpy.types.SCREEN_OT_drivers_editor_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show drivers editor in a separate window"),
     (('bpy.types.SCREEN_OT_drivers_editor_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Expand/Collapse Header Menus"),
     (('bpy.types.SCREEN_OT_header_toggle_menus',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expand or collapse the header pulldown menus"),
     (('bpy.types.SCREEN_OT_header_toggle_menus',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Show Info Log"),
     (('bpy.types.SCREEN_OT_info_log_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show info log in a separate window"),
     (('bpy.types.SCREEN_OT_info_log_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Jump to Marker"),
     (('bpy.types.SCREEN_OT_marker_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Jump to previous/next marker"),
     (('bpy.types.SCREEN_OT_marker_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Next Marker"),
     (('bpy.types.SCREEN_OT_marker_jump.next',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Screen"),
     (('bpy.types.SCREEN_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new screen"),
     (('bpy.types.SCREEN_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Region Alpha"),
     (('bpy.types.SCREEN_OT_region_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend in and out overlapping region"),
     (('bpy.types.SCREEN_OT_region_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Region"),
     (('bpy.types.SCREEN_OT_region_context_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display region context menu"),
     (('bpy.types.SCREEN_OT_region_context_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip Region"),
     (('bpy.types.SCREEN_OT_region_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle the region's alignment (left/right or top/bottom)"),
     (('bpy.types.SCREEN_OT_region_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Quad View"),
     (('bpy.types.SCREEN_OT_region_quadview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split selected area into camera, front, right, and top views"),
     (('bpy.types.SCREEN_OT_region_quadview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scale Region Size"),
     (('bpy.types.SCREEN_OT_region_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale selected area"),
     (('bpy.types.SCREEN_OT_region_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Screen"),
     (('bpy.types.SCREEN_OT_screen_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cycle through available screens"),
     (('bpy.types.SCREEN_OT_screen_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Screenshot"),
     (('bpy.types.SCREEN_OT_screenshot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Capture a picture of the whole Blender window"),
     (('bpy.types.SCREEN_OT_screenshot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Screenshot (Editor)"),
     (('bpy.types.SCREEN_OT_screenshot_area',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Capture a picture of an editor"),
     (('bpy.types.SCREEN_OT_screenshot_area',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean Up Space Data"),
     (('bpy.types.SCREEN_OT_spacedata_cleanup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove unused settings for invisible editors"),
     (('bpy.types.SCREEN_OT_spacedata_cleanup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Execute a Python Preset"),
     (('bpy.types.SCRIPT_OT_execute_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a preset"),
     (('bpy.types.SCRIPT_OT_execute_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Menu ID Name"),
     (('bpy.types.SCRIPT_OT_execute_preset.menu_idname',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ID name of the menu this was called from"),
     (('bpy.types.SCRIPT_OT_execute_preset.menu_idname',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Run Python File"),
     (('bpy.types.SCRIPT_OT_python_file_run',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Run Python file"),
     (('bpy.types.SCRIPT_OT_python_file_run',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Scripts"),
     (('bpy.types.SCRIPT_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload scripts"),
     (('bpy.types.SCRIPT_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Minimum Distance"),
     (('bpy.types.SCULPT_CURVES_OT_min_distance_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the minimum distance used by the density brush"),
     (('bpy.types.SCULPT_CURVES_OT_min_distance_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Grow"),
     (('bpy.types.SCULPT_CURVES_OT_select_grow',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select curves which are close to curves that are selected already"),
     (('bpy.types.SCULPT_CURVES_OT_select_grow',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "By how much to grow the selection"),
     (('bpy.types.SCULPT_CURVES_OT_select_grow.distance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Constant per Curve"),
     (('bpy.types.SCULPT_CURVES_OT_select_random.constant_per_curve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The generated random number is the same for every control point of a curve"),
     (('bpy.types.SCULPT_CURVES_OT_select_random.constant_per_curve',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum value for the random selection"),
     (('bpy.types.SCULPT_CURVES_OT_select_random.min',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Partial"),
     (('bpy.types.SCULPT_CURVES_OT_select_random.partial',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow points or curves to be selected partially"),
     (('bpy.types.SCULPT_CURVES_OT_select_random.partial',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter Cloth"),
     (('bpy.types.SCULPT_OT_cloth_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Applies a cloth simulation deformation to the entire mesh"),
     (('bpy.types.SCULPT_OT_cloth_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius used for calculating area normal on initial click,\nin percentage of brush radius"),
     (('bpy.types.SCULPT_OT_cloth_filter.area_normal_radius',
       'bpy.types.SCULPT_OT_color_filter.area_normal_radius',
       'bpy.types.SCULPT_OT_mesh_filter.area_normal_radius'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force Axis"),
     (('bpy.types.SCULPT_OT_cloth_filter.force_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the force in the selected axis"),
     (('bpy.types.SCULPT_OT_cloth_filter.force_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply force in the X axis"),
     (("bpy.types.SCULPT_OT_cloth_filter.force_axis:'X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply force in the Y axis"),
     (("bpy.types.SCULPT_OT_cloth_filter.force_axis:'Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply force in the Z axis"),
     (("bpy.types.SCULPT_OT_cloth_filter.force_axis:'Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How many times to repeat the filter"),
     (('bpy.types.SCULPT_OT_cloth_filter.iteration_count',
       'bpy.types.SCULPT_OT_color_filter.iteration_count',
       'bpy.types.SCULPT_OT_mesh_filter.iteration_count'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orientation of the axis to limit the filter force"),
     (('bpy.types.SCULPT_OT_cloth_filter.orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the local axis to limit the force and set the gravity direction"),
     (("bpy.types.SCULPT_OT_cloth_filter.orientation:'LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the global axis to limit the force and set the gravity direction"),
     (("bpy.types.SCULPT_OT_cloth_filter.orientation:'WORLD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the view axis to limit the force and set the gravity direction"),
     (("bpy.types.SCULPT_OT_cloth_filter.orientation:'VIEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Starting Mouse"),
     (('bpy.types.SCULPT_OT_cloth_filter.start_mouse',
       'bpy.types.SCULPT_OT_color_filter.start_mouse',
       'bpy.types.SCULPT_OT_mesh_filter.start_mouse'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter strength"),
     (('bpy.types.SCULPT_OT_cloth_filter.strength',
       'bpy.types.SCULPT_OT_color_filter.strength',
       'bpy.types.SCULPT_OT_mesh_filter.strength'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Operation that is going to be applied to the mesh"),
     (('bpy.types.SCULPT_OT_cloth_filter.type',
       'bpy.types.SCULPT_OT_mesh_filter.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Applies gravity to the simulation"),
     (("bpy.types.SCULPT_OT_cloth_filter.type:'GRAVITY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Inflates the cloth"),
     (("bpy.types.SCULPT_OT_cloth_filter.type:'INFLATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Expands the cloth's dimensions"),
     (("bpy.types.SCULPT_OT_cloth_filter.type:'EXPAND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pulls the cloth to the cursor's start position"),
     (("bpy.types.SCULPT_OT_cloth_filter.type:'PINCH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scales the mesh as a soft body using the origin of the object as scale"),
     (("bpy.types.SCULPT_OT_cloth_filter.type:'SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Collisions"),
     (('bpy.types.SCULPT_OT_cloth_filter.use_collisions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collide with other collider objects in the scene"),
     (('bpy.types.SCULPT_OT_cloth_filter.use_collisions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Face Sets"),
     (('bpy.types.SCULPT_OT_cloth_filter.use_face_sets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the filter only to the Face Set under the cursor"),
     (('bpy.types.SCULPT_OT_cloth_filter.use_face_sets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter Color"),
     (('bpy.types.SCULPT_OT_color_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Applies a filter to modify the active color attribute"),
     (('bpy.types.SCULPT_OT_color_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Fill Color"),
     (('bpy.types.SCULPT_OT_color_filter.fill_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill with a specific color"),
     (("bpy.types.SCULPT_OT_color_filter.type:'FILL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change hue"),
     (("bpy.types.SCULPT_OT_color_filter.type:'HUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change saturation"),
     (("bpy.types.SCULPT_OT_color_filter.type:'SATURATION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change value"),
     (("bpy.types.SCULPT_OT_color_filter.type:'VALUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change brightness"),
     (("bpy.types.SCULPT_OT_color_filter.type:'BRIGHTNESS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change contrast"),
     (("bpy.types.SCULPT_OT_color_filter.type:'CONTRAST'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth colors"),
     (("bpy.types.SCULPT_OT_color_filter.type:'SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change red channel"),
     (("bpy.types.SCULPT_OT_color_filter.type:'RED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change green channel"),
     (("bpy.types.SCULPT_OT_color_filter.type:'GREEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change blue channel"),
     (("bpy.types.SCULPT_OT_color_filter.type:'BLUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Detail Flood Fill"),
     (('bpy.types.SCULPT_OT_detail_flood_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flood fill the mesh with the selected detail setting"),
     (('bpy.types.SCULPT_OT_detail_flood_fill',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Dynamic Topology Toggle"),
     (('bpy.types.SCULPT_OT_dynamic_topology_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dynamic topology alters the mesh topology while sculpting"),
     (('bpy.types.SCULPT_OT_dynamic_topology_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Dyntopo Detail Size"),
     (('bpy.types.SCULPT_OT_dyntopo_detail_size_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modify the detail size of dyntopo interactively"),
     (('bpy.types.SCULPT_OT_dyntopo_detail_size_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Face Set Box Gesture"),
     (('bpy.types.SCULPT_OT_face_set_box_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add face set within the box as you move the brush"),
     (('bpy.types.SCULPT_OT_face_set_box_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Invert Face Set Visibility"),
     (('bpy.types.SCULPT_OT_face_set_invert_visibility',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert the visibility of the Face Sets of the sculpt"),
     (('bpy.types.SCULPT_OT_face_set_invert_visibility',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Face Set Lasso Gesture"),
     (('bpy.types.SCULPT_OT_face_set_lasso_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add face set within the lasso as you move the brush"),
     (('bpy.types.SCULPT_OT_face_set_lasso_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Face Set"),
     (('bpy.types.SCULPT_OT_face_sets_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new Face Set"),
     (('bpy.types.SCULPT_OT_face_sets_create',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Set from Masked"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'MASKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new Face Set from the masked faces"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'MASKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Set from Visible"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'VISIBLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new Face Set from the visible vertices"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'VISIBLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Set Full Mesh"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an unique Face Set with all faces in the sculpt"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Set from Edit Mode Selection"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'SELECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an Face Set corresponding to the Edit Mode face selection"),
     (("bpy.types.SCULPT_OT_face_sets_create.mode:'SELECTION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Init Face Sets"),
     (('bpy.types.SCULPT_OT_face_sets_init',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Initializes all Face Sets in the mesh"),
     (('bpy.types.SCULPT_OT_face_sets_init',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Loose Parts"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'LOOSE_PARTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a Face Set per loose part in the mesh"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'LOOSE_PARTS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Material Slots"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'MATERIALS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a Face Set per Material Slot"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'MATERIALS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Mesh Normals"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'NORMALS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Face Sets for Faces that have similar normal"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'NORMALS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from UV Seams"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'UV_SEAMS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Face Sets using UV Seams as boundaries"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'UV_SEAMS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Edge Creases"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'CREASES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Face Sets using Edge Creases as boundaries"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'CREASES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Bevel Weight"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'BEVEL_WEIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Face Sets using Bevel Weights as boundaries"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'BEVEL_WEIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Sharp Edges"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'SHARP_EDGES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Face Sets using Sharp Edges as boundaries"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'SHARP_EDGES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Face Sets from Face Set Boundaries"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'FACE_SET_BOUNDARIES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a Face Set per isolated Face Set"),
     (("bpy.types.SCULPT_OT_face_sets_init.mode:'FACE_SET_BOUNDARIES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum value to consider a certain attribute a boundary when creating the Face Sets"),
     (('bpy.types.SCULPT_OT_face_sets_init.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Randomize Face Sets Colors"),
     (('bpy.types.SCULPT_OT_face_sets_randomize_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generates a new set of random colors to render the Face Sets in the viewport"),
     (('bpy.types.SCULPT_OT_face_sets_randomize_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Creates a mask based on the active color attribute"),
     (('bpy.types.SCULPT_OT_mask_by_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Contiguous"),
     (('bpy.types.SCULPT_OT_mask_by_color.contiguous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mask only contiguous color areas"),
     (('bpy.types.SCULPT_OT_mask_by_color.contiguous',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert the generated mask"),
     (('bpy.types.SCULPT_OT_mask_by_color.invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve Previous Mask"),
     (('bpy.types.SCULPT_OT_mask_by_color.preserve_previous_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve the previous mask and add or subtract the new one generated by the colors"),
     (('bpy.types.SCULPT_OT_mask_by_color.preserve_previous_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much changes in color affect the mask generation"),
     (('bpy.types.SCULPT_OT_mask_by_color.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mask Filter"),
     (('bpy.types.SCULPT_OT_mask_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Applies a filter to modify the current mask"),
     (('bpy.types.SCULPT_OT_mask_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Auto Iteration Count"),
     (('bpy.types.SCULPT_OT_mask_filter.auto_iteration_count',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use a automatic number of iterations based on the number of vertices of the sculpt"),
     (('bpy.types.SCULPT_OT_mask_filter.auto_iteration_count',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Filter that is going to be applied to the mask"),
     (('bpy.types.SCULPT_OT_mask_filter.filter_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sharpen Mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SHARPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sharpen mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SHARPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grow Mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'GROW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grow mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'GROW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shrink Mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SHRINK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shrink mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'SHRINK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Increase Contrast"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'CONTRAST_INCREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Increase the contrast of the paint mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'CONTRAST_INCREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decrease Contrast"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'CONTRAST_DECREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decrease the contrast of the paint mask"),
     (("bpy.types.SCULPT_OT_mask_filter.filter_type:'CONTRAST_DECREASE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times that the filter is going to be applied"),
     (('bpy.types.SCULPT_OT_mask_filter.iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mask From Cavity"),
     (('bpy.types.SCULPT_OT_mask_from_cavity',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Creates a mask based on the curvature of the surface"),
     (('bpy.types.SCULPT_OT_mask_from_cavity',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cavity (Inverted)"),
     (('bpy.types.SCULPT_OT_mask_from_cavity.invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mix mode"),
     (('bpy.types.SCULPT_OT_mask_from_cavity.mix_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use settings from here"),
     (('bpy.types.SCULPT_OT_mask_from_cavity.settings_source',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use settings from operator properties"),
     (("bpy.types.SCULPT_OT_mask_from_cavity.settings_source:'OPERATOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use settings from brush"),
     (("bpy.types.SCULPT_OT_mask_from_cavity.settings_source:'BRUSH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use settings from scene"),
     (("bpy.types.SCULPT_OT_mask_from_cavity.settings_source:'SCENE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Init Mask"),
     (('bpy.types.SCULPT_OT_mask_init',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Creates a new mask for the entire mesh"),
     (('bpy.types.SCULPT_OT_mask_init',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Random per Vertex"),
     (("bpy.types.SCULPT_OT_mask_init.mode:'RANDOM_PER_VERTEX'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Random per Face Set"),
     (("bpy.types.SCULPT_OT_mask_init.mode:'RANDOM_PER_FACE_SET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Random per Loose Part"),
     (("bpy.types.SCULPT_OT_mask_init.mode:'RANDOM_PER_LOOSE_PART'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Filter Mesh"),
     (('bpy.types.SCULPT_OT_mesh_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Applies a filter to modify the current mesh"),
     (('bpy.types.SCULPT_OT_mesh_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply the deformation in the selected axis"),
     (('bpy.types.SCULPT_OT_mesh_filter.deform_axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deform in the X axis"),
     (("bpy.types.SCULPT_OT_mesh_filter.deform_axis:'X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deform in the Y axis"),
     (("bpy.types.SCULPT_OT_mesh_filter.deform_axis:'Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deform in the Z axis"),
     (("bpy.types.SCULPT_OT_mesh_filter.deform_axis:'Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orientation of the axis to limit the filter displacement"),
     (('bpy.types.SCULPT_OT_mesh_filter.orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the local axis to limit the displacement"),
     (("bpy.types.SCULPT_OT_mesh_filter.orientation:'LOCAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the global axis to limit the displacement"),
     (("bpy.types.SCULPT_OT_mesh_filter.orientation:'WORLD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the view axis to limit the displacement"),
     (("bpy.types.SCULPT_OT_mesh_filter.orientation:'VIEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curvature Smooth Iterations"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_curvature_smooth_iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much smooth the resulting shape is, ignoring high frequency details"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_curvature_smooth_iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Intensify Details"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_intensify_detail_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much creases and valleys are intensified"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_intensify_detail_strength',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth Ratio"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_smooth_ratio',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How much smoothing is applied to polished surfaces"),
     (('bpy.types.SCULPT_OT_mesh_filter.sharpen_smooth_ratio',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth mesh"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale mesh"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Inflate mesh"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'INFLATE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Morph into sphere"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SPHERE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize vertex positions"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'RANDOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relax mesh"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'RELAX'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relax Face Sets"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'RELAX_FACE_SETS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth the edges of all the Face Sets"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'RELAX_FACE_SETS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Surface Smooth"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SURFACE_SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Smooth the surface of the mesh, preserving the volume"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SURFACE_SMOOTH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sharpen"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SHARPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sharpen the cavities of the mesh"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'SHARPEN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enhance Details"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'ENHANCE_DETAILS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enhance the high frequency surface detail"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'ENHANCE_DETAILS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Erase Displacement"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'ERASE_DISCPLACEMENT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deletes the displacement of the Multires Modifier"),
     (("bpy.types.SCULPT_OT_mesh_filter.type:'ERASE_DISCPLACEMENT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rebuild BVH"),
     (('bpy.types.SCULPT_OT_optimize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Recalculate the sculpt BVH to improve performance"),
     (('bpy.types.SCULPT_OT_optimize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Project Line Gesture"),
     (('bpy.types.SCULPT_OT_project_line_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the geometry onto a plane defined by a line"),
     (('bpy.types.SCULPT_OT_project_line_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample the vertex color of the active vertex"),
     (('bpy.types.SCULPT_OT_sample_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sample Detail Size"),
     (('bpy.types.SCULPT_OT_sample_detail_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample the mesh detail on clicked point"),
     (('bpy.types.SCULPT_OT_sample_detail_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Screen coordinates of sampling"),
     (('bpy.types.SCULPT_OT_sample_detail_size.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Detail Mode"),
     (('bpy.types.SCULPT_OT_sample_detail_size.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target sculpting workflow that is going to use the sampled size"),
     (('bpy.types.SCULPT_OT_sample_detail_size.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample dyntopo detail"),
     (("bpy.types.SCULPT_OT_sample_detail_size.mode:'DYNTOPO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample mesh voxel size"),
     (("bpy.types.SCULPT_OT_sample_detail_size.mode:'VOXEL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sculpt Mode"),
     (('bpy.types.SCULPT_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle sculpt mode in 3D view"),
     (('bpy.types.SCULPT_OT_sculptmode_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Detail Size"),
     (('bpy.types.SCULPT_OT_set_detail_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the mesh detail (either relative or constant one, depending on current dyntopo mode)"),
     (('bpy.types.SCULPT_OT_set_detail_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Persistent Base"),
     (('bpy.types.SCULPT_OT_set_persistent_base',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the copy of the mesh that is being sculpted on"),
     (('bpy.types.SCULPT_OT_set_persistent_base',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Symmetrize the topology modifications"),
     (('bpy.types.SCULPT_OT_symmetrize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Distance within which symmetrical vertices are merged"),
     (('bpy.types.SCULPT_OT_symmetrize.merge_tolerance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Trim Box Gesture"),
     (('bpy.types.SCULPT_OT_trim_box_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trims the mesh within the box as you move the brush"),
     (('bpy.types.SCULPT_OT_trim_box_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude Mode"),
     (('bpy.types.SCULPT_OT_trim_box_gesture.trim_extrude_mode',
       'bpy.types.SCULPT_OT_trim_lasso_gesture.trim_extrude_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project back faces when extruding"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_extrude_mode:'PROJECT'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_extrude_mode:'PROJECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude back faces by fixed amount"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_extrude_mode:'FIXED'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_extrude_mode:'FIXED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trim Mode"),
     (('bpy.types.SCULPT_OT_trim_box_gesture.trim_mode',
       'bpy.types.SCULPT_OT_trim_lasso_gesture.trim_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use a difference boolean operation"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_mode:'DIFFERENCE'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_mode:'DIFFERENCE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use a union boolean operation"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_mode:'UNION'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_mode:'UNION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Join the new mesh as separate geometry, without performing any boolean operation"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_mode:'JOIN'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_mode:'JOIN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape Orientation"),
     (('bpy.types.SCULPT_OT_trim_box_gesture.trim_orientation',
       'bpy.types.SCULPT_OT_trim_lasso_gesture.trim_orientation'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the view to orientate the trimming shape"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_orientation:'VIEW'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_orientation:'VIEW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the surface normal to orientate the trimming shape"),
     (("bpy.types.SCULPT_OT_trim_box_gesture.trim_orientation:'SURFACE'",
       "bpy.types.SCULPT_OT_trim_lasso_gesture.trim_orientation:'SURFACE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Cursor for Depth"),
     (('bpy.types.SCULPT_OT_trim_box_gesture.use_cursor_depth',
       'bpy.types.SCULPT_OT_trim_lasso_gesture.use_cursor_depth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use cursor location and radius for the dimensions and position of the trimming shape"),
     (('bpy.types.SCULPT_OT_trim_box_gesture.use_cursor_depth',
       'bpy.types.SCULPT_OT_trim_lasso_gesture.use_cursor_depth'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Trim Lasso Gesture"),
     (('bpy.types.SCULPT_OT_trim_lasso_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trims the mesh within the lasso as you move the brush"),
     (('bpy.types.SCULPT_OT_trim_lasso_gesture',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Effect Input"),
     (('bpy.types.SEQUENCER_OT_change_effect_input',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The effect inputs to swap"),
     (('bpy.types.SEQUENCER_OT_change_effect_input.swap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A → B"),
     (("bpy.types.SEQUENCER_OT_change_effect_input.swap:'A_B'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "B → C"),
     (("bpy.types.SEQUENCER_OT_change_effect_input.swap:'B_C'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A → C"),
     (("bpy.types.SEQUENCER_OT_change_effect_input.swap:'A_C'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Effect Type"),
     (('bpy.types.SEQUENCER_OT_change_effect_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sequencer effect type"),
     (('bpy.types.SEQUENCER_OT_change_effect_type.type',
       'bpy.types.SEQUENCER_OT_effect_strip_add.type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Sequence", "Crossfade"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'CROSS'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'CROSS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Crossfade effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'CROSS'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'CROSS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'ADD'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'ADD'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Subtract effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'SUBTRACT'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'SUBTRACT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alpha Over effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'ALPHA_OVER'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'ALPHA_OVER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alpha Under effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'ALPHA_UNDER'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'ALPHA_UNDER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Gamma Cross effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'GAMMA_CROSS'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'GAMMA_CROSS'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Multiply effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'MULTIPLY'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'MULTIPLY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Sequence", "Alpha Over Drop"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'OVER_DROP'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'OVER_DROP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Alpha Over Drop effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'OVER_DROP'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'OVER_DROP'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Wipe effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'WIPE'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'WIPE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Glow effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'GLOW'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'GLOW'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transform effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'TRANSFORM'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'TRANSFORM'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Color effect strip type"),
     (("bpy.types.SEQUENCER_OT_change_effect_type.type:'COLOR'",
       "bpy.types.SEQUENCER_OT_change_effect_type.type:'SPEED'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'COLOR'",
       "bpy.types.SEQUENCER_OT_effect_strip_add.type:'SPEED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Data/Files"),
     (('bpy.types.SEQUENCER_OT_change_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Placeholders"),
     (('bpy.types.SEQUENCER_OT_change_path.use_placeholders',
       'bpy.types.SEQUENCER_OT_image_strip_add.use_placeholders'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use placeholders for missing frames of the strip"),
     (('bpy.types.SEQUENCER_OT_change_path.use_placeholders',
       'bpy.types.SEQUENCER_OT_image_strip_add.use_placeholders'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Scene"),
     (('bpy.types.SEQUENCER_OT_change_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change Scene assigned to Strip"),
     (('bpy.types.SEQUENCER_OT_change_scene',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy"),
     (('bpy.types.SEQUENCER_OT_copy',
       'bpy.types.TEXT_OT_copy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected strips to the internal clipboard"),
     (('bpy.types.SEQUENCER_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Crossfade Sounds"),
     (('bpy.types.SEQUENCER_OT_crossfade_sounds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do cross-fading volume animation of two selected sound strips"),
     (('bpy.types.SEQUENCER_OT_crossfade_sounds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor location in normalized preview coordinates"),
     (('bpy.types.SEQUENCER_OT_cursor_set.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Deinterlace Movies"),
     (('bpy.types.SEQUENCER_OT_deinterlace_selected_movies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deinterlace all selected movie sources"),
     (('bpy.types.SEQUENCER_OT_deinterlace_selected_movies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete selected strips from the sequencer"),
     (('bpy.types.SEQUENCER_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete Data"),
     (('bpy.types.SEQUENCER_OT_delete.delete_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "After removing the Strip, delete the associated data also"),
     (('bpy.types.SEQUENCER_OT_delete.delete_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate the selected strips"),
     (('bpy.types.SEQUENCER_OT_duplicate',
       'bpy.types.SEQUENCER_OT_duplicate_move.SEQUENCER_OT_duplicate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate selected strips and move them"),
     (('bpy.types.SEQUENCER_OT_duplicate_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Effect Strip"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an effect to the sequencer, most are applied on top of existing strips"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Channel to place this strip into"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.channel',
       'bpy.types.SEQUENCER_OT_image_strip_add.channel',
       'bpy.types.SEQUENCER_OT_mask_strip_add.channel',
       'bpy.types.SEQUENCER_OT_movie_strip_add.channel',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.channel',
       'bpy.types.SEQUENCER_OT_scene_strip_add.channel',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.channel',
       'bpy.types.SEQUENCER_OT_sound_strip_add.channel'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Initialize the strip with this color"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "End frame for the color strip"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.frame_end',
       'bpy.types.SEQUENCER_OT_image_strip_add.frame_end'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start frame of the sequence strip"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_image_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_mask_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_movie_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_scene_strip_add.frame_start',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.frame_start',
       'bpy.types.SEQUENCER_OT_sound_strip_add.frame_start'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow Overlap"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_image_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_mask_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_movie_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_scene_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.overlap',
       'bpy.types.SEQUENCER_OT_sound_strip_add.overlap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't correct overlap on new sequence strips"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_image_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_mask_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_movie_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_scene_strip_add.overlap',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.overlap',
       'bpy.types.SEQUENCER_OT_sound_strip_add.overlap'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Override Overlap Shuffle Behavior"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_image_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_mask_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_movie_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_scene_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_sound_strip_add.overlap_shuffle_override'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the overlap_mode tool settings to determine how to shuffle overlapping strips"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_image_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_mask_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_movie_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_scene_strip_add.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.overlap_shuffle_override',
       'bpy.types.SEQUENCER_OT_sound_strip_add.overlap_shuffle_override'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace Selection"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_image_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_mask_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_movie_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_scene_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.replace_sel',
       'bpy.types.SEQUENCER_OT_sound_strip_add.replace_sel'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace the current selection"),
     (('bpy.types.SEQUENCER_OT_effect_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_image_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_mask_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_movie_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_movieclip_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_scene_strip_add.replace_sel',
       'bpy.types.SEQUENCER_OT_scene_strip_add_new.replace_sel',
       'bpy.types.SEQUENCER_OT_sound_strip_add.replace_sel'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Selected Strip Proxies"),
     (('bpy.types.SEQUENCER_OT_enable_proxies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable selected proxies on all selected Movie and Image strips"),
     (('bpy.types.SEQUENCER_OT_enable_proxies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export Subtitles"),
     (('bpy.types.SEQUENCER_OT_export_subtitles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export .srt file containing text strips"),
     (('bpy.types.SEQUENCER_OT_export_subtitles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Fades"),
     (('bpy.types.SEQUENCER_OT_fades_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adds or updates a fade animation for either visual or audio strips"),
     (('bpy.types.SEQUENCER_OT_fades_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade Duration"),
     (('bpy.types.SEQUENCER_OT_fades_add.duration_seconds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duration of the fade in seconds"),
     (('bpy.types.SEQUENCER_OT_fades_add.duration_seconds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade Type"),
     (('bpy.types.SEQUENCER_OT_fades_add.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade in, out, both in and out, to, or from the current frame. Default is both in and out"),
     (('bpy.types.SEQUENCER_OT_fades_add.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade In and Out"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'IN_OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade selected strips in and out"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'IN_OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade In"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'IN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade in selected strips"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'IN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade Out"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade out selected strips"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'OUT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Current Frame"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'CURSOR_FROM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade from the time cursor to the end of overlapping sequences"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'CURSOR_FROM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To Current Frame"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'CURSOR_TO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fade from the start of sequences under the time cursor to the current frame"),
     (("bpy.types.SEQUENCER_OT_fades_add.type:'CURSOR_TO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Fades"),
     (('bpy.types.SEQUENCER_OT_fades_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Removes fade animation from selected sequences"),
     (('bpy.types.SEQUENCER_OT_fades_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Insert Gaps"),
     (('bpy.types.SEQUENCER_OT_gap_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Insert gap at current frame to first strips at the right, independent of selection or locked state of strips"),
     (('bpy.types.SEQUENCER_OT_gap_insert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frames to insert after current strip"),
     (('bpy.types.SEQUENCER_OT_gap_insert.frames',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Image Strip"),
     (('bpy.types.SEQUENCER_OT_image_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an image or image sequence to the sequencer"),
     (('bpy.types.SEQUENCER_OT_image_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set View Transform"),
     (('bpy.types.SEQUENCER_OT_image_strip_add.set_view_transform',
       'bpy.types.SEQUENCER_OT_movie_strip_add.set_view_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set appropriate view transform based on media color space"),
     (('bpy.types.SEQUENCER_OT_image_strip_add.set_view_transform',
       'bpy.types.SEQUENCER_OT_movie_strip_add.set_view_transform'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Separate Images"),
     (('bpy.types.SEQUENCER_OT_images_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "On image sequence strips, it returns a strip for each image"),
     (('bpy.types.SEQUENCER_OT_images_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Length of each frame"),
     (('bpy.types.SEQUENCER_OT_images_separate.length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Lock Strips"),
     (('bpy.types.SEQUENCER_OT_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock strips so they can't be transformed"),
     (('bpy.types.SEQUENCER_OT_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Mask Strip"),
     (('bpy.types.SEQUENCER_OT_mask_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a mask strip to the sequencer"),
     (('bpy.types.SEQUENCER_OT_mask_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Meta Strip"),
     (('bpy.types.SEQUENCER_OT_meta_make',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Group selected strips into a meta-strip"),
     (('bpy.types.SEQUENCER_OT_meta_make',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "UnMeta Strip"),
     (('bpy.types.SEQUENCER_OT_meta_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Put the contents of a meta-strip back in the sequencer"),
     (('bpy.types.SEQUENCER_OT_meta_separate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Meta Strip"),
     (('bpy.types.SEQUENCER_OT_meta_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle a meta-strip (to edit enclosed strips)"),
     (('bpy.types.SEQUENCER_OT_meta_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Movie Strip"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a movie strip to the sequencer"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust Playback Rate"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add.adjust_playback_rate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Play at normal speed regardless of scene FPS"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add.adjust_playback_rate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load sound with the movie"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add.sound',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Movie Framerate"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add.use_framerate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use framerate from the movie to keep sound and video in sync"),
     (('bpy.types.SEQUENCER_OT_movie_strip_add.use_framerate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add MovieClip Strip"),
     (('bpy.types.SEQUENCER_OT_movieclip_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a movieclip strip to the sequencer"),
     (('bpy.types.SEQUENCER_OT_movieclip_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Strip Offset"),
     (('bpy.types.SEQUENCER_OT_offset_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear strip offsets from the start and end frames"),
     (('bpy.types.SEQUENCER_OT_offset_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reassign Inputs"),
     (('bpy.types.SEQUENCER_OT_reassign_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reassign the inputs for the effect strip"),
     (('bpy.types.SEQUENCER_OT_reassign_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rebuild all selected proxies and timecode indices using the job system"),
     (('bpy.types.SEQUENCER_OT_rebuild_proxy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh Sequencer"),
     (('bpy.types.SEQUENCER_OT_refresh_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refresh the sequencer editor"),
     (('bpy.types.SEQUENCER_OT_refresh_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Render Size"),
     (('bpy.types.SEQUENCER_OT_rendersize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set render size and aspect from active sequence"),
     (('bpy.types.SEQUENCER_OT_rendersize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Freeze Frame"),
     (('bpy.types.SEQUENCER_OT_retiming_freeze_frame_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add freeze frame"),
     (('bpy.types.SEQUENCER_OT_retiming_freeze_frame_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duration of freeze frame segment"),
     (('bpy.types.SEQUENCER_OT_retiming_freeze_frame_add.duration',
       'bpy.types.SEQUENCER_OT_retiming_transition_add.duration'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Retiming Key"),
     (('bpy.types.SEQUENCER_OT_retiming_key_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add retiming Key"),
     (('bpy.types.SEQUENCER_OT_retiming_key_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame where key will be added"),
     (('bpy.types.SEQUENCER_OT_retiming_key_add.timeline_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset Retiming"),
     (('bpy.types.SEQUENCER_OT_retiming_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset strip retiming"),
     (('bpy.types.SEQUENCER_OT_retiming_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Speed"),
     (('bpy.types.SEQUENCER_OT_retiming_segment_speed_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set speed of retimed segment"),
     (('bpy.types.SEQUENCER_OT_retiming_segment_speed_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New speed of retimed segment"),
     (('bpy.types.SEQUENCER_OT_retiming_segment_speed_set.speed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Retime Strips"),
     (('bpy.types.SEQUENCER_OT_retiming_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show retiming keys in selected strips"),
     (('bpy.types.SEQUENCER_OT_retiming_show',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Speed Transition"),
     (('bpy.types.SEQUENCER_OT_retiming_transition_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add smooth transition between 2 retimed segments"),
     (('bpy.types.SEQUENCER_OT_retiming_transition_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use mouse to sample color in current frame"),
     (('bpy.types.SEQUENCER_OT_sample',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Scene Frame Range"),
     (('bpy.types.SEQUENCER_OT_scene_frame_range_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update frame range of scene strip"),
     (('bpy.types.SEQUENCER_OT_scene_frame_range_update',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Scene Strip"),
     (('bpy.types.SEQUENCER_OT_scene_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a strip to the sequencer using a Blender scene as a source"),
     (('bpy.types.SEQUENCER_OT_scene_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Strip with a new Scene"),
     (('bpy.types.SEQUENCER_OT_scene_strip_add_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new Strip and assign a new Scene as source"),
     (('bpy.types.SEQUENCER_OT_scene_strip_add_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add new Strip with a new empty Scene with default settings"),
     (("bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'NEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new Strip, with an empty scene, and copy settings from the current scene"),
     (("bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'EMPTY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Strip and link in the collections from the current scene (shallow copy)"),
     (("bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'LINK_COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a Strip and make a full copy of the current scene"),
     (("bpy.types.SEQUENCER_OT_scene_strip_add_new.type:'FULL_COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all strips grouped by various properties"),
     (('bpy.types.SEQUENCER_OT_select_grouped',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared strip type"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'TYPE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Type"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'TYPE_BASIC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All strips of same basic type (graphical or sound)"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'TYPE_BASIC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared strip effect type (if active strip is not an effect one, select all non-effect strips)"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'TYPE_EFFECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared data (scene, image, sound, etc.)"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'DATA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Effect"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'EFFECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shared effects"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'EFFECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Effect/Linked"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'EFFECT_LINK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Other strips affected by the active one (sharing some time, and below or effect-assigned)"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'EFFECT_LINK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overlap"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'OVERLAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overlapping time"),
     (("bpy.types.SEQUENCER_OT_select_grouped.type:'OVERLAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Same Channel"),
     (('bpy.types.SEQUENCER_OT_select_grouped.use_active_channel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only consider strips on the same channel as the active one"),
     (('bpy.types.SEQUENCER_OT_select_grouped.use_active_channel',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Handles"),
     (('bpy.types.SEQUENCER_OT_select_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select gizmo handles on the sides of the selected strip"),
     (('bpy.types.SEQUENCER_OT_select_handles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The side of the handle that is selected"),
     (('bpy.types.SEQUENCER_OT_select_handles.side',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Left Neighbor"),
     (("bpy.types.SEQUENCER_OT_select_handles.side:'LEFT_NEIGHBOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Right Neighbor"),
     (("bpy.types.SEQUENCER_OT_select_handles.side:'RIGHT_NEIGHBOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Both Neighbors"),
     (("bpy.types.SEQUENCER_OT_select_handles.side:'BOTH_NEIGHBORS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shrink the current selection of adjacent selected strips"),
     (('bpy.types.SEQUENCER_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all strips adjacent to the current selection"),
     (('bpy.types.SEQUENCER_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select more strips adjacent to the current selection"),
     (('bpy.types.SEQUENCER_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Side"),
     (('bpy.types.SEQUENCER_OT_select_side',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select strips on the nominated side of the selected strips"),
     (('bpy.types.SEQUENCER_OT_select_side',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The side to which the selection is applied"),
     (('bpy.types.SEQUENCER_OT_select_side.side',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Range to Strips"),
     (('bpy.types.SEQUENCER_OT_set_range_to_strips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the frame range to the selected strips start and end"),
     (('bpy.types.SEQUENCER_OT_set_range_to_strips',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the preview range instead"),
     (('bpy.types.SEQUENCER_OT_set_range_to_strips.preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Slip Strips"),
     (('bpy.types.SEQUENCER_OT_slip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Slip the contents of selected strips"),
     (('bpy.types.SEQUENCER_OT_slip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset to the data of the strip"),
     (('bpy.types.SEQUENCER_OT_slip.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Strips to the Current Frame"),
     (('bpy.types.SEQUENCER_OT_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame where selected strips will be snapped"),
     (('bpy.types.SEQUENCER_OT_snap',
       'bpy.types.SEQUENCER_OT_snap.frame'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Sound Strip"),
     (('bpy.types.SEQUENCER_OT_sound_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a sound strip to the sequencer"),
     (('bpy.types.SEQUENCER_OT_sound_strip_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cache the sound in memory"),
     (('bpy.types.SEQUENCER_OT_sound_strip_add.cache',
       'bpy.types.SOUND_OT_open.cache',
       'bpy.types.SOUND_OT_open_mono.cache'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge all the sound's channels into one"),
     (('bpy.types.SEQUENCER_OT_sound_strip_add.mono',
       'bpy.types.SOUND_OT_open.mono'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set a color tag for the selected strips"),
     (('bpy.types.SEQUENCER_OT_strip_color_tag_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Strip Modifier"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a modifier to the strip"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy to Selected Strips"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy modifiers of the active strip to all selected strips"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace modifiers in destination"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_copy.type:'REPLACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append active modifiers to selected strips"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_copy.type:'APPEND'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Redefine Equalizer Graphs"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Redefine equalizer graphs"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Graphs"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of graphs"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unique"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs:'SIMPLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "One unique graphical definition"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs:'SIMPLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Graphical definition in 2 sections"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs:'DOUBLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Triplet"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs:'TRIPLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Graphical definition in 3 sections"),
     (("bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.graphs:'TRIPLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of modifier to redefine"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_equalizer_redefine.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Strip Modifier"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move modifier up and down in the stack"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of modifier to remove"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_move.name',
       'bpy.types.SEQUENCER_OT_strip_modifier_remove.name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Strip Modifier"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a modifier from the strip"),
     (('bpy.types.SEQUENCER_OT_strip_modifier_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Strip Transform Set Fit"),
     (('bpy.types.SEQUENCER_OT_strip_transform_fit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale fit fit_method"),
     (('bpy.types.SEQUENCER_OT_strip_transform_fit.fit_method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale image so fits in preview"),
     (("bpy.types.SEQUENCER_OT_strip_transform_fit.fit_method:'FIT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale image so it fills preview completely"),
     (("bpy.types.SEQUENCER_OT_strip_transform_fit.fit_method:'FILL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stretch image so it fills preview"),
     (("bpy.types.SEQUENCER_OT_strip_transform_fit.fit_method:'STRETCH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sequencer Swap Data"),
     (('bpy.types.SEQUENCER_OT_swap_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap 2 sequencer strips"),
     (('bpy.types.SEQUENCER_OT_swap_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Swap Inputs"),
     (('bpy.types.SEQUENCER_OT_swap_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Swap the first two inputs for the effect strip"),
     (('bpy.types.SEQUENCER_OT_swap_inputs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unlock Strips"),
     (('bpy.types.SEQUENCER_OT_unlock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlock strips so they can be transformed"),
     (('bpy.types.SEQUENCER_OT_unlock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View all the strips in the sequencer"),
     (('bpy.types.SEQUENCER_OT_view_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom preview to fit in the area"),
     (('bpy.types.SEQUENCER_OT_view_all_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Border Offset View"),
     (('bpy.types.SEQUENCER_OT_view_ghost_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the boundaries of the border used for offset view"),
     (('bpy.types.SEQUENCER_OT_view_ghost_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom the sequencer on the selected strips"),
     (('bpy.types.SEQUENCER_OT_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Animation Cache"),
     (('bpy.types.SOUND_OT_bake_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update the audio animation cache"),
     (('bpy.types.SOUND_OT_bake_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Mixdown"),
     (('bpy.types.SOUND_OT_mixdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mix the scene's audio to a sound file"),
     (('bpy.types.SOUND_OT_mixdown',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample accuracy, important for animation data (the lower the value, the more accurate)"),
     (('bpy.types.SOUND_OT_mixdown.accuracy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Bitrate in kbit/s"),
     (('bpy.types.SOUND_OT_mixdown.bitrate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Advanced Audio Coding"),
     (("bpy.types.SOUND_OT_mixdown.codec:'AAC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dolby Digital ATRAC 3"),
     (("bpy.types.SOUND_OT_mixdown.codec:'AC3'",
       "bpy.types.SOUND_OT_mixdown.container:'AC3'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Free Lossless Audio Codec"),
     (("bpy.types.SOUND_OT_mixdown.codec:'FLAC'",
       "bpy.types.SOUND_OT_mixdown.container:'FLAC'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "MPEG-1 Audio Layer II"),
     (("bpy.types.SOUND_OT_mixdown.codec:'MP2'",
       "bpy.types.SOUND_OT_mixdown.container:'MP2'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "MPEG-2 Audio Layer III"),
     (("bpy.types.SOUND_OT_mixdown.codec:'MP3'",
       "bpy.types.SOUND_OT_mixdown.container:'MP3'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pulse Code Modulation (RAW)"),
     (("bpy.types.SOUND_OT_mixdown.codec:'PCM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Xiph.Org Vorbis Codec"),
     (("bpy.types.SOUND_OT_mixdown.codec:'VORBIS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File format"),
     (('bpy.types.SOUND_OT_mixdown.container',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ac3"),
     (("bpy.types.SOUND_OT_mixdown.container:'AC3'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "flac"),
     (("bpy.types.SOUND_OT_mixdown.container:'FLAC'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "mkv"),
     (("bpy.types.SOUND_OT_mixdown.container:'MATROSKA'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "mp2"),
     (("bpy.types.SOUND_OT_mixdown.container:'MP2'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "mp3"),
     (("bpy.types.SOUND_OT_mixdown.container:'MP3'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ogg"),
     (("bpy.types.SOUND_OT_mixdown.container:'OGG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Xiph.Org Ogg Container"),
     (("bpy.types.SOUND_OT_mixdown.container:'OGG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "wav"),
     (("bpy.types.SOUND_OT_mixdown.container:'WAV'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Waveform Audio File Format"),
     (("bpy.types.SOUND_OT_mixdown.container:'WAV'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample format"),
     (('bpy.types.SOUND_OT_mixdown.format',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "8-bit unsigned"),
     (("bpy.types.SOUND_OT_mixdown.format:'U8'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "16-bit signed"),
     (("bpy.types.SOUND_OT_mixdown.format:'S16'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "24-bit signed"),
     (("bpy.types.SOUND_OT_mixdown.format:'S24'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "32-bit signed"),
     (("bpy.types.SOUND_OT_mixdown.format:'S32'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "32-bit floating-point"),
     (("bpy.types.SOUND_OT_mixdown.format:'F32'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "64-bit floating-point"),
     (("bpy.types.SOUND_OT_mixdown.format:'F64'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split channels"),
     (('bpy.types.SOUND_OT_mixdown.split_channels',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Each channel will be rendered into a mono file"),
     (('bpy.types.SOUND_OT_mixdown.split_channels',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Sound"),
     (('bpy.types.SOUND_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a sound file"),
     (('bpy.types.SOUND_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Sound Mono"),
     (('bpy.types.SOUND_OT_open_mono',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a sound file as mono"),
     (('bpy.types.SOUND_OT_open_mono',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mixdown the sound to mono"),
     (('bpy.types.SOUND_OT_open_mono.mono',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pack Sound"),
     (('bpy.types.SOUND_OT_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack the sound into the current blend file"),
     (('bpy.types.SOUND_OT_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unpack Sound"),
     (('bpy.types.SOUND_OT_unpack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unpack the sound to the samples filename"),
     (('bpy.types.SOUND_OT_unpack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sound Name"),
     (('bpy.types.SOUND_OT_unpack.id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sound data-block name to unpack"),
     (('bpy.types.SOUND_OT_unpack.id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update Animation"),
     (('bpy.types.SOUND_OT_update_animation_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update animation flags"),
     (('bpy.types.SOUND_OT_update_animation_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Row Filter"),
     (('bpy.types.SPREADSHEET_OT_add_row_filter_rule',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a filter to remove rows from the displayed data"),
     (('bpy.types.SPREADSHEET_OT_add_row_filter_rule',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Change Visible Data Source"),
     (('bpy.types.SPREADSHEET_OT_change_spreadsheet_data_source',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change visible data source in the spreadsheet"),
     (('bpy.types.SPREADSHEET_OT_change_spreadsheet_data_source',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Attribute Domain Type"),
     (('bpy.types.SPREADSHEET_OT_change_spreadsheet_data_source.attribute_domain_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Component Type"),
     (('bpy.types.SPREADSHEET_OT_change_spreadsheet_data_source.component_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Row Filter"),
     (('bpy.types.SPREADSHEET_OT_remove_row_filter_rule',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a row filter from the rules"),
     (('bpy.types.SPREADSHEET_OT_remove_row_filter_rule',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Pin"),
     (('bpy.types.SPREADSHEET_OT_toggle_pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn on or off pinning"),
     (('bpy.types.SPREADSHEET_OT_toggle_pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Circle"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Circle"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_circle_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Curve"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Curve"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_curve_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Cylinder"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Cylinder"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_cylinder_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Sphere"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Sphere"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_sphere_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Patch"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Patch"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_surface_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Surface Torus"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Construct a Nurbs surface Torus"),
     (('bpy.types.SURFACE_OT_primitive_nurbs_surface_torus_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Texture"),
     (('bpy.types.TEXTURE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new texture"),
     (('bpy.types.TEXTURE_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Texture Slot Settings"),
     (('bpy.types.TEXTURE_OT_slot_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the material texture settings and nodes"),
     (('bpy.types.TEXTURE_OT_slot_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Texture Slot"),
     (('bpy.types.TEXTURE_OT_slot_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move texture slots up and down"),
     (('bpy.types.TEXTURE_OT_slot_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Texture Slot Settings"),
     (('bpy.types.TEXTURE_OT_slot_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the texture settings and nodes"),
     (('bpy.types.TEXTURE_OT_slot_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Text Editor Preset"),
     (('bpy.types.TEXT_EDITOR_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Text Editor Preset"),
     (('bpy.types.TEXT_EDITOR_OT_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Text Auto Complete"),
     (('bpy.types.TEXT_OT_autocomplete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show a list of used text in the open document"),
     (('bpy.types.TEXT_OT_autocomplete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Comments"),
     (('bpy.types.TEXT_OT_comment_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove comments"),
     (('bpy.types.TEXT_OT_comment_toggle.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle Comments"),
     (("bpy.types.TEXT_OT_comment_toggle.type:'TOGGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Comment"),
     (("bpy.types.TEXT_OT_comment_toggle.type:'COMMENT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Un-Comment"),
     (("bpy.types.TEXT_OT_comment_toggle.type:'UNCOMMENT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Convert Whitespace"),
     (('bpy.types.TEXT_OT_convert_whitespace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert whitespaces by type"),
     (('bpy.types.TEXT_OT_convert_whitespace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of whitespace to convert to"),
     (('bpy.types.TEXT_OT_convert_whitespace.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To Spaces"),
     (("bpy.types.TEXT_OT_convert_whitespace.type:'SPACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To Tabs"),
     (("bpy.types.TEXT_OT_convert_whitespace.type:'TABS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set cursor position"),
     (('bpy.types.TEXT_OT_cursor_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Duplicate Line"),
     (('bpy.types.TEXT_OT_duplicate_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Duplicate the current line"),
     (('bpy.types.TEXT_OT_duplicate_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Find Next"),
     (('bpy.types.TEXT_OT_find',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find specified text"),
     (('bpy.types.TEXT_OT_find',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Find & Set Selection"),
     (('bpy.types.TEXT_OT_find_set_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find specified text and set as selected"),
     (('bpy.types.TEXT_OT_find_set_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Indent selected text"),
     (('bpy.types.TEXT_OT_indent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Jump"),
     (('bpy.types.TEXT_OT_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Jump cursor to line"),
     (('bpy.types.TEXT_OT_jump',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Line number to jump to"),
     (('bpy.types.TEXT_OT_jump.line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Jump to File at Point"),
     (('bpy.types.TEXT_OT_jump_to_file_at_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Jump to a file for the text editor"),
     (('bpy.types.TEXT_OT_jump_to_file_at_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Column"),
     (('bpy.types.TEXT_OT_jump_to_file_at_point.column',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Column to jump to"),
     (('bpy.types.TEXT_OT_jump_to_file_at_point.column',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Line to jump to"),
     (('bpy.types.TEXT_OT_jump_to_file_at_point.line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Line Number"),
     (('bpy.types.TEXT_OT_line_number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The current line number"),
     (('bpy.types.TEXT_OT_line_number',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Make Internal"),
     (('bpy.types.TEXT_OT_make_internal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make active text file internal"),
     (('bpy.types.TEXT_OT_make_internal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Text"),
     (('bpy.types.TEXT_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new text data-block"),
     (('bpy.types.TEXT_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Text"),
     (('bpy.types.TEXT_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a new text data-block"),
     (('bpy.types.TEXT_OT_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make text file internal after loading"),
     (('bpy.types.TEXT_OT_open.internal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Overwrite"),
     (('bpy.types.TEXT_OT_overwrite_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle overwrite while typing"),
     (('bpy.types.TEXT_OT_overwrite_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh PyConstraints"),
     (('bpy.types.TEXT_OT_refresh_pyconstraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Refresh all pyconstraints"),
     (('bpy.types.TEXT_OT_refresh_pyconstraints',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload"),
     (('bpy.types.TEXT_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload active text data-block from its file"),
     (('bpy.types.TEXT_OT_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace text with the specified text"),
     (('bpy.types.TEXT_OT_replace',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace All"),
     (('bpy.types.TEXT_OT_replace.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace all occurrences"),
     (('bpy.types.TEXT_OT_replace.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Replace & Set Selection"),
     (('bpy.types.TEXT_OT_replace_set_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Replace text with specified text and set as selected"),
     (('bpy.types.TEXT_OT_replace_set_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save"),
     (('bpy.types.TEXT_OT_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save active text data-block"),
     (('bpy.types.TEXT_OT_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save As"),
     (('bpy.types.TEXT_OT_save_as',
       'bpy.types.WM_OT_save_as_mainfile'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save active text file with options"),
     (('bpy.types.TEXT_OT_save_as',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scrollbar"),
     (('bpy.types.TEXT_OT_scroll_bar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Line"),
     (('bpy.types.TEXT_OT_select_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select text by line"),
     (('bpy.types.TEXT_OT_select_line',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set text selection"),
     (('bpy.types.TEXT_OT_selection_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Find"),
     (('bpy.types.TEXT_OT_start_find',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start searching text"),
     (('bpy.types.TEXT_OT_start_find',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "To 3D Object"),
     (('bpy.types.TEXT_OT_to_3d_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create 3D text object from active text data-block"),
     (('bpy.types.TEXT_OT_to_3d_object',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split Lines"),
     (('bpy.types.TEXT_OT_to_3d_object.split_lines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create one object per line in the text"),
     (('bpy.types.TEXT_OT_to_3d_object.split_lines',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unindent selected text"),
     (('bpy.types.TEXT_OT_unindent',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unlink active text data-block"),
     (('bpy.types.TEXT_OT_unlink',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Create Orientation"),
     (('bpy.types.TRANSFORM_OT_create_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create transformation orientation from selection"),
     (('bpy.types.TRANSFORM_OT_create_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the new custom orientation"),
     (('bpy.types.TRANSFORM_OT_create_orientation.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite Previous"),
     (('bpy.types.TRANSFORM_OT_create_orientation.overwrite',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite previously created orientation with same name"),
     (('bpy.types.TRANSFORM_OT_create_orientation.overwrite',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use After Creation"),
     (('bpy.types.TRANSFORM_OT_create_orientation.use',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select orientation after its creation"),
     (('bpy.types.TRANSFORM_OT_create_orientation.use',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use View"),
     (('bpy.types.TRANSFORM_OT_create_orientation.use_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the current view instead of the active object to create the new orientation"),
     (('bpy.types.TRANSFORM_OT_create_orientation.use_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Orientation"),
     (('bpy.types.TRANSFORM_OT_delete_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete transformation orientation"),
     (('bpy.types.TRANSFORM_OT_delete_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edge Bevel Weight"),
     (('bpy.types.TRANSFORM_OT_edge_bevelweight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the bevel weight of edges"),
     (('bpy.types.TRANSFORM_OT_edge_bevelweight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edge Crease"),
     (('bpy.types.TRANSFORM_OT_edge_crease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the crease of edges"),
     (('bpy.types.TRANSFORM_OT_edge_crease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transform from Gizmo"),
     (('bpy.types.TRANSFORM_OT_from_gizmo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mirror selected items around one or more axes"),
     (('bpy.types.TRANSFORM_OT_mirror',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate Normals"),
     (('bpy.types.TRANSFORM_OT_rotate_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate split normal of selected items"),
     (('bpy.types.TRANSFORM_OT_rotate_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Orientation"),
     (('bpy.types.TRANSFORM_OT_select_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select transformation orientation"),
     (('bpy.types.TRANSFORM_OT_select_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Skin Resize"),
     (('bpy.types.TRANSFORM_OT_skin_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale selected vertices' skin radii"),
     (('bpy.types.TRANSFORM_OT_skin_resize',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Trackball"),
     (('bpy.types.TRANSFORM_OT_trackball',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trackball style rotation of selected items"),
     (('bpy.types.TRANSFORM_OT_trackball',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Vertex Crease"),
     (('bpy.types.TRANSFORM_OT_vert_crease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change the crease of vertices"),
     (('bpy.types.TRANSFORM_OT_vert_crease',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Warp"),
     (('bpy.types.TRANSFORM_OT_vertex_warp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Warp vertices around the cursor"),
     (('bpy.types.TRANSFORM_OT_vertex_warp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset Angle"),
     (('bpy.types.TRANSFORM_OT_vertex_warp.offset_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Angle to use as the basis for warping"),
     (('bpy.types.TRANSFORM_OT_vertex_warp.offset_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Warp Angle"),
     (('bpy.types.TRANSFORM_OT_vertex_warp.warp_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Amount to warp about the cursor"),
     (('bpy.types.TRANSFORM_OT_vertex_warp.warp_angle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Entry"),
     (('bpy.types.UILIST_OT_entry_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add an entry to the list after the current active item"),
     (('bpy.types.UILIST_OT_entry_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Move Entry"),
     (('bpy.types.UILIST_OT_entry_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move an entry in the list up or down"),
     (('bpy.types.UILIST_OT_entry_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UP"),
     (("bpy.types.UILIST_OT_entry_move.direction:'UP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "DOWN"),
     (("bpy.types.UILIST_OT_entry_move.direction:'DOWN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Selected Entry"),
     (('bpy.types.UILIST_OT_entry_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove the selected entry from the list"),
     (('bpy.types.UILIST_OT_entry_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Assign Value as Default"),
     (('bpy.types.UI_OT_assign_default_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set this property's current value as the new default"),
     (('bpy.types.UI_OT_assign_default_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Press Button"),
     (('bpy.types.UI_OT_button_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Presses active button"),
     (('bpy.types.UI_OT_button_execute',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Skip Depressed"),
     (('bpy.types.UI_OT_button_execute.skip_depressed',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Button String"),
     (('bpy.types.UI_OT_button_string_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unsets the text of the active button"),
     (('bpy.types.UI_OT_button_string_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy as New Driver"),
     (('bpy.types.UI_OT_copy_as_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new driver with this property as input, and copy it to the internal clipboard. Use Paste Driver to add it to the target property, or Paste Driver Variables to extend an existing driver"),
     (('bpy.types.UI_OT_copy_as_driver_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Python Command"),
     (('bpy.types.UI_OT_copy_python_command_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the Python command matching this button"),
     (('bpy.types.UI_OT_copy_python_command_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy to Selected"),
     (('bpy.types.UI_OT_copy_to_selected_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the property's value from the active item to the same property of all selected items if the same property exists"),
     (('bpy.types.UI_OT_copy_to_selected_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy to selected all elements of the array"),
     (('bpy.types.UI_OT_copy_to_selected_button.all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Color"),
     (('bpy.types.UI_OT_drop_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drop colors to buttons"),
     (('bpy.types.UI_OT_drop_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Source color"),
     (('bpy.types.UI_OT_drop_color.color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Gamma Corrected"),
     (('bpy.types.UI_OT_drop_color.gamma',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The source color is gamma corrected"),
     (('bpy.types.UI_OT_drop_color.gamma',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Material in Material slots"),
     (('bpy.types.UI_OT_drop_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag material to Material slots in Properties"),
     (('bpy.types.UI_OT_drop_material',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop Name"),
     (('bpy.types.UI_OT_drop_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drop name to button"),
     (('bpy.types.UI_OT_drop_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The string value to drop into the button"),
     (('bpy.types.UI_OT_drop_name.string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Source"),
     (('bpy.types.UI_OT_editsource',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit UI source code of the active button"),
     (('bpy.types.UI_OT_editsource',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Translation"),
     (('bpy.types.UI_OT_edittranslation',
       'bpy.types.UI_OT_edittranslation_init'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Translate the label and tooltip of the given property"),
     (('bpy.types.UI_OT_edittranslation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Label of the control"),
     (('bpy.types.UI_OT_edittranslation.but_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the label of the button"),
     (('bpy.types.UI_OT_edittranslation.but_label_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Message is marked as fuzzy in po file"),
     (("bpy.types.UI_OT_edittranslation.but_label_flags:'FUZZY'",
       "bpy.types.UI_OT_edittranslation.but_tip_flags:'FUZZY'",
       "bpy.types.UI_OT_edittranslation.enum_label_flags:'FUZZY'",
       "bpy.types.UI_OT_edittranslation.enum_tip_flags:'FUZZY'",
       "bpy.types.UI_OT_edittranslation.rna_label_flags:'FUZZY'",
       "bpy.types.UI_OT_edittranslation.rna_tip_flags:'FUZZY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Some error occurred with this message"),
     (("bpy.types.UI_OT_edittranslation.but_label_flags:'ERROR'",
       "bpy.types.UI_OT_edittranslation.but_tip_flags:'ERROR'",
       "bpy.types.UI_OT_edittranslation.enum_label_flags:'ERROR'",
       "bpy.types.UI_OT_edittranslation.enum_tip_flags:'ERROR'",
       "bpy.types.UI_OT_edittranslation.rna_label_flags:'ERROR'",
       "bpy.types.UI_OT_edittranslation.rna_tip_flags:'ERROR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tip of the control"),
     (('bpy.types.UI_OT_edittranslation.but_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the tip of the button"),
     (('bpy.types.UI_OT_edittranslation.but_tip_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove all local translation files, to be able to use the system ones again"),
     (('bpy.types.UI_OT_edittranslation.clean_mo',
       'bpy.types.UI_OT_i18n_edittranslation_update_mo.clean_mo'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Label of the enum item of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.enum_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the RNA enum item label of the button"),
     (('bpy.types.UI_OT_edittranslation.enum_label_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Tip of the enum item of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.enum_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the RNA enum item tip of the button"),
     (('bpy.types.UI_OT_edittranslation.enum_tip_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Current (translated) language"),
     (('bpy.types.UI_OT_edittranslation.lang',
       'bpy.types.UI_OT_i18n_edittranslation_update_mo.lang'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original label of the control"),
     (('bpy.types.UI_OT_edittranslation.org_but_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original tip of the control"),
     (('bpy.types.UI_OT_edittranslation.org_but_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original label of the enum item of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.org_enum_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original tip of the enum item of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.org_enum_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original RNA-defined label of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.org_rna_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original RNA-defined tip of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.org_rna_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to the matching po file"),
     (('bpy.types.UI_OT_edittranslation.po_file',
       'bpy.types.UI_OT_i18n_edittranslation_update_mo.po_file'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "RNA context for label"),
     (('bpy.types.UI_OT_edittranslation.rna_ctxt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of the RNA enum item, if any"),
     (('bpy.types.UI_OT_edittranslation.rna_enum',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "RNA-defined label of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.rna_label',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the RNA-defined label of the button"),
     (('bpy.types.UI_OT_edittranslation.rna_label_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of the RNA property, if any"),
     (('bpy.types.UI_OT_edittranslation.rna_prop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Identifier of the RNA struct, if any"),
     (('bpy.types.UI_OT_edittranslation.rna_struct',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "RNA-defined tip of the control, if any"),
     (('bpy.types.UI_OT_edittranslation.rna_tip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flags about the RNA-defined tip of the button"),
     (('bpy.types.UI_OT_edittranslation.rna_tip_flags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stats from opened po"),
     (('bpy.types.UI_OT_edittranslation.stats_str',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to rebuild mo file, and refresh Blender's UI"),
     (('bpy.types.UI_OT_edittranslation.update_mo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update po file, try to rebuild mo file, and refresh Blender's UI"),
     (('bpy.types.UI_OT_edittranslation.update_po',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit i18n in current language for the active button"),
     (('bpy.types.UI_OT_edittranslation_init',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample a color from the Blender window to store in a property"),
     (('bpy.types.UI_OT_eyedropper_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Eyedropper Colorband"),
     (('bpy.types.UI_OT_eyedropper_colorramp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample a color band"),
     (('bpy.types.UI_OT_eyedropper_colorramp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Eyedropper Colorband (Points)"),
     (('bpy.types.UI_OT_eyedropper_colorramp_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Point-sample a color band"),
     (('bpy.types.UI_OT_eyedropper_colorramp_point',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Eyedropper Depth"),
     (('bpy.types.UI_OT_eyedropper_depth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample depth from the 3D view"),
     (('bpy.types.UI_OT_eyedropper_depth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Eyedropper Driver"),
     (('bpy.types.UI_OT_eyedropper_driver',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pick a property to use as a driver target"),
     (('bpy.types.UI_OT_eyedropper_driver',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mapping Type"),
     (('bpy.types.UI_OT_eyedropper_driver.mapping_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method used to match target and driven properties"),
     (('bpy.types.UI_OT_eyedropper_driver.mapping_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All from Target"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'SINGLE_MANY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drive all components of this property using the target picked"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'SINGLE_MANY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Single from Target"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'DIRECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drive this component of this property using the target picked"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'DIRECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match Indices"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'MATCH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create drivers for each pair of corresponding elements"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'MATCH'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Manually Create Later"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'NONE_ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create drivers for all properties without assigning any targets yet"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'NONE_ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Manually Create Later (Single)"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'NONE_SINGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create driver for this property only and without assigning any targets yet"),
     (("bpy.types.UI_OT_eyedropper_driver.mapping_type:'NONE_SINGLE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Grease Pencil Eyedropper"),
     (('bpy.types.UI_OT_eyedropper_gpencil_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample a color from the Blender Window and create Grease Pencil material"),
     (('bpy.types.UI_OT_eyedropper_gpencil_color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Eyedropper Data-Block"),
     (('bpy.types.UI_OT_eyedropper_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sample a data-block from the 3D View to store in a property"),
     (('bpy.types.UI_OT_eyedropper_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "I18n Add-on Export"),
     (('bpy.types.UI_OT_i18n_addon_translation_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export given add-on's translation data as PO files"),
     (('bpy.types.UI_OT_i18n_addon_translation_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export POT"),
     (('bpy.types.UI_OT_i18n_addon_translation_export.use_export_pot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export (generate) a POT file too"),
     (('bpy.types.UI_OT_i18n_addon_translation_export.use_export_pot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update Existing"),
     (('bpy.types.UI_OT_i18n_addon_translation_export.use_update_existing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update existing po files, if any, instead of overwriting them"),
     (('bpy.types.UI_OT_i18n_addon_translation_export.use_update_existing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "I18n Add-on Import"),
     (('bpy.types.UI_OT_i18n_addon_translation_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import given add-on's translation data from PO files"),
     (('bpy.types.UI_OT_i18n_addon_translation_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Wrapper operator which will invoke given op after setting its module_name"),
     (('bpy.types.UI_OT_i18n_addon_translation_invoke',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name (id) of the operator to invoke"),
     (('bpy.types.UI_OT_i18n_addon_translation_invoke.op_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clean up I18n Work Repository"),
     (('bpy.types.UI_OT_i18n_cleanuptranslation_work_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clean up i18n working repository (po files)"),
     (('bpy.types.UI_OT_i18n_cleanuptranslation_work_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Translation Update Mo"),
     (('bpy.types.UI_OT_i18n_edittranslation_update_mo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to \\"compile\\" given po file into relevant blender.mo file"),
     (('bpy.types.UI_OT_i18n_edittranslation_update_mo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "I18n Load Settings"),
     (('bpy.types.UI_OT_i18n_settings_load',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load translations' settings from a persistent JSon file"),
     (('bpy.types.UI_OT_i18n_settings_load',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to the saved settings file"),
     (('bpy.types.UI_OT_i18n_settings_load.filepath',
       'bpy.types.UI_OT_i18n_settings_save.filepath'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "I18n Save Settings"),
     (('bpy.types.UI_OT_i18n_settings_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save translations' settings in a persistent JSon file"),
     (('bpy.types.UI_OT_i18n_settings_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update I18n Blender Repository"),
     (('bpy.types.UI_OT_i18n_updatetranslation_blender_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update i18n data (po files) in Blender source code repository"),
     (('bpy.types.UI_OT_i18n_updatetranslation_blender_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Init I18n Update Settings"),
     (('bpy.types.UI_OT_i18n_updatetranslation_init_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Init settings for i18n files update operators"),
     (('bpy.types.UI_OT_i18n_updatetranslation_init_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Init I18n Update Select Languages"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "(De)select (or invert selection of) all languages for i18n files update operators"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert Selection"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select.use_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Inverse selection (overrides 'Select All' when True)"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select.use_invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select All"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select.use_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all if True, else deselect all"),
     (('bpy.types.UI_OT_i18n_updatetranslation_settings_select.use_select',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update I18n Statistics"),
     (('bpy.types.UI_OT_i18n_updatetranslation_statistics',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create or extend a 'i18n_info.txt' Text datablock"),
     (('bpy.types.UI_OT_i18n_updatetranslation_statistics',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Update I18n Work Repository"),
     (('bpy.types.UI_OT_i18n_updatetranslation_work_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update i18n working repository (po files)"),
     (('bpy.types.UI_OT_i18n_updatetranslation_work_repo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Skip POT"),
     (('bpy.types.UI_OT_i18n_updatetranslation_work_repo.use_skip_pot_gen',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Skip POT file generation"),
     (('bpy.types.UI_OT_i18n_updatetranslation_work_repo.use_skip_pot_gen',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Jump to Target"),
     (('bpy.types.UI_OT_jump_to_target_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch to the target object or bone"),
     (('bpy.types.UI_OT_jump_to_target_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "List Filter"),
     (('bpy.types.UI_OT_list_start_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start entering filter text for the list in focus"),
     (('bpy.types.UI_OT_list_start_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the selected local override and relink its usages to the linked data-block if possible, else reset it and mark it as non editable"),
     (('bpy.types.UI_OT_override_idtemplate_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a local override of the selected linked data-block, and its hierarchy of dependencies"),
     (('bpy.types.UI_OT_override_idtemplate_make',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the selected local override to its linked reference values"),
     (('bpy.types.UI_OT_override_idtemplate_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Override"),
     (('bpy.types.UI_OT_override_remove_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove an override operation"),
     (('bpy.types.UI_OT_override_remove_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Define Override Type"),
     (('bpy.types.UI_OT_override_type_set_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create an override operation, or set the type of an existing one"),
     (('bpy.types.UI_OT_override_type_set_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type of override operation"),
     (('bpy.types.UI_OT_override_type_set_button.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "NoOp"),
     (("bpy.types.UI_OT_override_type_set_button.type:'NOOP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "'No-Operation', place holder preventing automatic override to ever affect the property"),
     (("bpy.types.UI_OT_override_type_set_button.type:'NOOP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Completely replace value from linked data by local one"),
     (("bpy.types.UI_OT_override_type_set_button.type:'REPLACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store difference to linked data value"),
     (("bpy.types.UI_OT_override_type_set_button.type:'DIFFERENCE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store factor to linked data value (useful e.g. for scale)"),
     (("bpy.types.UI_OT_override_type_set_button.type:'FACTOR'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Translation"),
     (('bpy.types.UI_OT_reloadtranslation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Force a full reload of UI translation"),
     (('bpy.types.UI_OT_reloadtranslation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unset Property"),
     (('bpy.types.UI_OT_unset_property_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the property and use default or generated value in operators"),
     (('bpy.types.UI_OT_unset_property_button',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Drop"),
     (('bpy.types.UI_OT_view_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drag and drop onto a data-set or item within the data-set"),
     (('bpy.types.UI_OT_view_drop',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rename View Item"),
     (('bpy.types.UI_OT_view_item_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rename the active item in the data-set view"),
     (('bpy.types.UI_OT_view_item_rename',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Filter"),
     (('bpy.types.UI_OT_view_start_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start entering filter text for the data-set in focus"),
     (('bpy.types.UI_OT_view_start_filter',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Align"),
     (('bpy.types.UV_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Aligns selected UV vertices on a line"),
     (('bpy.types.UV_OT_align',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis to align UV locations on"),
     (('bpy.types.UV_OT_align.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Straighten"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_S'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align UV vertices along the line defined by the endpoints"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_S'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Straighten X"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_T'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align UV vertices, moving them horizontally to the line defined by the endpoints"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_T'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Straighten Y"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_U'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align UV vertices, moving them vertically to the line defined by the endpoints"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_U'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align Auto"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Automatically choose the direction on which there is most alignment already"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align Vertically"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align UV vertices on a vertical line"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align Horizontally"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align UV vertices on a horizontal line"),
     (("bpy.types.UV_OT_align.axis:'ALIGN_Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Align Rotation"),
     (('bpy.types.UV_OT_align_rotation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align the UV island's rotation"),
     (('bpy.types.UV_OT_align_rotation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis to align to"),
     (('bpy.types.UV_OT_align_rotation.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Correct Aspect"),
     (('bpy.types.UV_OT_align_rotation.correct_aspect',
       'bpy.types.UV_OT_cube_project.correct_aspect',
       'bpy.types.UV_OT_cylinder_project.correct_aspect',
       'bpy.types.UV_OT_project_from_view.correct_aspect',
       'bpy.types.UV_OT_smart_project.correct_aspect',
       'bpy.types.UV_OT_sphere_project.correct_aspect',
       'bpy.types.UV_OT_unwrap.correct_aspect'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Take image aspect ratio into account"),
     (('bpy.types.UV_OT_align_rotation.correct_aspect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method to calculate rotation angle"),
     (('bpy.types.UV_OT_align_rotation.method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align from all edges"),
     (("bpy.types.UV_OT_align_rotation.method:'AUTO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only selected edges"),
     (("bpy.types.UV_OT_align_rotation.method:'EDGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align to Geometry axis"),
     (("bpy.types.UV_OT_align_rotation.method:'GEOMETRY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Average Islands Scale"),
     (('bpy.types.UV_OT_average_islands_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Average the size of separate UV islands, based on their area in 3D space"),
     (('bpy.types.UV_OT_average_islands_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale U and V independently"),
     (('bpy.types.UV_OT_average_islands_scale.scale_uv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reduce shear within islands"),
     (('bpy.types.UV_OT_average_islands_scale.shear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy UVs"),
     (('bpy.types.UV_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy selected UV vertices"),
     (('bpy.types.UV_OT_copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cube Projection"),
     (('bpy.types.UV_OT_cube_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the UV vertices of the mesh over the six faces of a cube"),
     (('bpy.types.UV_OT_cube_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clip to Bounds"),
     (('bpy.types.UV_OT_cube_project.clip_to_bounds',
       'bpy.types.UV_OT_cylinder_project.clip_to_bounds',
       'bpy.types.UV_OT_project_from_view.clip_to_bounds',
       'bpy.types.UV_OT_sphere_project.clip_to_bounds'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clip UV coordinates to bounds after unwrapping"),
     (('bpy.types.UV_OT_cube_project.clip_to_bounds',
       'bpy.types.UV_OT_cylinder_project.clip_to_bounds',
       'bpy.types.UV_OT_project_from_view.clip_to_bounds',
       'bpy.types.UV_OT_sphere_project.clip_to_bounds'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Map UVs taking image aspect ratio into account"),
     (('bpy.types.UV_OT_cube_project.correct_aspect',
       'bpy.types.UV_OT_cylinder_project.correct_aspect',
       'bpy.types.UV_OT_project_from_view.correct_aspect',
       'bpy.types.UV_OT_smart_project.correct_aspect',
       'bpy.types.UV_OT_sphere_project.correct_aspect',
       'bpy.types.UV_OT_unwrap.correct_aspect'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cube Size"),
     (('bpy.types.UV_OT_cube_project.cube_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Size of the cube to project on"),
     (('bpy.types.UV_OT_cube_project.cube_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale to Bounds"),
     (('bpy.types.UV_OT_cube_project.scale_to_bounds',
       'bpy.types.UV_OT_cylinder_project.scale_to_bounds',
       'bpy.types.UV_OT_project_from_view.scale_to_bounds',
       'bpy.types.UV_OT_smart_project.scale_to_bounds',
       'bpy.types.UV_OT_sphere_project.scale_to_bounds'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale UV coordinates to bounds after unwrapping"),
     (('bpy.types.UV_OT_cube_project.scale_to_bounds',
       'bpy.types.UV_OT_cylinder_project.scale_to_bounds',
       'bpy.types.UV_OT_project_from_view.scale_to_bounds',
       'bpy.types.UV_OT_smart_project.scale_to_bounds',
       'bpy.types.UV_OT_sphere_project.scale_to_bounds'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Cylinder Projection"),
     (('bpy.types.UV_OT_cylinder_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the UV vertices of the mesh over the curved wall of a cylinder"),
     (('bpy.types.UV_OT_cylinder_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to determine rotation around the pole"),
     (('bpy.types.UV_OT_cylinder_project.align',
       'bpy.types.UV_OT_sphere_project.align'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Polar ZX"),
     (("bpy.types.UV_OT_cylinder_project.align:'POLAR_ZX'",
       "bpy.types.UV_OT_sphere_project.align:'POLAR_ZX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Polar 0 is X"),
     (("bpy.types.UV_OT_cylinder_project.align:'POLAR_ZX'",
       "bpy.types.UV_OT_sphere_project.align:'POLAR_ZX'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Polar ZY"),
     (("bpy.types.UV_OT_cylinder_project.align:'POLAR_ZY'",
       "bpy.types.UV_OT_sphere_project.align:'POLAR_ZY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Polar 0 is Y"),
     (("bpy.types.UV_OT_cylinder_project.align:'POLAR_ZY'",
       "bpy.types.UV_OT_sphere_project.align:'POLAR_ZY'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Direction of the sphere or cylinder"),
     (('bpy.types.UV_OT_cylinder_project.direction',
       'bpy.types.UV_OT_sphere_project.direction'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View on Equator"),
     (("bpy.types.UV_OT_cylinder_project.direction:'VIEW_ON_EQUATOR'",
       "bpy.types.UV_OT_sphere_project.direction:'VIEW_ON_EQUATOR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "3D view is on the equator"),
     (("bpy.types.UV_OT_cylinder_project.direction:'VIEW_ON_EQUATOR'",
       "bpy.types.UV_OT_sphere_project.direction:'VIEW_ON_EQUATOR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View on Poles"),
     (("bpy.types.UV_OT_cylinder_project.direction:'VIEW_ON_POLES'",
       "bpy.types.UV_OT_sphere_project.direction:'VIEW_ON_POLES'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "3D view is on the poles"),
     (("bpy.types.UV_OT_cylinder_project.direction:'VIEW_ON_POLES'",
       "bpy.types.UV_OT_sphere_project.direction:'VIEW_ON_POLES'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align to Object"),
     (("bpy.types.UV_OT_cylinder_project.direction:'ALIGN_TO_OBJECT'",
       "bpy.types.UV_OT_sphere_project.direction:'ALIGN_TO_OBJECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Align according to object transform"),
     (("bpy.types.UV_OT_cylinder_project.direction:'ALIGN_TO_OBJECT'",
       "bpy.types.UV_OT_sphere_project.direction:'ALIGN_TO_OBJECT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pole"),
     (('bpy.types.UV_OT_cylinder_project.pole',
       'bpy.types.UV_OT_sphere_project.pole'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "How to handle faces at the poles"),
     (('bpy.types.UV_OT_cylinder_project.pole',
       'bpy.types.UV_OT_sphere_project.pole'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UVs are pinched at the poles"),
     (("bpy.types.UV_OT_cylinder_project.pole:'PINCH'",
       "bpy.types.UV_OT_sphere_project.pole:'PINCH'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UVs are fanned at the poles"),
     (("bpy.types.UV_OT_cylinder_project.pole:'FAN'",
       "bpy.types.UV_OT_sphere_project.pole:'FAN'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Radius of the sphere or cylinder"),
     (('bpy.types.UV_OT_cylinder_project.radius',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Preserve Seams"),
     (('bpy.types.UV_OT_cylinder_project.seam',
       'bpy.types.UV_OT_sphere_project.seam'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Separate projections by islands isolated by seams"),
     (('bpy.types.UV_OT_cylinder_project.seam',
       'bpy.types.UV_OT_sphere_project.seam'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export UV Layout"),
     (('bpy.types.UV_OT_export_layout',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export UV layout to file"),
     (('bpy.types.UV_OT_export_layout',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All UVs"),
     (('bpy.types.UV_OT_export_layout.export_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all UVs in this mesh (not just visible ones)"),
     (('bpy.types.UV_OT_export_layout.export_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File format to export the UV layout to"),
     (('bpy.types.UV_OT_export_layout.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scalable Vector Graphic (.svg)"),
     (("bpy.types.UV_OT_export_layout.mode:'SVG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the UV layout to a vector SVG file"),
     (("bpy.types.UV_OT_export_layout.mode:'SVG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Encapsulated PostScript (.eps)"),
     (("bpy.types.UV_OT_export_layout.mode:'EPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the UV layout to a vector EPS file"),
     (("bpy.types.UV_OT_export_layout.mode:'EPS'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "PNG Image (.png)"),
     (("bpy.types.UV_OT_export_layout.mode:'PNG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the UV layout to a bitmap image"),
     (("bpy.types.UV_OT_export_layout.mode:'PNG'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Modified"),
     (('bpy.types.UV_OT_export_layout.modified',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports UVs from the modified mesh"),
     (('bpy.types.UV_OT_export_layout.modified',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fill Opacity"),
     (('bpy.types.UV_OT_export_layout.opacity',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set amount of opacity for exported UV layout"),
     (('bpy.types.UV_OT_export_layout.opacity',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Dimensions of the exported file"),
     (('bpy.types.UV_OT_export_layout.size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Follow Active Quads"),
     (('bpy.types.UV_OT_follow_active_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Follow UVs from active quads along continuous face loops"),
     (('bpy.types.UV_OT_follow_active_quads',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edge Length Mode"),
     (('bpy.types.UV_OT_follow_active_quads.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Method to space UV edge loops"),
     (('bpy.types.UV_OT_follow_active_quads.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Space all UVs evenly"),
     (("bpy.types.UV_OT_follow_active_quads.mode:'EVEN'",
       "bpy.types.UV_OT_lightmap_pack.PREF_CONTEXT:'SEL_FACES'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Average space UVs edge length of each loop"),
     (("bpy.types.UV_OT_follow_active_quads.mode:'LENGTH'",
       "bpy.types.UV_OT_follow_active_quads.mode:'LENGTH_AVERAGE'",
       "bpy.types.UV_OT_lightmap_pack.PREF_CONTEXT:'ALL_FACES'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Length Average"),
     (("bpy.types.UV_OT_follow_active_quads.mode:'LENGTH_AVERAGE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Lightmap Pack"),
     (('bpy.types.UV_OT_lightmap_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack each face's UVs into the UV bounds"),
     (('bpy.types.UV_OT_lightmap_pack',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack Quality"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_BOX_DIV',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quality of the packing. Higher values will be slower but waste less space"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_BOX_DIV',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Faces"),
     (("bpy.types.UV_OT_lightmap_pack.PREF_CONTEXT:'SEL_FACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Faces"),
     (("bpy.types.UV_OT_lightmap_pack.PREF_CONTEXT:'ALL_FACES'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Size of the margin as a division of the UV"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_MARGIN_DIV',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "New UV Map"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_NEW_UVLAYER',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new UV map for every mesh packed"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_NEW_UVLAYER',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Share Texture Space"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_PACK_IN_ONE',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Objects share texture space, map all objects into a single UV map"),
     (('bpy.types.UV_OT_lightmap_pack.PREF_PACK_IN_ONE',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark selected UV edges as seams"),
     (('bpy.types.UV_OT_mark_seam',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Seams"),
     (('bpy.types.UV_OT_mark_seam.clear',
       'bpy.types.UV_OT_stitch.clear_seams'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear instead of marking seams"),
     (('bpy.types.UV_OT_mark_seam.clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Minimize Stretch"),
     (('bpy.types.UV_OT_minimize_stretch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reduce UV stretching by relaxing angles"),
     (('bpy.types.UV_OT_minimize_stretch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend factor between stretch minimized and original"),
     (('bpy.types.UV_OT_minimize_stretch.blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Virtually fill holes in mesh before unwrapping, to better avoid overlaps and preserve symmetry"),
     (('bpy.types.UV_OT_minimize_stretch.fill_holes',
       'bpy.types.UV_OT_unwrap.fill_holes'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of iterations to run, 0 is unlimited when run interactively"),
     (('bpy.types.UV_OT_minimize_stretch.iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pack Islands"),
     (('bpy.types.UV_OT_pack_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transform all islands so that they fill up the UV/UDIM space as much as possible"),
     (('bpy.types.UV_OT_pack_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Space between islands"),
     (('bpy.types.UV_OT_pack_islands.margin',
       'bpy.types.UV_OT_unwrap.margin'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Margin Method"),
     (('bpy.types.UV_OT_pack_islands.margin_method',
       'bpy.types.UV_OT_smart_project.margin_method',
       'bpy.types.UV_OT_unwrap.margin_method'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scaled"),
     (("bpy.types.UV_OT_pack_islands.margin_method:'SCALED'",
       "bpy.types.UV_OT_smart_project.margin_method:'SCALED'",
       "bpy.types.UV_OT_unwrap.margin_method:'SCALED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use scale of existing UVs to multiply margin"),
     (("bpy.types.UV_OT_pack_islands.margin_method:'SCALED'",
       "bpy.types.UV_OT_smart_project.margin_method:'SCALED'",
       "bpy.types.UV_OT_unwrap.margin_method:'SCALED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Just add the margin, ignoring any UV scale"),
     (("bpy.types.UV_OT_pack_islands.margin_method:'ADD'",
       "bpy.types.UV_OT_smart_project.margin_method:'ADD'",
       "bpy.types.UV_OT_unwrap.margin_method:'ADD'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fraction"),
     (("bpy.types.UV_OT_pack_islands.margin_method:'FRACTION'",
       "bpy.types.UV_OT_smart_project.margin_method:'FRACTION'",
       "bpy.types.UV_OT_unwrap.margin_method:'FRACTION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Specify a precise fraction of final UV output"),
     (("bpy.types.UV_OT_pack_islands.margin_method:'FRACTION'",
       "bpy.types.UV_OT_smart_project.margin_method:'FRACTION'",
       "bpy.types.UV_OT_unwrap.margin_method:'FRACTION'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merge Overlapping"),
     (('bpy.types.UV_OT_pack_islands.merge_overlap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overlapping islands stick together"),
     (('bpy.types.UV_OT_pack_islands.merge_overlap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Pinned Islands"),
     (('bpy.types.UV_OT_pack_islands.pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Constrain islands containing any pinned UV's"),
     (('bpy.types.UV_OT_pack_islands.pin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pin Method"),
     (('bpy.types.UV_OT_pack_islands.pin_method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pinned islands won't rescale"),
     (("bpy.types.UV_OT_pack_islands.pin_method:'SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pinned islands won't rotate"),
     (("bpy.types.UV_OT_pack_islands.pin_method:'ROTATION'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotation and Scale"),
     (("bpy.types.UV_OT_pack_islands.pin_method:'ROTATION_SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pinned islands will translate only"),
     (("bpy.types.UV_OT_pack_islands.pin_method:'ROTATION_SCALE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pinned islands are locked in place"),
     (("bpy.types.UV_OT_pack_islands.pin_method:'LOCKED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate islands to improve layout"),
     (('bpy.types.UV_OT_pack_islands.rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotation Method"),
     (('bpy.types.UV_OT_pack_islands.rotate_method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Axis-aligned"),
     (("bpy.types.UV_OT_pack_islands.rotate_method:'AXIS_ALIGNED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotated to a minimal rectangle, either vertical or horizontal"),
     (("bpy.types.UV_OT_pack_islands.rotate_method:'AXIS_ALIGNED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only 90 degree rotations are allowed"),
     (("bpy.types.UV_OT_pack_islands.rotate_method:'CARDINAL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Any angle is allowed for rotation"),
     (("bpy.types.UV_OT_pack_islands.rotate_method:'ANY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale islands to fill unit square"),
     (('bpy.types.UV_OT_pack_islands.scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shape Method"),
     (('bpy.types.UV_OT_pack_islands.shape_method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exact Shape (Concave)"),
     (("bpy.types.UV_OT_pack_islands.shape_method:'CONCAVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Uses exact geometry"),
     (("bpy.types.UV_OT_pack_islands.shape_method:'CONCAVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Boundary Shape (Convex)"),
     (("bpy.types.UV_OT_pack_islands.shape_method:'CONVEX'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Uses convex hull"),
     (("bpy.types.UV_OT_pack_islands.shape_method:'CONVEX'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Uses bounding boxes"),
     (("bpy.types.UV_OT_pack_islands.shape_method:'AABB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack to"),
     (('bpy.types.UV_OT_pack_islands.udim_source',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Closest UDIM"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'CLOSEST_UDIM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack islands to closest UDIM"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'CLOSEST_UDIM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Active UDIM"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'ACTIVE_UDIM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack islands to active UDIM image tile or UDIM grid tile where 2D cursor is located"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'ACTIVE_UDIM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Original bounding box"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'ORIGINAL_AABB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pack to starting bounding box of islands"),
     (("bpy.types.UV_OT_pack_islands.udim_source:'ORIGINAL_AABB'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste UVs"),
     (('bpy.types.UV_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste selected UV vertices"),
     (('bpy.types.UV_OT_paste',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Project from View"),
     (('bpy.types.UV_OT_project_from_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the UV vertices of the mesh as seen in current 3D view"),
     (('bpy.types.UV_OT_project_from_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Camera Bounds"),
     (('bpy.types.UV_OT_project_from_view.camera_bounds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Map UVs to the camera region taking resolution and aspect into account"),
     (('bpy.types.UV_OT_project_from_view.camera_bounds',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use orthographic projection"),
     (('bpy.types.UV_OT_project_from_view.orthographic',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the UV island's location, rotation, and scale"),
     (('bpy.types.UV_OT_randomize_uv_transform',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum rotation"),
     (('bpy.types.UV_OT_randomize_uv_transform.rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use the same scale value for both axes"),
     (('bpy.types.UV_OT_randomize_uv_transform.scale_even',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Randomize the rotation value"),
     (('bpy.types.UV_OT_randomize_uv_transform.use_rot',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Merge UVs by Distance"),
     (('bpy.types.UV_OT_remove_doubles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected UV vertices that are within a radius of each other are welded together"),
     (('bpy.types.UV_OT_remove_doubles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum distance between welded vertices"),
     (('bpy.types.UV_OT_remove_doubles.threshold',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset"),
     (('bpy.types.UV_OT_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset UV projection"),
     (('bpy.types.UV_OT_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reveal all hidden UV vertices"),
     (('bpy.types.UV_OT_reveal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "UV Rip"),
     (('bpy.types.UV_OT_rip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Seams from Islands"),
     (('bpy.types.UV_OT_seams_from_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set mesh seams according to island setup in the UV editor"),
     (('bpy.types.UV_OT_seams_from_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark boundary edges as seams"),
     (('bpy.types.UV_OT_seams_from_islands.mark_seams',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mark boundary edges as sharp"),
     (('bpy.types.UV_OT_seams_from_islands.mark_sharp',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deselect UV vertices at the boundary of each selection region"),
     (('bpy.types.UV_OT_select_less',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all UV vertices linked to the active UV map"),
     (('bpy.types.UV_OT_select_linked',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select more UV vertices connected to initial selection"),
     (('bpy.types.UV_OT_select_more',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Overlap"),
     (('bpy.types.UV_OT_select_overlap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all UV faces which overlap each other"),
     (('bpy.types.UV_OT_select_overlap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Selected Pinned"),
     (('bpy.types.UV_OT_select_pinned',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select all pinned UV vertices"),
     (('bpy.types.UV_OT_select_pinned',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select similar UVs by property types"),
     (('bpy.types.UV_OT_select_similar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Pinned"),
     (("bpy.types.UV_OT_select_similar.type:'PIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Length 3D"),
     (("bpy.types.UV_OT_select_similar.type:'LENGTH_3D'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Area 3D"),
     (("bpy.types.UV_OT_select_similar.type:'AREA_3D'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Object"),
     (("bpy.types.UV_OT_select_similar.type:'OBJECT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Winding"),
     (("bpy.types.UV_OT_select_similar.type:'WINDING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Mesh", "Amount of Faces in Island"),
     (("bpy.types.UV_OT_select_similar.type:'FACE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Split"),
     (('bpy.types.UV_OT_select_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select only entirely selected faces"),
     (('bpy.types.UV_OT_select_split',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smart UV Project"),
     (('bpy.types.UV_OT_smart_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Projection unwraps the selected faces of mesh objects"),
     (('bpy.types.UV_OT_smart_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lower for more projection groups, higher for less distortion"),
     (('bpy.types.UV_OT_smart_project.angle_limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Area Weight"),
     (('bpy.types.UV_OT_smart_project.area_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weight projection's vector by faces with larger areas"),
     (('bpy.types.UV_OT_smart_project.area_weight',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Island Margin"),
     (('bpy.types.UV_OT_smart_project.island_margin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Margin to reduce bleed from adjacent islands"),
     (('bpy.types.UV_OT_smart_project.island_margin',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor"),
     (('bpy.types.UV_OT_snap_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap cursor to target type"),
     (('bpy.types.UV_OT_snap_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Target to snap the selected UVs to"),
     (('bpy.types.UV_OT_snap_cursor.target',
       'bpy.types.UV_OT_snap_selected.target'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Selection"),
     (('bpy.types.UV_OT_snap_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected UV vertices to target type"),
     (('bpy.types.UV_OT_snap_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Cursor (Offset)"),
     (("bpy.types.UV_OT_snap_selected.target:'CURSOR_OFFSET'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjacent Unselected"),
     (("bpy.types.UV_OT_snap_selected.target:'ADJACENT_UNSELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Sphere Projection"),
     (('bpy.types.UV_OT_sphere_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project the UV vertices of the mesh over the curved surface of a sphere"),
     (('bpy.types.UV_OT_sphere_project',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Stitch"),
     (('bpy.types.UV_OT_stitch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stitch selected UV vertices by proximity"),
     (('bpy.types.UV_OT_stitch',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index of the active object"),
     (('bpy.types.UV_OT_stitch.active_object_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear seams of stitched edges"),
     (('bpy.types.UV_OT_stitch.clear_seams',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit distance in normalized coordinates"),
     (('bpy.types.UV_OT_stitch.limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap at Midpoint"),
     (('bpy.types.UV_OT_stitch.midpoint_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UVs are stitched at midpoint instead of at static island"),
     (('bpy.types.UV_OT_stitch.midpoint_snap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Operation Mode"),
     (('bpy.types.UV_OT_stitch.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use vertex or edge stitching"),
     (('bpy.types.UV_OT_stitch.mode',
       'bpy.types.UV_OT_stitch.stored_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Objects Selection Count"),
     (('bpy.types.UV_OT_stitch.objects_selection_count',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap Islands"),
     (('bpy.types.UV_OT_stitch.snap_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap islands together (on edge stitch mode, rotates the islands too)"),
     (('bpy.types.UV_OT_stitch.snap_islands',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Static Island"),
     (('bpy.types.UV_OT_stitch.static_island',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Island that stays in place when stitching islands"),
     (('bpy.types.UV_OT_stitch.static_island',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stored Operation Mode"),
     (('bpy.types.UV_OT_stitch.stored_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Limit"),
     (('bpy.types.UV_OT_stitch.use_limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Stitch UVs within a specified limit distance"),
     (('bpy.types.UV_OT_stitch.use_limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Unwrap"),
     (('bpy.types.UV_OT_unwrap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unwrap the mesh of the object being edited"),
     (('bpy.types.UV_OT_unwrap',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Unwrapping method (Angle Based usually gives better results than Conformal, while being somewhat slower)"),
     (('bpy.types.UV_OT_unwrap.method',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Subdivision Surface"),
     (('bpy.types.UV_OT_unwrap.use_subsurf_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Map UVs taking vertex position after Subdivision Surface modifier has been applied"),
     (('bpy.types.UV_OT_unwrap.use_subsurf_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Weld"),
     (('bpy.types.UV_OT_weld',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Weld selected UV vertices together"),
     (('bpy.types.UV_OT_weld',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Edge Pan"),
     (('bpy.types.VIEW2D_OT_edge_pan',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pan the view when the mouse is held at an edge"),
     (('bpy.types.VIEW2D_OT_edge_pan',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reset View"),
     (('bpy.types.VIEW2D_OT_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset the view"),
     (('bpy.types.VIEW2D_OT_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scroll Left"),
     (('bpy.types.VIEW2D_OT_scroll_left',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scroll the view left"),
     (('bpy.types.VIEW2D_OT_scroll_left',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scroll Right"),
     (('bpy.types.VIEW2D_OT_scroll_right',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scroll the view right"),
     (('bpy.types.VIEW2D_OT_scroll_right',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Scroller Activate"),
     (('bpy.types.VIEW2D_OT_scroller_activate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scroll view by mouse click and drag"),
     (('bpy.types.VIEW2D_OT_scroller_activate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth View 2D"),
     (('bpy.types.VIEW2D_OT_smoothview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Zoom 2D View"),
     (('bpy.types.VIEW2D_OT_zoom',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom Factor X"),
     (('bpy.types.VIEW2D_OT_zoom_in.zoomfacx',
       'bpy.types.VIEW2D_OT_zoom_out.zoomfacx'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom Factor Y"),
     (('bpy.types.VIEW2D_OT_zoom_in.zoomfacy',
       'bpy.types.VIEW2D_OT_zoom_out.zoomfacy'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Background Image"),
     (('bpy.types.VIEW3D_OT_background_image_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new background image"),
     (('bpy.types.VIEW3D_OT_background_image_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Background Image"),
     (('bpy.types.VIEW3D_OT_background_image_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remove a background image from the 3D view"),
     (('bpy.types.VIEW3D_OT_background_image_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Background image index to remove"),
     (('bpy.types.VIEW3D_OT_background_image_remove.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Select Menu"),
     (('bpy.types.VIEW3D_OT_bone_select_menu',
       'bpy.types.VIEW3D_OT_select_menu'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Menu bone selection"),
     (('bpy.types.VIEW3D_OT_bone_select_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Align Camera to View"),
     (('bpy.types.VIEW3D_OT_camera_to_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set camera view to active view"),
     (('bpy.types.VIEW3D_OT_camera_to_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Camera Fit Frame to Selected"),
     (('bpy.types.VIEW3D_OT_camera_to_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the camera so selected objects are framed"),
     (('bpy.types.VIEW3D_OT_camera_to_view_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear the boundaries of the border render and disable border render"),
     (('bpy.types.VIEW3D_OT_clear_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clipping Region"),
     (('bpy.types.VIEW3D_OT_clip_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the view clipping region"),
     (('bpy.types.VIEW3D_OT_clip_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Copy Objects"),
     (('bpy.types.VIEW3D_OT_copybuffer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the selected objects to the internal clipboard"),
     (('bpy.types.VIEW3D_OT_copybuffer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set 3D Cursor"),
     (('bpy.types.VIEW3D_OT_cursor3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the location of the 3D cursor"),
     (('bpy.types.VIEW3D_OT_cursor3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Leave orientation unchanged"),
     (("bpy.types.VIEW3D_OT_cursor3d.orientation:'NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orient to the viewport"),
     (("bpy.types.VIEW3D_OT_cursor3d.orientation:'VIEW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orient to the current transform setting"),
     (("bpy.types.VIEW3D_OT_cursor3d.orientation:'XFORM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match the surface normal"),
     (("bpy.types.VIEW3D_OT_cursor3d.orientation:'GEOM'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Surface Project"),
     (('bpy.types.VIEW3D_OT_cursor3d.use_depth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Project onto the surface"),
     (('bpy.types.VIEW3D_OT_cursor3d.use_depth',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Drop World"),
     (('bpy.types.VIEW3D_OT_drop_world',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Drop a world into the scene"),
     (('bpy.types.VIEW3D_OT_drop_world',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Individual and Move"),
     (('bpy.types.VIEW3D_OT_edit_mesh_extrude_individual_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude Manifold Along Normals"),
     (('bpy.types.VIEW3D_OT_edit_mesh_extrude_manifold_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Extrude manifold region along normals"),
     (('bpy.types.VIEW3D_OT_edit_mesh_extrude_manifold_normal',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Extrude and Move on Individual Normals"),
     (('bpy.types.VIEW3D_OT_edit_mesh_extrude_move_shrink_fatten',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fly Navigation"),
     (('bpy.types.VIEW3D_OT_fly',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively fly around the scene"),
     (('bpy.types.VIEW3D_OT_fly',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Local View"),
     (('bpy.types.VIEW3D_OT_localview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle display of selected object(s) separately and centered in view"),
     (('bpy.types.VIEW3D_OT_localview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame Selected"),
     (('bpy.types.VIEW3D_OT_localview.frame_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the view to frame the selected objects"),
     (('bpy.types.VIEW3D_OT_localview.frame_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove from Local View"),
     (('bpy.types.VIEW3D_OT_localview_remove_from',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move selected objects out of local view"),
     (('bpy.types.VIEW3D_OT_localview_remove_from',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move the view"),
     (('bpy.types.VIEW3D_OT_move',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Navigation (Walk/Fly)"),
     (('bpy.types.VIEW3D_OT_navigate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively navigate around the scene (uses the mode (walk/fly) preference)"),
     (('bpy.types.VIEW3D_OT_navigate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "NDOF Transform View"),
     (('bpy.types.VIEW3D_OT_ndof_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pan and rotate the view with the 3D mouse"),
     (('bpy.types.VIEW3D_OT_ndof_all',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "NDOF Orbit View"),
     (('bpy.types.VIEW3D_OT_ndof_orbit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orbit the view using the 3D mouse"),
     (('bpy.types.VIEW3D_OT_ndof_orbit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "NDOF Orbit View with Zoom"),
     (('bpy.types.VIEW3D_OT_ndof_orbit_zoom',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Orbit and zoom the view using the 3D mouse"),
     (('bpy.types.VIEW3D_OT_ndof_orbit_zoom',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "NDOF Pan View"),
     (('bpy.types.VIEW3D_OT_ndof_pan',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pan the view with the 3D mouse"),
     (('bpy.types.VIEW3D_OT_ndof_pan',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Active Object as Camera"),
     (('bpy.types.VIEW3D_OT_object_as_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the active object as the active camera for this view or scene"),
     (('bpy.types.VIEW3D_OT_object_as_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Object Mode Menu"),
     (('bpy.types.VIEW3D_OT_object_mode_pie_or_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Paste Objects"),
     (('bpy.types.VIEW3D_OT_pastebuffer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Paste objects from the internal clipboard"),
     (('bpy.types.VIEW3D_OT_pastebuffer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Put pasted objects in the active collection"),
     (('bpy.types.VIEW3D_OT_pastebuffer.active_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select pasted objects"),
     (('bpy.types.VIEW3D_OT_pastebuffer.autoselect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Render Region"),
     (('bpy.types.VIEW3D_OT_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the boundaries of the border render and enable border render"),
     (('bpy.types.VIEW3D_OT_render_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Rotate View"),
     (('bpy.types.VIEW3D_OT_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate the view"),
     (('bpy.types.VIEW3D_OT_rotate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Ruler Add"),
     (('bpy.types.VIEW3D_OT_ruler_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add ruler"),
     (('bpy.types.VIEW3D_OT_ruler_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Ruler Remove"),
     (('bpy.types.VIEW3D_OT_ruler_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Menu object selection"),
     (('bpy.types.VIEW3D_OT_select_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object Name"),
     (('bpy.types.VIEW3D_OT_select_menu.name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Smooth View"),
     (('bpy.types.VIEW3D_OT_smoothview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor to Active"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap 3D cursor to the active item"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor to World Origin"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_center',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap 3D cursor to the world origin"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_center',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor to Grid"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap 3D cursor to the nearest grid division"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Cursor to Selected"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap 3D cursor to the middle of the selected item(s)"),
     (('bpy.types.VIEW3D_OT_snap_cursor_to_selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Snap Selection to Active"),
     (('bpy.types.VIEW3D_OT_snap_selected_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected item(s) to the active item"),
     (('bpy.types.VIEW3D_OT_snap_selected_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected item(s) to the 3D cursor"),
     (('bpy.types.VIEW3D_OT_snap_selected_to_cursor',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If the selection should be snapped as a whole or by each object center"),
     (('bpy.types.VIEW3D_OT_snap_selected_to_cursor.use_offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Snap selected item(s) to their nearest grid division"),
     (('bpy.types.VIEW3D_OT_snap_selected_to_grid',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Flip MatCap"),
     (('bpy.types.VIEW3D_OT_toggle_matcap_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flip MatCap"),
     (('bpy.types.VIEW3D_OT_toggle_matcap_flip',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Transform Gizmo Set"),
     (('bpy.types.VIEW3D_OT_transform_gizmo_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the current transform gizmo"),
     (('bpy.types.VIEW3D_OT_transform_gizmo_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Camera"),
     (('bpy.types.VIEW3D_OT_view_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle the camera view"),
     (('bpy.types.VIEW3D_OT_view_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Frame Camera Bounds"),
     (('bpy.types.VIEW3D_OT_view_center_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Center the camera view, resizing the view to fit its bounds"),
     (('bpy.types.VIEW3D_OT_view_center_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Lock Center"),
     (('bpy.types.VIEW3D_OT_view_center_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Center the view lock offset"),
     (('bpy.types.VIEW3D_OT_view_center_lock',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Center View to Mouse"),
     (('bpy.types.VIEW3D_OT_view_center_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Center the view to the Z-depth position under the mouse cursor"),
     (('bpy.types.VIEW3D_OT_view_center_pick',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Lock Clear"),
     (('bpy.types.VIEW3D_OT_view_lock_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear all view locking"),
     (('bpy.types.VIEW3D_OT_view_lock_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Lock to Active"),
     (('bpy.types.VIEW3D_OT_view_lock_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock the view to the active object/bone"),
     (('bpy.types.VIEW3D_OT_view_lock_to_active',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Perspective/Orthographic"),
     (('bpy.types.VIEW3D_OT_view_persportho',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Switch the current view from perspective/orthographic projection"),
     (('bpy.types.VIEW3D_OT_view_persportho',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Walk Navigation"),
     (('bpy.types.VIEW3D_OT_walk',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interactively walk around the scene"),
     (('bpy.types.VIEW3D_OT_walk',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Zoom in the view to the nearest object contained in the border"),
     (('bpy.types.VIEW3D_OT_zoom_border',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Zoom Camera 1:1"),
     (('bpy.types.VIEW3D_OT_zoom_camera_1_to_1',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Match the camera to 1:1 to the render output"),
     (('bpy.types.VIEW3D_OT_zoom_camera_1_to_1',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export Alembic"),
     (('bpy.types.WM_OT_alembic_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export current scene in an Alembic archive"),
     (('bpy.types.WM_OT_alembic_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Subdivision Surface"),
     (('bpy.types.WM_OT_alembic_export.apply_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export subdivision surfaces as meshes"),
     (('bpy.types.WM_OT_alembic_export.apply_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Run as Background Job"),
     (('bpy.types.WM_OT_alembic_export.as_background_job',
       'bpy.types.WM_OT_alembic_import.as_background_job'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable this to run the import in the background, disable to block Blender while importing. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job"),
     (('bpy.types.WM_OT_alembic_export.as_background_job',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Curves as Mesh"),
     (('bpy.types.WM_OT_alembic_export.curves_as_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export curves and NURBS surfaces as meshes"),
     (('bpy.types.WM_OT_alembic_export.curves_as_mesh',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "End frame of the export, use the default value to take the end frame of the current scene"),
     (('bpy.types.WM_OT_alembic_export.end',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Settings for"),
     (('bpy.types.WM_OT_alembic_export.evaluation_mode',
       'bpy.types.WM_OT_usd_export.evaluation_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Determines visibility of objects, modifier settings, and other areas where there are different settings for viewport and rendering"),
     (('bpy.types.WM_OT_alembic_export.evaluation_mode',
       'bpy.types.WM_OT_usd_export.evaluation_mode'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Render settings for object visibility, modifier settings, etc"),
     (("bpy.types.WM_OT_alembic_export.evaluation_mode:'RENDER'",
       "bpy.types.WM_OT_usd_export.evaluation_mode:'RENDER'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Viewport settings for object visibility, modifier settings, etc"),
     (("bpy.types.WM_OT_alembic_export.evaluation_mode:'VIEWPORT'",
       "bpy.types.WM_OT_usd_export.evaluation_mode:'VIEWPORT'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Custom Properties"),
     (('bpy.types.WM_OT_alembic_export.export_custom_properties',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export custom properties to Alembic .userProperties"),
     (('bpy.types.WM_OT_alembic_export.export_custom_properties',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Hair"),
     (('bpy.types.WM_OT_alembic_export.export_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports hair particle systems as animated curves"),
     (('bpy.types.WM_OT_alembic_export.export_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Particles"),
     (('bpy.types.WM_OT_alembic_export.export_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Exports non-hair particle systems"),
     (('bpy.types.WM_OT_alembic_export.export_particles',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export per face shading group assignments"),
     (('bpy.types.WM_OT_alembic_export.face_sets',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Flatten Hierarchy"),
     (('bpy.types.WM_OT_alembic_export.flatten',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not preserve objects' parent/children relationship"),
     (('bpy.types.WM_OT_alembic_export.flatten',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value by which to enlarge or shrink the objects with respect to the world's origin"),
     (('bpy.types.WM_OT_alembic_export.global_scale',
       'bpy.types.WM_OT_alembic_import.scale',
       'bpy.types.WM_OT_obj_export.global_scale',
       'bpy.types.WM_OT_obj_import.global_scale',
       'bpy.types.WM_OT_ply_export.global_scale',
       'bpy.types.WM_OT_usd_import.scale'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Geometry Samples"),
     (('bpy.types.WM_OT_alembic_export.gsamples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times per frame object data are sampled"),
     (('bpy.types.WM_OT_alembic_export.gsamples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export normals"),
     (('bpy.types.WM_OT_alembic_export.normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export undeformed mesh vertex coordinates"),
     (('bpy.types.WM_OT_alembic_export.orcos',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export UVs with packed island"),
     (('bpy.types.WM_OT_alembic_export.packuv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selected Objects Only"),
     (('bpy.types.WM_OT_alembic_export.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only selected objects"),
     (('bpy.types.WM_OT_alembic_export.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shutter Close"),
     (('bpy.types.WM_OT_alembic_export.sh_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Time at which the shutter is closed"),
     (('bpy.types.WM_OT_alembic_export.sh_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shutter Open"),
     (('bpy.types.WM_OT_alembic_export.sh_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Time at which the shutter is open"),
     (('bpy.types.WM_OT_alembic_export.sh_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Start frame of the export, use the default value to take the start frame of the current scene"),
     (('bpy.types.WM_OT_alembic_export.start',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Subdivision Schema"),
     (('bpy.types.WM_OT_alembic_export.subdiv_schema',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export meshes using Alembic's subdivision schema"),
     (('bpy.types.WM_OT_alembic_export.subdiv_schema',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export polygons (quads and n-gons) as triangles"),
     (('bpy.types.WM_OT_alembic_export.triangulate',
       'bpy.types.WM_OT_collada_export.triangulate'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Instancing"),
     (('bpy.types.WM_OT_alembic_export.use_instancing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export data of duplicated objects as Alembic instances; speeds up the export and can be disabled for compatibility with other software"),
     (('bpy.types.WM_OT_alembic_export.use_instancing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export UVs"),
     (('bpy.types.WM_OT_alembic_export.uvs',
       'bpy.types.WM_OT_obj_export.export_uv',
       'bpy.types.WM_OT_ply_export.export_uv'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export color attributes"),
     (('bpy.types.WM_OT_alembic_export.vcolors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Visible Objects Only"),
     (('bpy.types.WM_OT_alembic_export.visible_objects_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only objects that are visible"),
     (('bpy.types.WM_OT_alembic_export.visible_objects_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transform Samples"),
     (('bpy.types.WM_OT_alembic_export.xsamples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times per frame transformations are sampled"),
     (('bpy.types.WM_OT_alembic_export.xsamples',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import Alembic"),
     (('bpy.types.WM_OT_alembic_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load an Alembic archive"),
     (('bpy.types.WM_OT_alembic_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always Add Cache Reader"),
     (('bpy.types.WM_OT_alembic_import.always_add_cache_reader',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add cache modifiers and constraints to imported objects even if they are not animated so that they can be updated when reloading the Alembic archive"),
     (('bpy.types.WM_OT_alembic_import.always_add_cache_reader',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable this to run the export in the background, disable to block Blender while exporting. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job"),
     (('bpy.types.WM_OT_alembic_import.as_background_job',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Is Sequence"),
     (('bpy.types.WM_OT_alembic_import.is_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set to true if the cache is split into separate files"),
     (('bpy.types.WM_OT_alembic_import.is_sequence',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Frame Range"),
     (('bpy.types.WM_OT_alembic_import.set_frame_range',
       'bpy.types.WM_OT_usd_import.set_frame_range'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If checked, update scene's start and end frame to match those of the Alembic archive"),
     (('bpy.types.WM_OT_alembic_import.set_frame_range',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Validate Meshes"),
     (('bpy.types.WM_OT_alembic_import.validate_meshes',
       'bpy.types.WM_OT_obj_import.validate_meshes'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Check imported mesh objects for invalid data (slow)"),
     (('bpy.types.WM_OT_alembic_import.validate_meshes',
       'bpy.types.WM_OT_obj_import.validate_meshes'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Append"),
     (('bpy.types.WM_OT_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append from a Library .blend file"),
     (('bpy.types.WM_OT_append',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Put new objects on the active collection"),
     (('bpy.types.WM_OT_append.active_collection',
       'bpy.types.WM_OT_link.active_collection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Select new objects"),
     (('bpy.types.WM_OT_append.autoselect',
       'bpy.types.WM_OT_link.autoselect'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear Asset Data"),
     (('bpy.types.WM_OT_append.clear_asset_data',
       'bpy.types.WM_OT_link.clear_asset_data'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't add asset meta-data or tags from the original data-block"),
     (('bpy.types.WM_OT_append.clear_asset_data',
       'bpy.types.WM_OT_link.clear_asset_data'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Re-Use Local Data"),
     (('bpy.types.WM_OT_append.do_reuse_local_id',
       'bpy.types.WM_OT_link.do_reuse_local_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Try to re-use previously matching appended data-blocks instead of appending a new copy"),
     (('bpy.types.WM_OT_append.do_reuse_local_id',
       'bpy.types.WM_OT_link.do_reuse_local_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Instance Collections"),
     (('bpy.types.WM_OT_append.instance_collections',
       'bpy.types.WM_OT_link.instance_collections'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create instances for collections, rather than adding them directly to the scene"),
     (('bpy.types.WM_OT_append.instance_collections',
       'bpy.types.WM_OT_link.instance_collections'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Instance Object Data"),
     (('bpy.types.WM_OT_append.instance_object_data',
       'bpy.types.WM_OT_link.instance_object_data'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create instances for object data which are not referenced by any objects"),
     (('bpy.types.WM_OT_append.instance_object_data',
       'bpy.types.WM_OT_link.instance_object_data'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link the objects or data-blocks rather than appending"),
     (('bpy.types.WM_OT_append.link',
       'bpy.types.WM_OT_link.link'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set \\"Fake User\\" for appended items (except objects and collections)"),
     (('bpy.types.WM_OT_append.set_fake',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Localize All"),
     (('bpy.types.WM_OT_append.use_recursive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Localize all appended data, including those indirectly linked from other libraries"),
     (('bpy.types.WM_OT_append.use_recursive',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Validate .blend strings"),
     (('bpy.types.WM_OT_blend_strings_utf8_validate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Check and fix all strings in current .blend file to be valid UTF-8 Unicode (needed for some old, 2.4x area files)"),
     (('bpy.types.WM_OT_blend_strings_utf8_validate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export COLLADA"),
     (('bpy.types.WM_OT_collada_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save a Collada file"),
     (('bpy.types.WM_OT_collada_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only Selected UV Map"),
     (('bpy.types.WM_OT_collada_export.active_uv_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only the selected UV Map"),
     (('bpy.types.WM_OT_collada_export.active_uv_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply Global Orientation"),
     (('bpy.types.WM_OT_collada_export.apply_global_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Rotate all root objects to match the global orientation settings otherwise set the global orientation per Collada asset"),
     (('bpy.types.WM_OT_collada_export.apply_global_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifiers to exported mesh (non destructive)"),
     (('bpy.types.WM_OT_collada_export.apply_modifiers',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Deform Bones Only"),
     (('bpy.types.WM_OT_collada_export.deform_bones_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only export deforming bones with armatures"),
     (('bpy.types.WM_OT_collada_export.deform_bones_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Transformation type for translation, scale and rotation. Note: The Animation transformation type in the Anim Tab is always equal to the Object transformation type in the Geom tab"),
     (('bpy.types.WM_OT_collada_export.export_animation_transformation_type',
       'bpy.types.WM_OT_collada_export.export_animation_transformation_type_selection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use <matrix> representation for exported transformations"),
     (("bpy.types.WM_OT_collada_export.export_animation_transformation_type_selection:'matrix'",
       "bpy.types.WM_OT_collada_export.export_object_transformation_type_selection:'matrix'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Decomposed"),
     (("bpy.types.WM_OT_collada_export.export_animation_transformation_type_selection:'decomposed'",
       "bpy.types.WM_OT_collada_export.export_object_transformation_type_selection:'decomposed'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use <rotate>, <translate> and <scale> representation for exported transformations"),
     (("bpy.types.WM_OT_collada_export.export_animation_transformation_type_selection:'decomposed'",
       "bpy.types.WM_OT_collada_export.export_object_transformation_type_selection:'decomposed'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Key Type"),
     (('bpy.types.WM_OT_collada_export.export_animation_type_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Type for exported animations (use sample keys or Curve keys)"),
     (('bpy.types.WM_OT_collada_export.export_animation_type_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Sampled points guided by sampling rate"),
     (("bpy.types.WM_OT_collada_export.export_animation_type_selection:'sample'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Curves (note: guided by curve keys)"),
     (("bpy.types.WM_OT_collada_export.export_animation_type_selection:'keys'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward Axis"),
     (('bpy.types.WM_OT_collada_export.export_global_forward_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward axis for export"),
     (('bpy.types.WM_OT_collada_export.export_global_forward_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is positive X Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is positive Y Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is positive Z Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is negative X Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'-X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is negative Y Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'-Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Forward is negative Z Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_forward_selection:'-Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Up Axis"),
     (('bpy.types.WM_OT_collada_export.export_global_up_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global Up axis for export"),
     (('bpy.types.WM_OT_collada_export.export_global_up_selection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is positive X Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is positive Y Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is positive Z Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is negative X Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'-X'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is negative Y Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'-Y'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Global UP is negative Z Axis"),
     (("bpy.types.WM_OT_collada_export.export_global_up_selection:'-Z'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Modifier resolution for export"),
     (('bpy.types.WM_OT_collada_export.export_mesh_type',
       'bpy.types.WM_OT_collada_export.export_mesh_type_selection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifier's viewport settings"),
     (("bpy.types.WM_OT_collada_export.export_mesh_type_selection:'view'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifier's render settings"),
     (("bpy.types.WM_OT_collada_export.export_mesh_type_selection:'render'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Object Transformation type for translation, scale and rotation"),
     (('bpy.types.WM_OT_collada_export.export_object_transformation_type',
       'bpy.types.WM_OT_collada_export.export_object_transformation_type_selection'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include all Actions"),
     (('bpy.types.WM_OT_collada_export.include_all_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export also unassigned actions (this allows you to export entire animation libraries for your character(s))"),
     (('bpy.types.WM_OT_collada_export.include_all_actions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Animations"),
     (('bpy.types.WM_OT_collada_export.include_animations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export animations if available (exporting animations will enforce the decomposition of node transforms into  <translation> <rotation> and <scale> components)"),
     (('bpy.types.WM_OT_collada_export.include_animations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Armatures"),
     (('bpy.types.WM_OT_collada_export.include_armatures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export related armatures (even if not selected)"),
     (('bpy.types.WM_OT_collada_export.include_armatures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Children"),
     (('bpy.types.WM_OT_collada_export.include_children',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all children of selected objects (even if not selected)"),
     (('bpy.types.WM_OT_collada_export.include_children',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include Shape Keys"),
     (('bpy.types.WM_OT_collada_export.include_shapekeys',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all Shape Keys from Mesh Objects"),
     (('bpy.types.WM_OT_collada_export.include_shapekeys',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Bind Info"),
     (('bpy.types.WM_OT_collada_export.keep_bind_info',
       'bpy.types.WM_OT_collada_import.keep_bind_info'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Store Bindpose information in custom bone properties for later use during Collada export"),
     (('bpy.types.WM_OT_collada_export.keep_bind_info',
       'bpy.types.WM_OT_collada_import.keep_bind_info'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Keyed Curves"),
     (('bpy.types.WM_OT_collada_export.keep_flat_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export also curves which have only one key or are totally flat"),
     (('bpy.types.WM_OT_collada_export.keep_flat_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Keyframes"),
     (('bpy.types.WM_OT_collada_export.keep_keyframes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use existing keyframes as additional sample points (this helps when you want to keep manual tweaks)"),
     (('bpy.types.WM_OT_collada_export.keep_keyframes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep Smooth curves"),
     (('bpy.types.WM_OT_collada_export.keep_smooth_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export also the curve handles (if available) (this does only work when the inverse parent matrix is the unity matrix, otherwise you may end up with odd results)"),
     (('bpy.types.WM_OT_collada_export.keep_smooth_curves',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit Precision"),
     (('bpy.types.WM_OT_collada_export.limit_precision',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reduce the precision of the exported data to 6 digits"),
     (('bpy.types.WM_OT_collada_export.limit_precision',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export to SL/OpenSim"),
     (('bpy.types.WM_OT_collada_export.open_sim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Compatibility mode for Second Life, OpenSimulator and other compatible online worlds"),
     (('bpy.types.WM_OT_collada_export.open_sim',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Section"),
     (('bpy.types.WM_OT_collada_export.prop_bc_export_ui_section',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only for User Interface organization"),
     (('bpy.types.WM_OT_collada_export.prop_bc_export_ui_section',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Data export section"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'main'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Geom"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'geometry'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Geometry export section"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'geometry'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Arm"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'armature'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Armature export section"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'armature'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Anim"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'animation'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation export section"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'animation'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collada export section"),
     (("bpy.types.WM_OT_collada_export.prop_bc_export_ui_section:'collada'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The distance between 2 keyframes (1 to key every frame)"),
     (('bpy.types.WM_OT_collada_export.sampling_rate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only selected elements"),
     (('bpy.types.WM_OT_collada_export.selected',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort by Object name"),
     (('bpy.types.WM_OT_collada_export.sort_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Sort exported data by Object name"),
     (('bpy.types.WM_OT_collada_export.sort_by_name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Blender Profile"),
     (('bpy.types.WM_OT_collada_export.use_blender_profile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export additional Blender specific information (for material, shaders, bones, etc.)"),
     (('bpy.types.WM_OT_collada_export.use_blender_profile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Object Instances"),
     (('bpy.types.WM_OT_collada_export.use_object_instantiation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Instantiate multiple Objects from same Data"),
     (('bpy.types.WM_OT_collada_export.use_object_instantiation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy textures to same folder where the .dae file is exported"),
     (('bpy.types.WM_OT_collada_export.use_texture_copies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import COLLADA"),
     (('bpy.types.WM_OT_collada_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a Collada file"),
     (('bpy.types.WM_OT_collada_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Auto Connect"),
     (('bpy.types.WM_OT_collada_import.auto_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set use_connect for parent bones which have exactly one child bone"),
     (('bpy.types.WM_OT_collada_import.auto_connect',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import custom normals, if available (otherwise Blender will compute them)"),
     (('bpy.types.WM_OT_collada_import.custom_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find Bone Chains"),
     (('bpy.types.WM_OT_collada_import.find_chains',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Find best matching Bone Chains and ensure bones in chain are connected"),
     (('bpy.types.WM_OT_collada_import.find_chains',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fix Leaf Bones"),
     (('bpy.types.WM_OT_collada_import.fix_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fix Orientation of Leaf Bones (Collada does only support Joints)"),
     (('bpy.types.WM_OT_collada_import.fix_orientation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Units"),
     (('bpy.types.WM_OT_collada_import.import_units',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If disabled match import to Blender's current Unit settings, otherwise use the settings from the Imported scene"),
     (('bpy.types.WM_OT_collada_import.import_units',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum Chain Length"),
     (('bpy.types.WM_OT_collada_import.min_chain_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "When searching Bone Chains disregard chains of length below this value"),
     (('bpy.types.WM_OT_collada_import.min_chain_length',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle System Console"),
     (('bpy.types.WM_OT_console_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle System Console"),
     (('bpy.types.WM_OT_console_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Collection Boolean Set"),
     (('bpy.types.WM_OT_context_collection_boolean_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set boolean values for a collection of items"),
     (('bpy.types.WM_OT_context_collection_boolean_set',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The data path from each iterable to the value (int or float)"),
     (('bpy.types.WM_OT_context_collection_boolean_set.data_path_item',
       'bpy.types.WM_OT_context_modal_mouse.data_path_item'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The data path relative to the context, must point to an iterable"),
     (('bpy.types.WM_OT_context_collection_boolean_set.data_path_iter',
       'bpy.types.WM_OT_context_modal_mouse.data_path_iter'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Array Cycle"),
     (('bpy.types.WM_OT_context_cycle_array',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set a context array value (useful for cycling the active mesh edit mode)"),
     (('bpy.types.WM_OT_context_cycle_array',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Enum Cycle"),
     (('bpy.types.WM_OT_context_cycle_enum',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Modal Mouse"),
     (('bpy.types.WM_OT_context_modal_mouse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Adjust arbitrary values with mouse input"),
     (('bpy.types.WM_OT_context_modal_mouse',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Text to display in header during scale"),
     (('bpy.types.WM_OT_context_modal_mouse.header_text',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale the mouse movement by this value before applying the delta"),
     (('bpy.types.WM_OT_context_modal_mouse.input_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Invert the mouse input"),
     (('bpy.types.WM_OT_context_modal_mouse.invert',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Enum Pie"),
     (('bpy.types.WM_OT_context_pie_enum',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Scale Int"),
     (('bpy.types.WM_OT_context_scale_int',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale an int context value"),
     (('bpy.types.WM_OT_context_scale_int',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always Step"),
     (('bpy.types.WM_OT_context_scale_int.always_step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Always adjust the value by a minimum of 1 when 'value' is not 1.0"),
     (('bpy.types.WM_OT_context_scale_int.always_step',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Set Boolean"),
     (('bpy.types.WM_OT_context_set_boolean',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Assignment value"),
     (('bpy.types.WM_OT_context_set_boolean.value',
       'bpy.types.WM_OT_context_set_float.value'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Set Float"),
     (('bpy.types.WM_OT_context_set_float',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Library ID"),
     (('bpy.types.WM_OT_context_set_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set a context value to an ID data-block"),
     (('bpy.types.WM_OT_context_set_id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Set String"),
     (('bpy.types.WM_OT_context_set_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Context Set Value"),
     (('bpy.types.WM_OT_context_set_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Debug Menu"),
     (('bpy.types.WM_OT_debug_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a popup to set the debug level"),
     (('bpy.types.WM_OT_debug_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Debug Value"),
     (('bpy.types.WM_OT_debug_menu.debug_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Documentation"),
     (('bpy.types.WM_OT_doc_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open online reference docs in a web browser"),
     (('bpy.types.WM_OT_doc_view',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Doc ID"),
     (('bpy.types.WM_OT_doc_view.doc_id',
       'bpy.types.WM_OT_doc_view_manual.doc_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Manual"),
     (('bpy.types.WM_OT_doc_view_manual',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load online manual"),
     (('bpy.types.WM_OT_doc_view_manual',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "View Online Manual"),
     (('bpy.types.WM_OT_doc_view_manual_ui_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "View a context based online manual in a web browser"),
     (('bpy.types.WM_OT_doc_view_manual_ui_context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Handle dropped .blend file"),
     (('bpy.types.WM_OT_drop_blend_file',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export to PDF"),
     (('bpy.types.WM_OT_gpencil_export_pdf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export grease pencil to PDF"),
     (('bpy.types.WM_OT_gpencil_export_pdf',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which frames to include in the export"),
     (('bpy.types.WM_OT_gpencil_export_pdf.frame_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include only active frame"),
     (("bpy.types.WM_OT_gpencil_export_pdf.frame_mode:'ACTIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include selected frames"),
     (("bpy.types.WM_OT_gpencil_export_pdf.frame_mode:'SELECTED'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include all scene frames"),
     (("bpy.types.WM_OT_gpencil_export_pdf.frame_mode:'SCENE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which objects to include in the export"),
     (('bpy.types.WM_OT_gpencil_export_pdf.selected_object_type',
       'bpy.types.WM_OT_gpencil_export_svg.selected_object_type'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include only the active object"),
     (("bpy.types.WM_OT_gpencil_export_pdf.selected_object_type:'ACTIVE'",
       "bpy.types.WM_OT_gpencil_export_svg.selected_object_type:'ACTIVE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include selected objects"),
     (("bpy.types.WM_OT_gpencil_export_pdf.selected_object_type:'SELECTED'",
       "bpy.types.WM_OT_gpencil_export_svg.selected_object_type:'SELECTED'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include all visible objects"),
     (("bpy.types.WM_OT_gpencil_export_pdf.selected_object_type:'VISIBLE'",
       "bpy.types.WM_OT_gpencil_export_svg.selected_object_type:'VISIBLE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Precision of stroke sampling. Low values mean a more precise result, and zero disables sampling"),
     (('bpy.types.WM_OT_gpencil_export_pdf.stroke_sample',
       'bpy.types.WM_OT_gpencil_export_svg.stroke_sample'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export strokes with fill enabled"),
     (('bpy.types.WM_OT_gpencil_export_pdf.use_fill',
       'bpy.types.WM_OT_gpencil_export_svg.use_fill'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export strokes with constant thickness"),
     (('bpy.types.WM_OT_gpencil_export_pdf.use_normalized_thickness',
       'bpy.types.WM_OT_gpencil_export_svg.use_normalized_thickness'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export to SVG"),
     (('bpy.types.WM_OT_gpencil_export_svg',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export grease pencil to SVG"),
     (('bpy.types.WM_OT_gpencil_export_svg',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clip Camera"),
     (('bpy.types.WM_OT_gpencil_export_svg.use_clip_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clip drawings to camera size when export in camera view"),
     (('bpy.types.WM_OT_gpencil_export_svg.use_clip_camera',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import SVG into grease pencil"),
     (('bpy.types.WM_OT_gpencil_import_svg',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resolution of the generated strokes"),
     (('bpy.types.WM_OT_gpencil_import_svg.resolution',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale of the final strokes"),
     (('bpy.types.WM_OT_gpencil_import_svg.scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Theme Preset"),
     (('bpy.types.WM_OT_interface_theme_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a theme preset"),
     (('bpy.types.WM_OT_interface_theme_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Keyconfig Preset"),
     (('bpy.types.WM_OT_keyconfig_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove a Key-config Preset"),
     (('bpy.types.WM_OT_keyconfig_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Library"),
     (('bpy.types.WM_OT_lib_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload the given library"),
     (('bpy.types.WM_OT_lib_reload',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library to reload"),
     (('bpy.types.WM_OT_lib_reload.library',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Relocate the given library to one or several others"),
     (('bpy.types.WM_OT_lib_relocate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library to relocate"),
     (('bpy.types.WM_OT_lib_relocate.library',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Link"),
     (('bpy.types.WM_OT_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Link from a Library .blend file"),
     (('bpy.types.WM_OT_link',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Memory Statistics"),
     (('bpy.types.WM_OT_memory_statistics',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Print memory statistics to the console"),
     (('bpy.types.WM_OT_memory_statistics',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export Wavefront OBJ"),
     (('bpy.types.WM_OT_obj_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the scene to a Wavefront OBJ file"),
     (('bpy.types.WM_OT_obj_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply modifiers to exported meshes"),
     (('bpy.types.WM_OT_obj_export.apply_modifiers',
       'bpy.types.WM_OT_ply_export.apply_modifiers'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The last frame to be exported"),
     (('bpy.types.WM_OT_obj_export.end_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Animation"),
     (('bpy.types.WM_OT_obj_export.export_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export multiple frames instead of the current frame only"),
     (('bpy.types.WM_OT_obj_export.export_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Colors"),
     (('bpy.types.WM_OT_obj_export.export_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export per-vertex colors"),
     (('bpy.types.WM_OT_obj_export.export_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Curves as NURBS"),
     (('bpy.types.WM_OT_obj_export.export_curves_as_nurbs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export curves in parametric form instead of exporting as mesh"),
     (('bpy.types.WM_OT_obj_export.export_curves_as_nurbs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Determines properties like object visibility, modifiers etc., where they differ for Render and Viewport"),
     (('bpy.types.WM_OT_obj_export.export_eval_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export objects as they appear in render"),
     (("bpy.types.WM_OT_obj_export.export_eval_mode:'DAG_EVAL_RENDER'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export objects as they appear in the viewport"),
     (("bpy.types.WM_OT_obj_export.export_eval_mode:'DAG_EVAL_VIEWPORT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Material Groups"),
     (('bpy.types.WM_OT_obj_export.export_material_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate an OBJ group for each part of a geometry using a different material"),
     (('bpy.types.WM_OT_obj_export.export_material_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Materials"),
     (('bpy.types.WM_OT_obj_export.export_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export MTL library. There must be a Principled-BSDF node for image textures to be exported to the MTL file"),
     (('bpy.types.WM_OT_obj_export.export_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Normals"),
     (('bpy.types.WM_OT_obj_export.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export per-face normals if the face is flat-shaded, per-face-per-loop normals if smooth-shaded"),
     (('bpy.types.WM_OT_obj_export.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Object Groups"),
     (('bpy.types.WM_OT_obj_export.export_object_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append mesh name to object name, separated by a '_'"),
     (('bpy.types.WM_OT_obj_export.export_object_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Materials with PBR Extensions"),
     (('bpy.types.WM_OT_obj_export.export_pbr_extensions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export MTL library using PBR extensions (roughness, metallic, sheen, coat, anisotropy, transmission)"),
     (('bpy.types.WM_OT_obj_export.export_pbr_extensions',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Selected Objects"),
     (('bpy.types.WM_OT_obj_export.export_selected_objects',
       'bpy.types.WM_OT_ply_export.export_selected_objects'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export only selected objects instead of all supported objects"),
     (('bpy.types.WM_OT_obj_export.export_selected_objects',
       'bpy.types.WM_OT_ply_export.export_selected_objects'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Smooth Groups"),
     (('bpy.types.WM_OT_obj_export.export_smooth_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Every smooth-shaded face is assigned group \\"1\\" and every flat-shaded face \\"off\\""),
     (('bpy.types.WM_OT_obj_export.export_smooth_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Triangulated Mesh"),
     (('bpy.types.WM_OT_obj_export.export_triangulated_mesh',
       'bpy.types.WM_OT_ply_export.export_triangulated_mesh'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All ngons with four or more vertices will be triangulated. Meshes in the scene will not be affected. Behaves like Triangulate Modifier with ngon-method: \\"Beauty\\", quad-method: \\"Shortest Diagonal\\", min vertices: 4"),
     (('bpy.types.WM_OT_obj_export.export_triangulated_mesh',
       'bpy.types.WM_OT_ply_export.export_triangulated_mesh'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Vertex Groups"),
     (('bpy.types.WM_OT_obj_export.export_vertex_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export the name of the vertex group of a face. It is approximated by choosing the vertex group with the most members among the vertices of a face"),
     (('bpy.types.WM_OT_obj_export.export_vertex_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Positive X axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'X'",
       "bpy.types.WM_OT_obj_export.up_axis:'X'",
       "bpy.types.WM_OT_obj_import.forward_axis:'X'",
       "bpy.types.WM_OT_obj_import.up_axis:'X'",
       "bpy.types.WM_OT_ply_export.forward_axis:'X'",
       "bpy.types.WM_OT_ply_export.up_axis:'X'",
       "bpy.types.WM_OT_ply_import.forward_axis:'X'",
       "bpy.types.WM_OT_ply_import.up_axis:'X'",
       "bpy.types.WM_OT_stl_import.forward_axis:'X'",
       "bpy.types.WM_OT_stl_import.up_axis:'X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Positive Y axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'Y'",
       "bpy.types.WM_OT_obj_export.up_axis:'Y'",
       "bpy.types.WM_OT_obj_import.forward_axis:'Y'",
       "bpy.types.WM_OT_obj_import.up_axis:'Y'",
       "bpy.types.WM_OT_ply_export.forward_axis:'Y'",
       "bpy.types.WM_OT_ply_export.up_axis:'Y'",
       "bpy.types.WM_OT_ply_import.forward_axis:'Y'",
       "bpy.types.WM_OT_ply_import.up_axis:'Y'",
       "bpy.types.WM_OT_stl_import.forward_axis:'Y'",
       "bpy.types.WM_OT_stl_import.up_axis:'Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Positive Z axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'Z'",
       "bpy.types.WM_OT_obj_export.up_axis:'Z'",
       "bpy.types.WM_OT_obj_import.forward_axis:'Z'",
       "bpy.types.WM_OT_obj_import.up_axis:'Z'",
       "bpy.types.WM_OT_ply_export.forward_axis:'Z'",
       "bpy.types.WM_OT_ply_export.up_axis:'Z'",
       "bpy.types.WM_OT_ply_import.forward_axis:'Z'",
       "bpy.types.WM_OT_ply_import.up_axis:'Z'",
       "bpy.types.WM_OT_stl_import.forward_axis:'Z'",
       "bpy.types.WM_OT_stl_import.up_axis:'Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative X axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_obj_export.up_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_obj_import.forward_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_obj_import.up_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_ply_export.forward_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_ply_export.up_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_ply_import.forward_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_ply_import.up_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_stl_import.forward_axis:'NEGATIVE_X'",
       "bpy.types.WM_OT_stl_import.up_axis:'NEGATIVE_X'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Y axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_obj_export.up_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_obj_import.forward_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_obj_import.up_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_ply_export.forward_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_ply_export.up_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_ply_import.forward_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_ply_import.up_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_stl_import.forward_axis:'NEGATIVE_Y'",
       "bpy.types.WM_OT_stl_import.up_axis:'NEGATIVE_Y'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Negative Z axis"),
     (("bpy.types.WM_OT_obj_export.forward_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_obj_export.up_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_obj_import.forward_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_obj_import.up_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_ply_export.forward_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_ply_export.up_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_ply_import.forward_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_ply_import.up_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_stl_import.forward_axis:'NEGATIVE_Z'",
       "bpy.types.WM_OT_stl_import.up_axis:'NEGATIVE_Z'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write relative paths where possible"),
     (("bpy.types.WM_OT_obj_export.path_mode:'RELATIVE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Write filename only"),
     (("bpy.types.WM_OT_obj_export.path_mode:'STRIP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy the file to the destination path"),
     (("bpy.types.WM_OT_obj_export.path_mode:'COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate Bitflags for Smooth Groups"),
     (('bpy.types.WM_OT_obj_export.smooth_group_bitflags',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "The first frame to be exported"),
     (('bpy.types.WM_OT_obj_export.start_frame',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import Wavefront OBJ"),
     (('bpy.types.WM_OT_obj_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load a Wavefront OBJ scene"),
     (('bpy.types.WM_OT_obj_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clamp Bounding Box"),
     (('bpy.types.WM_OT_obj_import.clamp_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Resize the objects to keep bounding box under this value. Value 0 disables clamping"),
     (('bpy.types.WM_OT_obj_import.clamp_size',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import OBJ groups as vertex groups"),
     (('bpy.types.WM_OT_obj_import.import_vertex_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split By Group"),
     (('bpy.types.WM_OT_obj_import.use_split_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import each OBJ 'g' as a separate object"),
     (('bpy.types.WM_OT_obj_import.use_split_groups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Split By Object"),
     (('bpy.types.WM_OT_obj_import.use_split_objects',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import each OBJ 'o' as a separate object"),
     (('bpy.types.WM_OT_obj_import.use_split_objects',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open"),
     (('bpy.types.WM_OT_open_mainfile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a Blender file"),
     (('bpy.types.WM_OT_open_mainfile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Display File Selector"),
     (('bpy.types.WM_OT_open_mainfile.display_file_selector',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load user interface setup in the .blend file"),
     (('bpy.types.WM_OT_open_mainfile.load_ui',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trusted Source"),
     (('bpy.types.WM_OT_open_mainfile.use_scripts',
       'bpy.types.WM_OT_recover_auto_save.use_scripts',
       'bpy.types.WM_OT_recover_last_session.use_scripts',
       'bpy.types.WM_OT_revert_mainfile.use_scripts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow .blend file to execute scripts automatically, default available from system preferences"),
     (('bpy.types.WM_OT_open_mainfile.use_scripts',
       'bpy.types.WM_OT_recover_auto_save.use_scripts',
       'bpy.types.WM_OT_recover_last_session.use_scripts',
       'bpy.types.WM_OT_revert_mainfile.use_scripts'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Operator Cheat Sheet"),
     (('bpy.types.WM_OT_operator_cheat_sheet',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "List all the operators in a text-block, useful for scripting"),
     (('bpy.types.WM_OT_operator_cheat_sheet',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Restore Operator Defaults"),
     (('bpy.types.WM_OT_operator_defaults',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the active operator to its default values"),
     (('bpy.types.WM_OT_operator_defaults',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Operator Enum Pie"),
     (('bpy.types.WM_OT_operator_pie_enum',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Operator name (in Python as string)"),
     (('bpy.types.WM_OT_operator_pie_enum.data_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Property name (as a string)"),
     (('bpy.types.WM_OT_operator_pie_enum.prop_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Operator Preset"),
     (('bpy.types.WM_OT_operator_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add or remove an Operator Preset"),
     (('bpy.types.WM_OT_operator_preset_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Disable add-on for workspace"),
     (('bpy.types.WM_OT_owner_disable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "UI Tag"),
     (('bpy.types.WM_OT_owner_disable.owner_id',
       'bpy.types.WM_OT_owner_enable.owner_id'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable add-on for workspace"),
     (('bpy.types.WM_OT_owner_enable',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a path in a file browser"),
     (('bpy.types.WM_OT_path_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export PLY"),
     (('bpy.types.WM_OT_ply_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the scene to a PLY file"),
     (('bpy.types.WM_OT_ply_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "ASCII Format"),
     (('bpy.types.WM_OT_ply_export.ascii_format',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export file in ASCII format, export as binary otherwise"),
     (('bpy.types.WM_OT_ply_export.ascii_format',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Vertex Colors"),
     (('bpy.types.WM_OT_ply_export.export_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not import/export color attributes"),
     (("bpy.types.WM_OT_ply_export.export_colors:'NONE'",
       "bpy.types.WM_OT_ply_import.import_colors:'NONE'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex colors in the file are in sRGB color space"),
     (("bpy.types.WM_OT_ply_export.export_colors:'SRGB'",
       "bpy.types.WM_OT_ply_import.import_colors:'SRGB'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Vertex colors in the file are in linear color space"),
     (("bpy.types.WM_OT_ply_export.export_colors:'LINEAR'",
       "bpy.types.WM_OT_ply_import.import_colors:'LINEAR'"),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Vertex Normals"),
     (('bpy.types.WM_OT_ply_export.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export specific vertex normals if available, export calculated normals otherwise"),
     (('bpy.types.WM_OT_ply_export.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import PLY"),
     (('bpy.types.WM_OT_ply_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import an PLY file as an object"),
     (('bpy.types.WM_OT_ply_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Vertex Colors"),
     (('bpy.types.WM_OT_ply_import.import_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Merges vertices by distance"),
     (('bpy.types.WM_OT_ply_import.merge_verts',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Batch-Clear Previews"),
     (('bpy.types.WM_OT_previews_batch_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear selected .blend file's previews"),
     (('bpy.types.WM_OT_previews_batch_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save Backups"),
     (('bpy.types.WM_OT_previews_batch_clear.use_backups',
       'bpy.types.WM_OT_previews_batch_generate.use_backups'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep a backup (.blend1) version of the files when saving with cleared previews"),
     (('bpy.types.WM_OT_previews_batch_clear.use_backups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear collections' previews"),
     (('bpy.types.WM_OT_previews_batch_clear.use_collections',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Materials & Textures"),
     (('bpy.types.WM_OT_previews_batch_clear.use_intern_data',
       'bpy.types.WM_OT_previews_batch_generate.use_intern_data'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear 'internal' previews (materials, textures, images, etc.)"),
     (('bpy.types.WM_OT_previews_batch_clear.use_intern_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear objects' previews"),
     (('bpy.types.WM_OT_previews_batch_clear.use_objects',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear scenes' previews"),
     (('bpy.types.WM_OT_previews_batch_clear.use_scenes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Trusted Blend Files"),
     (('bpy.types.WM_OT_previews_batch_clear.use_trusted',
       'bpy.types.WM_OT_previews_batch_generate.use_trusted'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enable Python evaluation for selected files"),
     (('bpy.types.WM_OT_previews_batch_clear.use_trusted',
       'bpy.types.WM_OT_previews_batch_generate.use_trusted'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Batch-Generate Previews"),
     (('bpy.types.WM_OT_previews_batch_generate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate selected .blend file's previews"),
     (('bpy.types.WM_OT_previews_batch_generate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Root path of all files listed in `files` collection"),
     (('bpy.types.WM_OT_previews_batch_generate.directory',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Collection of file paths with common `directory` root"),
     (('bpy.types.WM_OT_previews_batch_generate.files',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show Blender files in the File Browser"),
     (('bpy.types.WM_OT_previews_batch_generate.filter_blender',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Show folders in the File Browser"),
     (('bpy.types.WM_OT_previews_batch_generate.filter_folder',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Keep a backup (.blend1) version of the files when saving with generated previews"),
     (('bpy.types.WM_OT_previews_batch_generate.use_backups',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate collections' previews"),
     (('bpy.types.WM_OT_previews_batch_generate.use_collections',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate 'internal' previews (materials, textures, images, etc.)"),
     (('bpy.types.WM_OT_previews_batch_generate.use_intern_data',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate objects' previews"),
     (('bpy.types.WM_OT_previews_batch_generate.use_objects',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate scenes' previews"),
     (('bpy.types.WM_OT_previews_batch_generate.use_scenes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Clear Data-Block Previews"),
     (('bpy.types.WM_OT_previews_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear data-block previews (only for some types like objects, materials, textures, etc.)"),
     (('bpy.types.WM_OT_previews_clear',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Data-Block Type"),
     (('bpy.types.WM_OT_previews_clear.id_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Which data-block previews to clear"),
     (('bpy.types.WM_OT_previews_clear.id_type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Types"),
     (("bpy.types.WM_OT_previews_clear.id_type:'ALL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Geometry Types"),
     (("bpy.types.WM_OT_previews_clear.id_type:'GEOMETRY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear previews for scenes, collections and objects"),
     (("bpy.types.WM_OT_previews_clear.id_type:'GEOMETRY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "All Shading Types"),
     (("bpy.types.WM_OT_previews_clear.id_type:'SHADING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Clear previews for materials, lights, worlds, textures and images"),
     (("bpy.types.WM_OT_previews_clear.id_type:'SHADING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Refresh Data-Block Previews"),
     (('bpy.types.WM_OT_previews_ensure',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Ensure data-block previews are available and up-to-date (to be saved in .blend file, only for some types like materials, textures, etc.)"),
     (('bpy.types.WM_OT_previews_ensure',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Property"),
     (('bpy.types.WM_OT_properties_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add your own property to the data-block"),
     (('bpy.types.WM_OT_properties_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Property Edit"),
     (('bpy.types.WM_OT_properties_add.data_path',
       'bpy.types.WM_OT_properties_edit.data_path',
       'bpy.types.WM_OT_properties_edit_value.data_path',
       'bpy.types.WM_OT_properties_remove.data_path'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Property data_path edit"),
     (('bpy.types.WM_OT_properties_add.data_path',
       'bpy.types.WM_OT_properties_edit.data_path',
       'bpy.types.WM_OT_properties_edit_value.data_path',
       'bpy.types.WM_OT_properties_remove.data_path'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Jump to a different tab inside the properties editor"),
     (('bpy.types.WM_OT_properties_context_change',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Context"),
     (('bpy.types.WM_OT_properties_context_change.context',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Property"),
     (('bpy.types.WM_OT_properties_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Change a custom property's type, or adjust how it is displayed in the interface"),
     (('bpy.types.WM_OT_properties_edit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Python value for unsupported custom property types"),
     (('bpy.types.WM_OT_properties_edit.eval_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Grease Pencil v3"),
     (("bpy.types.WM_OT_properties_edit.id_type:'GREASEPENCIL_V3'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Library Overridable"),
     (('bpy.types.WM_OT_properties_edit.is_overridable_library',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Allow the property to be overridden when the data-block is linked"),
     (('bpy.types.WM_OT_properties_edit.is_overridable_library',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Property Name"),
     (('bpy.types.WM_OT_properties_edit.property_name',
       'bpy.types.WM_OT_properties_edit_value.property_name',
       'bpy.types.WM_OT_properties_remove.property_name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Property name edit"),
     (('bpy.types.WM_OT_properties_edit.property_name',
       'bpy.types.WM_OT_properties_edit_value.property_name',
       'bpy.types.WM_OT_properties_remove.property_name'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A single floating-point value"),
     (("bpy.types.WM_OT_properties_edit.property_type:'FLOAT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Float Array"),
     (("bpy.types.WM_OT_properties_edit.property_type:'FLOAT_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "An array of floating-point values"),
     (("bpy.types.WM_OT_properties_edit.property_type:'FLOAT_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A single integer"),
     (("bpy.types.WM_OT_properties_edit.property_type:'INT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Integer Array"),
     (("bpy.types.WM_OT_properties_edit.property_type:'INT_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "An array of integers"),
     (("bpy.types.WM_OT_properties_edit.property_type:'INT_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A true or false value"),
     (("bpy.types.WM_OT_properties_edit.property_type:'BOOL'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Boolean Array"),
     (("bpy.types.WM_OT_properties_edit.property_type:'BOOL_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "An array of true or false values"),
     (("bpy.types.WM_OT_properties_edit.property_type:'BOOL_ARRAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A string value"),
     (("bpy.types.WM_OT_properties_edit.property_type:'STRING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Data-Block"),
     (("bpy.types.WM_OT_properties_edit.property_type:'DATA_BLOCK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "A data-block value"),
     (("bpy.types.WM_OT_properties_edit.property_type:'DATA_BLOCK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit a Python value directly, for unsupported property types"),
     (("bpy.types.WM_OT_properties_edit.property_type:'PYTHON'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Soft Max"),
     (('bpy.types.WM_OT_properties_edit.soft_max_float',
       'bpy.types.WM_OT_properties_edit.soft_max_int'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Soft Min"),
     (('bpy.types.WM_OT_properties_edit.soft_min_float',
       'bpy.types.WM_OT_properties_edit.soft_min_int'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Soft Limits"),
     (('bpy.types.WM_OT_properties_edit.use_soft_limits',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limits the Property Value slider to a range, values outside the range must be inputted numerically"),
     (('bpy.types.WM_OT_properties_edit.use_soft_limits',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Edit Property Value"),
     (('bpy.types.WM_OT_properties_edit_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Edit the value of a custom property"),
     (('bpy.types.WM_OT_properties_edit_value',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Value for custom property types that can only be edited as a Python expression"),
     (('bpy.types.WM_OT_properties_edit_value.eval_string',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Remove Property"),
     (('bpy.types.WM_OT_properties_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Internal use (edit a property data_path)"),
     (('bpy.types.WM_OT_properties_remove',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Quit Blender"),
     (('bpy.types.WM_OT_quit_blender',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Quit Blender"),
     (('bpy.types.WM_OT_quit_blender',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Factory Settings"),
     (('bpy.types.WM_OT_read_factory_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load factory default startup file and preferences. To make changes permanent, use \\"Save Startup File\\" and \\"Save Preferences\\""),
     (('bpy.types.WM_OT_read_factory_settings',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Factory Startup App-Template Only"),
     (('bpy.types.WM_OT_read_factory_settings.use_factory_startup_app_template_only',
       'bpy.types.WM_OT_read_factory_userpref.use_factory_startup_app_template_only',
       'bpy.types.WM_OT_read_homefile.use_factory_startup_app_template_only'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Factory Preferences"),
     (('bpy.types.WM_OT_read_factory_userpref',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load factory default preferences. To make changes to preferences permanent, use \\"Save Preferences\\""),
     (('bpy.types.WM_OT_read_factory_userpref',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload History File"),
     (('bpy.types.WM_OT_read_history',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reloads history and bookmarks"),
     (('bpy.types.WM_OT_read_history',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Reload Start-Up File"),
     (('bpy.types.WM_OT_read_homefile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the default file"),
     (('bpy.types.WM_OT_read_homefile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to an alternative start-up file"),
     (('bpy.types.WM_OT_read_homefile.filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load user interface setup from the .blend file"),
     (('bpy.types.WM_OT_read_homefile.load_ui',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Factory Startup"),
     (('bpy.types.WM_OT_read_homefile.use_factory_startup',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Load Preferences"),
     (('bpy.types.WM_OT_read_userpref',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Load last saved preferences"),
     (('bpy.types.WM_OT_read_userpref',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recover Auto Save"),
     (('bpy.types.WM_OT_recover_auto_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open an automatically saved file to recover it"),
     (('bpy.types.WM_OT_recover_auto_save',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Recover Last Session"),
     (('bpy.types.WM_OT_recover_last_session',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the last closed file (\\"quit.blend\\")"),
     (('bpy.types.WM_OT_recover_last_session',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Redraw Timer"),
     (('bpy.types.WM_OT_redraw_timer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Simple redraw timer to test the speed of updating the interface"),
     (('bpy.types.WM_OT_redraw_timer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Number of times to redraw"),
     (('bpy.types.WM_OT_redraw_timer.iterations',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Seconds to run the test for (override iterations)"),
     (('bpy.types.WM_OT_redraw_timer.time_limit',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw Region"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw region"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw Region & Swap"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_SWAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw region and swap"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_SWAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw Window"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_WIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw window"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_WIN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw Window & Swap"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_WIN_SWAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Draw window and swap"),
     (("bpy.types.WM_OT_redraw_timer.type:'DRAW_WIN_SWAP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation Step"),
     (("bpy.types.WM_OT_redraw_timer.type:'ANIM_STEP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation steps"),
     (("bpy.types.WM_OT_redraw_timer.type:'ANIM_STEP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation Play"),
     (("bpy.types.WM_OT_redraw_timer.type:'ANIM_PLAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Animation playback"),
     (("bpy.types.WM_OT_redraw_timer.type:'ANIM_PLAY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo/Redo"),
     (("bpy.types.WM_OT_redraw_timer.type:'UNDO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Undo and redo"),
     (("bpy.types.WM_OT_redraw_timer.type:'UNDO'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Revert"),
     (('bpy.types.WM_OT_revert_mainfile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reload the saved file"),
     (('bpy.types.WM_OT_revert_mainfile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save the current file in the desired location"),
     (('bpy.types.WM_OT_save_as_mainfile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save Copy"),
     (('bpy.types.WM_OT_save_as_mainfile.copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Save a copy of the actual working state but does not make saved file active"),
     (('bpy.types.WM_OT_save_as_mainfile.copy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save Startup File"),
     (('bpy.types.WM_OT_save_homefile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make the current file the default .blend file"),
     (('bpy.types.WM_OT_save_homefile',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Search Operator"),
     (('bpy.types.WM_OT_search_operator',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pop-up a search over all available operators in current context"),
     (('bpy.types.WM_OT_search_operator',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Search Single Menu"),
     (('bpy.types.WM_OT_search_single_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Pop-up a search for a menu in current context"),
     (('bpy.types.WM_OT_search_single_menu',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Initial Query"),
     (('bpy.types.WM_OT_search_single_menu.initial_query',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Query to insert into the search box"),
     (('bpy.types.WM_OT_search_single_menu.initial_query',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Menu Name"),
     (('bpy.types.WM_OT_search_single_menu.menu_idname',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Menu to search in"),
     (('bpy.types.WM_OT_search_single_menu.menu_idname',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Stereo 3D"),
     (('bpy.types.WM_OT_set_stereo_3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle 3D stereo support for current window (or change the display mode)"),
     (('bpy.types.WM_OT_set_stereo_3d',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Splash Screen"),
     (('bpy.types.WM_OT_splash',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open the splash screen with release info"),
     (('bpy.types.WM_OT_splash',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "About Blender"),
     (('bpy.types.WM_OT_splash_about',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a window with information about Blender"),
     (('bpy.types.WM_OT_splash_about',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import an STL file as an object"),
     (('bpy.types.WM_OT_stl_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Validate Mesh"),
     (('bpy.types.WM_OT_stl_import.use_mesh_validate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Validate and correct imported mesh (slow)"),
     (('bpy.types.WM_OT_stl_import.use_mesh_validate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Save System Info"),
     (('bpy.types.WM_OT_sysinfo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate system information, saved into a text file"),
     (('bpy.types.WM_OT_sysinfo',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Set Tool by Index"),
     (('bpy.types.WM_OT_tool_set_by_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the tool by index (for key-maps)"),
     (('bpy.types.WM_OT_tool_set_by_index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set the fallback tool instead of the primary"),
     (('bpy.types.WM_OT_tool_set_by_index.as_fallback',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include tool subgroups"),
     (('bpy.types.WM_OT_tool_set_by_index.expand',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Index in Toolbar"),
     (('bpy.types.WM_OT_tool_set_by_index.index',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toolbar"),
     (('bpy.types.WM_OT_toolbar',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Fallback Tool Pie Menu"),
     (('bpy.types.WM_OT_toolbar_fallback_pie',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toolbar Prompt"),
     (('bpy.types.WM_OT_toolbar_prompt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Leader key like functionality for accessing tools"),
     (('bpy.types.WM_OT_toolbar_prompt',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a website in the web browser"),
     (('bpy.types.WM_OT_url_open',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "URL"),
     (('bpy.types.WM_OT_url_open.url',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "URL to open"),
     (('bpy.types.WM_OT_url_open.url',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Open Preset Website"),
     (('bpy.types.WM_OT_url_open_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a preset website in the web browser"),
     (('bpy.types.WM_OT_url_open_preset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Optional identifier"),
     (('bpy.types.WM_OT_url_open_preset.id',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Site"),
     (('bpy.types.WM_OT_url_open_preset.type',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Export USD"),
     (('bpy.types.WM_OT_usd_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export current scene in a USD archive"),
     (('bpy.types.WM_OT_usd_export',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export all frames in the render frame range, rather than only the current frame"),
     (('bpy.types.WM_OT_usd_export.export_animation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export hair particle systems as USD curves"),
     (('bpy.types.WM_OT_usd_export.export_hair',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export viewport settings of materials as USD preview materials, and export material assignments as geometry subsets"),
     (('bpy.types.WM_OT_usd_export.export_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include mesh color attributes in the export"),
     (('bpy.types.WM_OT_usd_export.export_mesh_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include normals of exported meshes in the export"),
     (('bpy.types.WM_OT_usd_export.export_normals',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export Textures"),
     (('bpy.types.WM_OT_usd_export.export_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If exporting materials, export textures referenced by material nodes to a 'textures' directory in the same directory as the USD file"),
     (('bpy.types.WM_OT_usd_export.export_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Include all mesh UV maps in the export"),
     (('bpy.types.WM_OT_usd_export.export_uvmaps',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "To USD Preview Surface"),
     (('bpy.types.WM_OT_usd_export.generate_preview_surface',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Generate an approximate USD Preview Surface shader representation of a Principled BSDF node network"),
     (('bpy.types.WM_OT_usd_export.generate_preview_surface',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite Textures"),
     (('bpy.types.WM_OT_usd_export.overwrite_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite existing files when exporting textures"),
     (('bpy.types.WM_OT_usd_export.overwrite_textures',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use relative paths to reference external files (i.e. textures, volumes) in USD, otherwise use absolute paths"),
     (('bpy.types.WM_OT_usd_export.relative_paths',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Root Prim"),
     (('bpy.types.WM_OT_usd_export.root_prim_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If set, add a transform primitive with the given path to the stage as the parent of all exported data"),
     (('bpy.types.WM_OT_usd_export.root_prim_path',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only export selected objects. Unselected parents of selected objects are exported as empty transform"),
     (('bpy.types.WM_OT_usd_export.selected_objects_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Export instanced objects as references in USD rather than real objects"),
     (('bpy.types.WM_OT_usd_export.use_instancing',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Visible Only"),
     (('bpy.types.WM_OT_usd_export.visible_objects_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only export visible objects. Invisible parents of exported objects are exported as empty transforms"),
     (('bpy.types.WM_OT_usd_export.visible_objects_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Import USD"),
     (('bpy.types.WM_OT_usd_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import USD stage into current scene"),
     (('bpy.types.WM_OT_usd_import',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create Collection"),
     (('bpy.types.WM_OT_usd_import.create_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add all imported objects to a new collection"),
     (('bpy.types.WM_OT_usd_import.create_collection',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import All Materials"),
     (('bpy.types.WM_OT_usd_import.import_all_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Also import materials that are not used by any geometry. Note that when this option is false, materials referenced by geometry will still be imported"),
     (('bpy.types.WM_OT_usd_import.import_all_materials',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Blend Shapes"),
     (('bpy.types.WM_OT_usd_import.import_blendshapes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import guide geometry"),
     (('bpy.types.WM_OT_usd_import.import_guide',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Instance Proxies"),
     (('bpy.types.WM_OT_usd_import.import_instance_proxies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create unique Blender objects for USD instances"),
     (('bpy.types.WM_OT_usd_import.import_instance_proxies',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import proxy geometry"),
     (('bpy.types.WM_OT_usd_import.import_proxy',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import final render geometry"),
     (('bpy.types.WM_OT_usd_import.import_render',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Shapes"),
     (('bpy.types.WM_OT_usd_import.import_shapes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Skeletons"),
     (('bpy.types.WM_OT_usd_import.import_skeletons',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Subdivision Scheme"),
     (('bpy.types.WM_OT_usd_import.import_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create subdivision surface modifiers based on the USD SubdivisionScheme attribute"),
     (('bpy.types.WM_OT_usd_import.import_subdiv',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to the directory where imported textures will be copied"),
     (('bpy.types.WM_OT_usd_import.import_textures_dir',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import Textures"),
     (('bpy.types.WM_OT_usd_import.import_textures_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Behavior when importing textures from a USDZ archive"),
     (('bpy.types.WM_OT_usd_import.import_textures_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Don't import textures"),
     (("bpy.types.WM_OT_usd_import.import_textures_mode:'IMPORT_NONE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Packed"),
     (("bpy.types.WM_OT_usd_import.import_textures_mode:'IMPORT_PACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import textures as packed data"),
     (("bpy.types.WM_OT_usd_import.import_textures_mode:'IMPORT_PACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Copy files to textures directory"),
     (("bpy.types.WM_OT_usd_import.import_textures_mode:'IMPORT_COPY'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import USD Preview"),
     (('bpy.types.WM_OT_usd_import.import_usd_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Convert UsdPreviewSurface shaders to Principled BSDF shader networks"),
     (('bpy.types.WM_OT_usd_import.import_usd_preview',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Visible Primitives Only"),
     (('bpy.types.WM_OT_usd_import.import_visible_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Do not import invisible USD primitives. Only applies to primitives with a non-animated visibility attribute. Primitives with animated visibility will always be imported"),
     (('bpy.types.WM_OT_usd_import.import_visible_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Light Intensity Scale"),
     (('bpy.types.WM_OT_usd_import.light_intensity_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Scale for the intensity of imported lights"),
     (('bpy.types.WM_OT_usd_import.light_intensity_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Material Name Collision"),
     (('bpy.types.WM_OT_usd_import.mtl_name_collision_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Behavior when the name of an imported material conflicts with an existing material"),
     (('bpy.types.WM_OT_usd_import.mtl_name_collision_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Make Unique"),
     (("bpy.types.WM_OT_usd_import.mtl_name_collision_mode:'MAKE_UNIQUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import each USD material as a unique Blender material"),
     (("bpy.types.WM_OT_usd_import.mtl_name_collision_mode:'MAKE_UNIQUE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reference Existing"),
     (("bpy.types.WM_OT_usd_import.mtl_name_collision_mode:'REFERENCE_EXISTING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If a material with the same name already exists, reference that instead of importing"),
     (("bpy.types.WM_OT_usd_import.mtl_name_collision_mode:'REFERENCE_EXISTING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path Mask"),
     (('bpy.types.WM_OT_usd_import.prim_path_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Import only the primitive at the given path and its descendants. Multiple paths may be specified in a list delimited by commas or semicolons"),
     (('bpy.types.WM_OT_usd_import.prim_path_mask',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Mesh Attributes"),
     (('bpy.types.WM_OT_usd_import.read_mesh_attributes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Read USD Primvars as mesh attributes"),
     (('bpy.types.WM_OT_usd_import.read_mesh_attributes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Read mesh color attributes"),
     (('bpy.types.WM_OT_usd_import.read_mesh_colors',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Read mesh UV coordinates"),
     (('bpy.types.WM_OT_usd_import.read_mesh_uvs',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Update the scene's start and end frame to match those of the USD archive"),
     (('bpy.types.WM_OT_usd_import.set_frame_range',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set Material Blend"),
     (('bpy.types.WM_OT_usd_import.set_material_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If the Import USD Preview option is enabled, the material blend method will automatically be set based on the shader's opacity and opacityThreshold inputs"),
     (('bpy.types.WM_OT_usd_import.set_material_blend',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File Name Collision"),
     (('bpy.types.WM_OT_usd_import.tex_name_collision_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Behavior when the name of an imported texture file conflicts with an existing file"),
     (('bpy.types.WM_OT_usd_import.tex_name_collision_mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use Existing"),
     (("bpy.types.WM_OT_usd_import.tex_name_collision_mode:'USE_EXISTING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "If a file with the same name already exists, use that instead of copying"),
     (("bpy.types.WM_OT_usd_import.tex_name_collision_mode:'USE_EXISTING'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Overwrite existing files"),
     (("bpy.types.WM_OT_usd_import.tex_name_collision_mode:'OVERWRITE'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Close Window"),
     (('bpy.types.WM_OT_window_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Close the current window"),
     (('bpy.types.WM_OT_window_close',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle Window Fullscreen"),
     (('bpy.types.WM_OT_window_fullscreen_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Toggle the current window full-screen"),
     (('bpy.types.WM_OT_window_fullscreen_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Window"),
     (('bpy.types.WM_OT_window_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new window"),
     (('bpy.types.WM_OT_window_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Main Window"),
     (('bpy.types.WM_OT_window_new_main',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new main window with its own workspace and scene selection"),
     (('bpy.types.WM_OT_window_new_main',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "XR Navigation Fly"),
     (('bpy.types.WM_OT_xr_navigation_fly',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move/turn relative to the VR viewer or controller"),
     (('bpy.types.WM_OT_xr_navigation_fly',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Direction"),
     (('bpy.types.WM_OT_xr_navigation_fly.lock_direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Limit movement to viewer's initial direction"),
     (('bpy.types.WM_OT_xr_navigation_fly.lock_direction',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Elevation"),
     (('bpy.types.WM_OT_xr_navigation_fly.lock_location_z',
       'bpy.types.WM_OT_xr_navigation_grab.lock_location_z'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to viewer elevation"),
     (('bpy.types.WM_OT_xr_navigation_fly.lock_location_z',
       'bpy.types.WM_OT_xr_navigation_grab.lock_location_z'),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Fly mode"),
     (('bpy.types.WM_OT_xr_navigation_fly.mode',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation forward axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'FORWARD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation back axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'BACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation left axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation right axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation up axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'UP'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along navigation down axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'DOWN'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn Left"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'TURNLEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn counter-clockwise around navigation up axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'TURNLEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn Right"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'TURNRIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Turn clockwise around navigation up axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'TURNRIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Viewer Forward"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_FORWARD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along viewer's forward axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_FORWARD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Viewer Back"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_BACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along viewer's back axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_BACK'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Viewer Left"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along viewer's left axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_LEFT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Viewer Right"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along viewer's right axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'VIEWER_RIGHT'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Controller Forward"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'CONTROLLER_FORWARD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Move along controller's forward axis"),
     (("bpy.types.WM_OT_xr_navigation_fly.mode:'CONTROLLER_FORWARD'",),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Frame Based Speed"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_frame_based',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Apply fixed movement deltas every update"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_frame_based',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Speed Interpolation 0"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_interpolation0',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "First cubic spline control point between min/max speeds"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_interpolation0',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Speed Interpolation 1"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_interpolation1',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Second cubic spline control point between min/max speeds"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_interpolation1',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum Speed"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_max',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum move (turn) speed in meters (radians) per second or frame"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_max',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum Speed"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_min',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Minimum move (turn) speed in meters (radians) per second or frame"),
     (('bpy.types.WM_OT_xr_navigation_fly.speed_min',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "XR Navigation Grab"),
     (('bpy.types.WM_OT_xr_navigation_grab',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Navigate the VR scene by grabbing with controllers"),
     (('bpy.types.WM_OT_xr_navigation_grab',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to viewer location"),
     (('bpy.types.WM_OT_xr_navigation_grab.lock_location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to viewer rotation"),
     (('bpy.types.WM_OT_xr_navigation_grab.lock_rotation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Lock Up Orientation"),
     (('bpy.types.WM_OT_xr_navigation_grab.lock_rotation_z',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to viewer up orientation"),
     (('bpy.types.WM_OT_xr_navigation_grab.lock_rotation_z',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Prevent changes to viewer scale"),
     (('bpy.types.WM_OT_xr_navigation_grab.lock_scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "XR Navigation Reset"),
     (('bpy.types.WM_OT_xr_navigation_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset VR navigation deltas relative to session base pose"),
     (('bpy.types.WM_OT_xr_navigation_reset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset location deltas"),
     (('bpy.types.WM_OT_xr_navigation_reset.location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset rotation deltas"),
     (('bpy.types.WM_OT_xr_navigation_reset.rotation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reset scale deltas"),
     (('bpy.types.WM_OT_xr_navigation_reset.scale',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "XR Navigation Teleport"),
     (('bpy.types.WM_OT_xr_navigation_teleport',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Set VR viewer location to controller raycast hit location"),
     (('bpy.types.WM_OT_xr_navigation_teleport',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Raycast axis in controller/viewer space"),
     (('bpy.types.WM_OT_xr_navigation_teleport.axis',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Raycast color"),
     (('bpy.types.WM_OT_xr_navigation_teleport.color',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Maximum raycast distance"),
     (('bpy.types.WM_OT_xr_navigation_teleport.distance',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "From Viewer"),
     (('bpy.types.WM_OT_xr_navigation_teleport.from_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Use viewer pose as raycast origin"),
     (('bpy.types.WM_OT_xr_navigation_teleport.from_viewer',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Interpolation factor between viewer and hit locations"),
     (('bpy.types.WM_OT_xr_navigation_teleport.interpolation',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Offset along hit normal to subtract from final location"),
     (('bpy.types.WM_OT_xr_navigation_teleport.offset',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Selectable Only"),
     (('bpy.types.WM_OT_xr_navigation_teleport.selectable_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Only allow selectable objects to influence raycast result"),
     (('bpy.types.WM_OT_xr_navigation_teleport.selectable_only',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Teleport Axes"),
     (('bpy.types.WM_OT_xr_navigation_teleport.teleport_axes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Enabled teleport axes in navigation space"),
     (('bpy.types.WM_OT_xr_navigation_teleport.teleport_axes',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Toggle VR Session"),
     (('bpy.types.WM_OT_xr_session_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Open a view for use with virtual reality headsets, or close it if already opened"),
     (('bpy.types.WM_OT_xr_session_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Add Workspace"),
     (('bpy.types.WORKSPACE_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new workspace by duplicating the current one or appending one from the user configuration"),
     (('bpy.types.WORKSPACE_OT_add',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Append and Activate Workspace"),
     (('bpy.types.WORKSPACE_OT_append_activate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Append a workspace and make it the active one in the current window"),
     (('bpy.types.WORKSPACE_OT_append_activate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Path to the library"),
     (('bpy.types.WORKSPACE_OT_append_activate.filepath',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Name of the workspace to append and activate"),
     (('bpy.types.WORKSPACE_OT_append_activate.idname',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Delete Workspace"),
     (('bpy.types.WORKSPACE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Delete the active workspace"),
     (('bpy.types.WORKSPACE_OT_delete',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New Workspace"),
     (('bpy.types.WORKSPACE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Add a new workspace"),
     (('bpy.types.WORKSPACE_OT_duplicate',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Workspace Reorder to Back"),
     (('bpy.types.WORKSPACE_OT_reorder_to_back',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reorder workspace to be last in the list"),
     (('bpy.types.WORKSPACE_OT_reorder_to_back',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Workspace Reorder to Front"),
     (('bpy.types.WORKSPACE_OT_reorder_to_front',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Reorder workspace to be first in the list"),
     (('bpy.types.WORKSPACE_OT_reorder_to_front',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "Pin Scene to Workspace"),
     (('bpy.types.WORKSPACE_OT_scene_pin_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Remember the last used scene for the current workspace and switch to it whenever this workspace is activated again"),
     (('bpy.types.WORKSPACE_OT_scene_pin_toggle',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("Operator", "New World"),
     (('bpy.types.WORLD_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Create a new world Data-Block"),
     (('bpy.types.WORLD_OT_new',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "BlenderBIM"),
     (('Add-on BlenderBIM info: name',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "File > Export, File > Import, Scene / Object / Material / Mesh Properties"),
     (('Add-on BlenderBIM info: location',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
    (("*", "Author, import, and export data using the Industry Foundation Classes schema"),
     (('Add-on BlenderBIM info: description',),
      ()),
     ("de_DE", "",
               (False, ())),
    ),
)

translations_dict = {}
for msg in translations_tuple:
    key = msg[0]
    for lang, trans, (is_fuzzy, comments) in msg[2:]:
        if trans and not is_fuzzy:
            translations_dict.setdefault(lang, {})[key] = trans



# ##### END AUTOGENERATED I18N SECTION #####
